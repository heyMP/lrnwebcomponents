{"version":3,"file":"lazy-import-discover.umd.js","sources":["lazy-import-discover.umd.js"],"sourcesContent":["/**\n * Copyright 2019 The Pennsylvania State University\n * @license Apache-2.0, see License.md for full text.\n */\n/**\n * `lazy-import-discover`\n * `Break peoples' brains on simplifying webcomponent integrations`\n *\n * @microcopy - language worth noting:\n *  -\n *\n * @customElement\n * @demo demo/index.html\n */\nclass LazyImportDiscover extends HTMLElement {\n  /**\n   * Store the tag name to make it easier to obtain directly.\n   * @notice function name must be here for tooling to operate correctly\n   */\n  static get tag() {\n    return \"lazy-import-discover\";\n  }\n  /**\n   * life cycle\n   */\n  constructor(delayRender = false) {\n    super();\n    // set tag for later use\n    this.tag = LazyImportDiscover.tag;\n  }\n  get base() {\n    return this.getAttribute('base');\n  }\n  set base(value) {\n    if (value != null && this.__ready) {\n      this.setAttribute('base', value);\n    }\n  }\n  /**\n   * life cycle, element is afixed to the DOM\n   */\n  connectedCallback() {\n    this.__ready = true;\n    var dyn = '';\n    if (this.base == null) {\n      this.base = \"../node_modules\";\n    }\n    document.querySelectorAll(':not(:defined)').forEach((el, index) => {\n      let t = el.tagName.toLowerCase();\n      let path = `@lrnwebcomponents/${t}/${t}.js`;\n      if (el.getAttribute('data-wc-def') != null) {\n        path = el.getAttribute('data-wc-def');\n      }\n      if (t !== 'style') {\n        dyn += `import('${this.base}/${path}');\\n`;\n      }\n    });\n    let s = document.createElement('script');\n    s.type=\"module\";\n    s.innerText = dyn;\n    document.head.appendChild(s);\n  }\n\n  static get observedAttributes() {\n    return ['base'];\n  }\n  attributeChangedCallback(attr, oldValue, newValue) {\n    if (attr === 'base' && newValue) {\n      console.log('base changed');\n    }\n  }\n}\nwindow.customElements.define(LazyImportDiscover.tag, LazyImportDiscover);\nexport { LazyImportDiscover };\n\n// self append. this is beyond trippy but the window loading will actually self invoke\nwindow.addEventListener(\"DOMContentLoaded\", (event) => {\n  var el = document.createElement(LazyImportDiscover.tag);\n  if (window.LazyImportBase) {\n    el.setAttribute('base', window.LazyImportBase);\n  }\n  document.body.appendChild(el);\n});"],"names":["LazyImportDiscover","tag","HTMLElement","__ready","dyn","this","base","document","querySelectorAll","forEach","el","index","t","tagName","toLowerCase","path","getAttribute","_this2","s","createElement","type","innerText","head","appendChild","attr","oldValue","newValue","console","log","value","setAttribute","window","customElements","define","addEventListener","event","LazyImportBase","body"],"mappings":"mvDAcMA,yKAcGC,IAAMD,EAAmBC,oPAdDC,wDAMtB,0FAsBFC,SAAU,MACXC,EAAM,GACO,MAAbC,KAAKC,YACFA,KAAO,mBAEdC,SAASC,iBAAiB,kBAAkBC,QAAQ,SAACC,EAAIC,OACnDC,EAAIF,EAAGG,QAAQC,cACfC,8BAA4BH,cAAKA,SACC,MAAlCF,EAAGM,aAAa,iBAClBD,EAAOL,EAAGM,aAAa,gBAEf,UAANJ,IACFR,qBAAkBa,EAAKX,iBAAQS,kBAG/BG,EAAIX,SAASY,cAAc,UAC/BD,EAAEE,KAAK,SACPF,EAAEG,UAAYjB,EACdG,SAASe,KAAKC,YAAYL,oDAMHM,EAAMC,EAAUC,GAC1B,SAATF,GAAmBE,GACrBC,QAAQC,IAAI,oDArCPvB,KAAKW,aAAa,sBAElBa,GACM,MAATA,GAAiBxB,KAAKF,cACnB2B,aAAa,OAAQD,sDA6BrB,CAAC,iBAQZE,OAAOC,eAAeC,OAAOjC,EAAmBC,IAAKD,GAIrD+B,OAAOG,iBAAiB,mBAAoB,SAACC,OACvCzB,EAAKH,SAASY,cAAcnB,EAAmBC,KAC/C8B,OAAOK,gBACT1B,EAAGoB,aAAa,OAAQC,OAAOK,gBAEjC7B,SAAS8B,KAAKd,YAAYb"}