{"version":3,"file":"material-progress.umd.js","sources":["lib/material-progress-behavior.js","lib/material-progress-bars.js","lib/material-progress-histo.js"],"sourcesContent":["import { dom } from \"@polymer/polymer/lib/legacy/polymer.dom.js\";\nimport * as async from \"@polymer/polymer/lib/utils/async.js\";\n\n/**\n * `window.MaterialProgressBehavior` is the base behavior for all `material-progress`\n * elements.\n * @polymerBehavior window.MaterialProgressBehavior\n */\nwindow.MaterialProgressBehaviorImpl = {\n  properties: {\n    /**\n     * Height of the bar and bars, in pixels.\n     */\n    barHeight: {\n      type: Number,\n      value: 22,\n      observer: \"_refresh\"\n    },\n    /**\n     * Animate when the size of a bar changes.\n     */\n    animated: {\n      type: Boolean,\n      value: false,\n      reflectToAttribute: true\n    },\n    /**\n     * Label to display before the legend.\n     */\n    legendLabel: {\n      type: String,\n      value: \"\",\n      observer: \"_refresh\"\n    },\n    /**\n     * The displayed bar nodes (ie direct children with\n     * the `bar` class and a `data-value` attribute).\n     */\n    bars: {\n      type: Array,\n      value() {\n        return [];\n      },\n      notify: true,\n      readOnly: true\n    },\n    /**\n     * Sum of all the bars' values.\n     */\n    sum: {\n      type: Number,\n      value: 0,\n      notify: true,\n      readOnly: true,\n      reflectToAttribute: true\n    },\n    /**\n     * The legend items to be displayed: Each is composed of the following\n     * attributes :\n     * - `label`: match the `data-legend` attribute of the corresponding bar.\n     * - `color`: match the css `background-color` of the corresponding bar.\n     */\n    _legendItems: {\n      type: Array,\n      value() {\n        return [];\n      },\n      readOnly: true\n    },\n    /**\n     * Indicates if the legend needs to be displayed.\n     */\n    _legendNeeded: {\n      type: Boolean,\n      value: false,\n      compute: \"_computeLegendNeeded(_legendItems)\",\n      readOnly: true\n    }\n  },\n\n  listeners: {\n    \"dom-mutation\": \"refresh\"\n  },\n\n  /**\n   * Refresh the element.\n   */\n  refresh() {\n    if (this._attached) {\n      // Reading and computing fundamental data\n      this._computeSumAndBars();\n      var i,\n        index,\n        bar,\n        barMeta,\n        foundOneValue = false,\n        animationDelay = 600 / (this.bars.length - 1);\n\n      // Legend initialization\n      this.splice(\"_legendItems\", 0, this._legendItems.length);\n      if (this.legendLabel) {\n        this.push(\"_legendItems\", { label: this.legendLabel });\n      }\n\n      // Computing each bar\n      if (this.bars) {\n        for (\n          i = this.bars.length - 1, index = this._barWithValueCount - 1;\n          i >= 0;\n          i--\n        ) {\n          bar = this.bars[i];\n          barMeta = this._getBarMeta(bar);\n          // Sizing/Styling\n          this.toggleClass(\"visible\", barMeta.value > 0, bar);\n          this.toggleClass(\"last\", barMeta.value > 0 && !foundOneValue, bar);\n          bar.style.width =\n            this.bars.length > 0\n              ? this._getWidthForBar(\n                  barMeta.value,\n                  this.sum,\n                  this._maxBarValue,\n                  this.barHeight\n                )\n              : \"0px\";\n          bar.style.zIndex = this.bars.length - i;\n          if (barMeta.value > 0) {\n            foundOneValue = true;\n            // Entry animation\n            if (!this._initialized) {\n              this._playFirstAnimation(bar, index, animationDelay);\n            }\n            index--;\n          }\n          // Legend shown if value > 0 or if forced\n          if (\n            barMeta.legend &&\n            (barMeta.value > 0 || barMeta.legendAlwaysVisible)\n          ) {\n            this.splice(\"_legendItems\", 1, 0, {\n              label: barMeta.legend,\n              color: window.getComputedStyle(bar).backgroundColor\n            });\n          }\n        }\n      }\n      // Update Polymer's custom styles\n      if (!this._oldBarHeight || this._oldBarHeight !== this.barHeight) {\n        this.customStyle[\"--material-progress-bar-height\"] =\n          this.barHeight + \"px\";\n        this.updateStyles();\n        this._oldBarHeight = this.barHeight;\n      }\n      this._initialized = foundOneValue;\n    }\n  },\n  ready() {\n    super.ready();\n\n    // Setting up the mutation observer\n    this._mutationOptions = {\n      childList: true,\n      subtree: true,\n      attributes: true,\n      characterData: false,\n      attributeFilter: [\n        \"data-value\",\n        \"data-legend\",\n        \"data-legend-always-visible\"\n      ]\n    };\n    this._mutationFilter = function(mutation) {\n      // We only want to listen to mutations (addition, removal, attribute change)\n      // of the direct children of the bar's container\n      return (\n        this._mutationIsChildList(mutation, this.$.barsContainer) ||\n        this._mutationIsChildAttributes(mutation, this.$.barsContainer)\n      );\n    };\n  },\n  connectedCallback() {\n    super.connectedCallback();\n    this._attached = true;\n    this._refresh();\n  },\n  _refresh() {\n    this.debounce(\"refresh\", this.refresh, 10);\n  },\n  _computeSumAndBars() {\n    var sum = 0,\n      value = 0,\n      withValueCount = 0,\n      max = 0,\n      validBars = [],\n      allChildren = dom(this.$.content).getDistributedNodes();\n    if (allChildren) {\n      allChildren.forEach(function(child) {\n        if (\n          child.classList &&\n          child.classList.contains(\"bar\") &&\n          child.hasAttribute(\"data-value\")\n        ) {\n          validBars.push(child);\n          value = this._getBarMeta(child).value;\n          sum += value;\n          withValueCount += value > 0 ? 1 : 0;\n          max = Math.max(max, value);\n        }\n      }, this);\n    }\n    this._setBars(validBars);\n    this._setSum(sum);\n    this._maxBarValue = max;\n    this._barWithValueCount = withValueCount;\n    return sum;\n  },\n  _getBarMeta(bar) {\n    var meta = { value: 0, legend: undefined },\n      val;\n    if (bar && bar.getAttribute) {\n      val = Number(bar.getAttribute(\"data-value\"));\n      meta.value = isNaN(val) ? 0 : Math.max(0, val);\n      meta.legend = bar.getAttribute(\"data-legend\");\n      meta.legendAlwaysVisible = bar.hasAttribute(\"data-legend-always-visible\");\n    }\n    return meta;\n  },\n  _getWidthForBar(barValue, barValuesSum, maxBarValue, barHeight) {\n    // To implement\n    return \"0px\";\n  },\n  _playFirstAnimation(node, index, animationDelay) {\n    this.toggleClass(\"entry\", true, node);\n    (node, index, animationDelay) => {\n      async.microTask.run(() => {\n        this.toggleClass(\"entry\", false, node);\n      }, 500 + animationDelay * index);\n    };\n  },\n  _computeLegendNeeded(legendItems) {\n    return legendItems && legendItems.length > 0;\n  }\n};\n\n/** @polymerBehavior */\nwindow.MaterialProgressBehavior = [window.MaterialProgressBehaviorImpl];\n","import { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport { mixinBehaviors } from \"@polymer/polymer/lib/legacy/class.js\";\nimport \"./material-progress-behavior.js\";\nclass MaterialProgressBars extends mixinBehaviors(\n  [MaterialProgressBehaviorImpl],\n  PolymerElement\n) {\n  static get template() {\n    return html`\n      <style>\n        #barsContainer {\n          overflow: hidden;\n          background-color: var(\n            --material-progress-bars-background-color,\n            #e0e0e0\n          );\n          border-radius: calc(var(--material-progress-bar-height) / 2);\n          min-width: var(--material-progress-bar-height);\n          height: var(--material-progress-bar-height);\n          @apply --layout;\n          @apply --material-progress-bars-style;\n        }\n        :host > #barsContainer > ::content > .bar {\n          margin-left: calc(-var(--material-progress-bar-height) / 2);\n          border-radius: 0 calc(var(--material-progress-bar-height) / 2)\n            calc(var(--material-progress-bar-height) / 2) 0;\n        }\n        :host([animated]) > #barsContainer > ::content > .entry {\n          -webkit-transition: width 850ms cubic-bezier(0.4, 0, 0.2, 1);\n          -ms-transition: width 850ms cubic-bezier(0.4, 0, 0.2, 1);\n          -moz-transition: width 850ms cubic-bezier(0.4, 0, 0.2, 1);\n          -o-transition: width 850ms cubic-bezier(0.4, 0, 0.2, 1);\n          transition: width 850ms cubic-bezier(0.4, 0, 0.2, 1);\n        }\n        :host > #barsContainer > ::content > * > span {\n          margin: 0 calc(var(--material-progress-bar-height) * 1 / 3) 0\n            calc(var(--material-progress-bar-height) * 5 / 6);\n        }\n      </style>\n      <div id=\"barsContainer\">\n        <slot id=\"content\" name=\".bar[data-value]\"></slot>\n      </div>\n      <div class=\"legend\" hidden\\$=\"[[_legendNeeded]]\">\n        <template is=\"dom-repeat\" items=\"[[_legendItems]]\" as=\"l\">\n          <span style\\$=\"color: [[l.color]];\">[[l.label]]</span>\n        </template>\n      </div>\n    `;\n  }\n  static get tag() {\n    return \"material-progress-bars\";\n  }\n  static get properties() {\n    return {\n      /**\n       * Maximum value represented by all progress bars.\n       * Bars will be scaled according to their `data-value` attribute\n       * and this maximum.\n       * Note that, if the sum of all the bars' values are superior to this\n       * `max`, it will override it.\n       */\n      max: {\n        type: Number,\n        value: 100,\n        observer: \"_refresh\"\n      }\n    };\n  }\n  _getWidthForBar(barValue, barValuesSum, maxBarValue, barHeight) {\n    var realMax = Math.max(barValuesSum, this.max),\n      width =\n        (realMax > 0 ? Math.floor((barValue / realMax) * 10000) / 100 : \"0\") +\n        \"%\",\n      negativeMargin = barHeight / 2;\n    return \"calc(\" + width + \" + \" + negativeMargin + \"px\" + \")\";\n  }\n}\nwindow.customElements.define(MaterialProgressBars.tag, MaterialProgressBars);\nexport { MaterialProgressBars };\n","import { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport { mixinBehaviors } from \"@polymer/polymer/lib/legacy/class.js\";\nimport \"./material-progress-behavior.js\";\nclass MaterialProgressHisto extends mixinBehaviors(\n  [MaterialProgressBehaviorImpl],\n  PolymerElement\n) {\n  static get template() {\n    return html`\n      <style>\n        #barsContainer {\n          @apply --layout-vertical;\n          @apply --material-progress-histo-style;\n        }\n        :host > #barsContainer > ::content > * {\n          height: 0px;\n        }\n        :host > #barsContainer > ::content > .bar {\n          border-radius: calc(var(--material-progress-bar-height) / 2);\n        }\n        :host > #barsContainer > ::content > .bar.visible:not(.last) {\n          margin-bottom: 12px;\n        }\n        :host > #barsContainer > ::content > .bar.visible {\n          min-width: var(--material-progress-bar-height);\n        }\n        :host > #barsContainer > ::content > .bar:not(.visible) > * {\n          visibility: hidden;\n        }\n        :host > #barsContainer > ::content > * > span {\n          margin: 0 calc(var(--material-progress-bar-height) * 1 / 3);\n        }\n      </style>\n      <div id=\"barsContainer\">\n        <slot id=\"content\" name=\".bar[data-value]\">\n          <span>test</span>\n        </slot>\n      </div>\n      <div class=\"legend\" hidden\\$=\"[[_legendNeeded]]\">\n        <template is=\"dom-repeat\" items=\"[[_legendItems]]\" as=\"l\">\n          <span style\\$=\"color: [[l.color]];\">[[l.label]]</span>\n        </template>\n      </div>\n    `;\n  }\n  static get tag() {\n    return \"material-progress-histo\";\n  }\n  static get properties() {\n    return {\n      /**\n       * Scales the bar relatively to the sum of all bars\n       * instead of the maximum bar `data-value`.\n       */\n      scaleToSum: {\n        type: Boolean,\n        value: false,\n        observer: \"_refresh\"\n      }\n    };\n  }\n  _getWidthForBar(barValue, barValuesSum, maxBarValue, barHeight) {\n    var scaleBase = this.scaleToSum ? barValuesSum : maxBarValue;\n    var width =\n      (scaleBase > 0 ? Math.floor((barValue / scaleBase) * 10000) / 100 : \"0\") +\n      \"%\";\n    return width;\n  }\n}\nwindow.customElements.define(MaterialProgressHisto.tag, MaterialProgressHisto);\nexport { MaterialProgressHisto };\n"],"names":["window","MaterialProgressBehaviorImpl","properties","barHeight","type","Number","value","observer","animated","Boolean","reflectToAttribute","legendLabel","String","bars","Array","notify","readOnly","sum","_legendItems","_legendNeeded","compute","listeners","refresh","this","_attached","_computeSumAndBars","i","index","bar","barMeta","foundOneValue","animationDelay","length","splice","push","label","_barWithValueCount","_getBarMeta","toggleClass","style","width","_getWidthForBar","_maxBarValue","zIndex","_initialized","_playFirstAnimation","legend","legendAlwaysVisible","color","getComputedStyle","backgroundColor","_oldBarHeight","customStyle","updateStyles","ready","_mutationOptions","childList","subtree","attributes","characterData","attributeFilter","_mutationFilter","mutation","_mutationIsChildList","$","barsContainer","_mutationIsChildAttributes","connectedCallback","_refresh","debounce","withValueCount","max","validBars","allChildren","dom","content","getDistributedNodes","forEach","child","classList","contains","hasAttribute","Math","_setBars","_setSum","val","meta","undefined","getAttribute","isNaN","barValue","barValuesSum","maxBarValue","node","_computeLegendNeeded","legendItems","MaterialProgressBehavior","MaterialProgressBars","mixinBehaviors","PolymerElement","realMax","floor","html","customElements","define","tag","MaterialProgressHisto","scaleBase","scaleToSum"],"mappings":"k2KAQAA,OAAOC,+BAA+B,CACpCC,WAAY,CAIVC,UAAW,CACTC,KAAMC,OACNC,MAAO,GACPC,SAAU,YAKZC,SAAU,CACRJ,KAAMK,QACNH,OAAO,EACPI,oBAAoB,GAKtBC,YAAa,CACXP,KAAMQ,OACNN,MAAO,GACPC,SAAU,YAMZM,KAAM,CACJT,KAAMU,MACNR,uBACS,IAETS,QAAQ,EACRC,UAAU,GAKZC,IAAK,CACHb,KAAMC,OACNC,MAAO,EACPS,QAAQ,EACRC,UAAU,EACVN,oBAAoB,GAQtBQ,aAAc,CACZd,KAAMU,MACNR,uBACS,IAETU,UAAU,GAKZG,cAAe,CACbf,KAAMK,QACNH,OAAO,EACPc,QAAS,qCACTJ,UAAU,IAIdK,UAAW,gBACO,WAMlBC,sBACMC,KAAKC,UAAW,MAEbC,yBACDC,EACFC,EACAC,EACAC,EACAC,GAAgB,EAChBC,EAAiB,KAAOR,KAAKV,KAAKmB,OAAS,WAGxCC,OAAO,eAAgB,EAAGV,KAAKL,aAAac,QAC7CT,KAAKZ,kBACFuB,KAAK,eAAgB,CAAEC,MAAOZ,KAAKZ,cAItCY,KAAKV,SAELa,EAAIH,KAAKV,KAAKmB,OAAS,EAAGL,EAAQJ,KAAKa,mBAAqB,EAC5DV,GAAK,EACLA,IAEAE,EAAML,KAAKV,KAAKa,GAChBG,EAAUN,KAAKc,YAAYT,QAEtBU,YAAY,UAAWT,EAAQvB,MAAQ,EAAGsB,QAC1CU,YAAY,OAAQT,EAAQvB,MAAQ,IAAMwB,EAAeF,GAC9DA,EAAIW,MAAMC,MACRjB,KAAKV,KAAKmB,OAAS,EACfT,KAAKkB,gBACHZ,EAAQvB,MACRiB,KAAKN,IACLM,KAAKmB,aACLnB,KAAKpB,WAEP,MACNyB,EAAIW,MAAMI,OAASpB,KAAKV,KAAKmB,OAASN,EAClCG,EAAQvB,MAAQ,IAClBwB,GAAgB,EAEXP,KAAKqB,mBACHC,oBAAoBjB,EAAKD,EAAOI,GAEvCJ,KAIAE,EAAQiB,SACPjB,EAAQvB,MAAQ,GAAKuB,EAAQkB,2BAEzBd,OAAO,eAAgB,EAAG,EAAG,CAChCE,MAAON,EAAQiB,OACfE,MAAOhD,OAAOiD,iBAAiBrB,GAAKsB,kBAMvC3B,KAAK4B,eAAiB5B,KAAK4B,gBAAkB5B,KAAKpB,iBAChDiD,YAAY,kCACf7B,KAAKpB,UAAY,UACdkD,oBACAF,cAAgB5B,KAAKpB,gBAEvByC,aAAed,IAGxBwB,sDAIOC,iBAAmB,CACtBC,WAAW,EACXC,SAAS,EACTC,YAAY,EACZC,eAAe,EACfC,gBAAiB,CACf,aACA,cACA,oCAGCC,gBAAkB,SAASC,UAI5BvC,KAAKwC,qBAAqBD,EAAUvC,KAAKyC,EAAEC,gBAC3C1C,KAAK2C,2BAA2BJ,EAAUvC,KAAKyC,EAAEC,iBAIvDE,8EAEO3C,WAAY,OACZ4C,YAEPA,yBACOC,SAAS,UAAW9C,KAAKD,QAAS,KAEzCG,kCACMR,EAAM,EACRX,EAAQ,EACRgE,EAAiB,EACjBC,EAAM,EACNC,EAAY,GACZC,EAAcC,MAAInD,KAAKyC,EAAEW,SAASC,6BAChCH,GACFA,EAAYI,QAAQ,SAASC,GAEzBA,EAAMC,WACND,EAAMC,UAAUC,SAAS,QACzBF,EAAMG,aAAa,gBAEnBT,EAAUtC,KAAK4C,GACfxE,EAAQiB,KAAKc,YAAYyC,GAAOxE,MAChCW,GAAOX,EACPgE,GAAkBhE,EAAQ,EAAI,EAAI,EAClCiE,EAAMW,KAAKX,IAAIA,EAAKjE,KAErBiB,WAEA4D,SAASX,QACTY,QAAQnE,QACRyB,aAAe6B,OACfnC,mBAAqBkC,EACnBrD,GAEToB,qBAAYT,OAERyD,EADEC,EAAO,CAAEhF,MAAO,EAAGwC,YAAQyC,UAE3B3D,GAAOA,EAAI4D,eACbH,EAAMhF,OAAOuB,EAAI4D,aAAa,eAC9BF,EAAKhF,MAAQmF,MAAMJ,GAAO,EAAIH,KAAKX,IAAI,EAAGc,GAC1CC,EAAKxC,OAASlB,EAAI4D,aAAa,eAC/BF,EAAKvC,oBAAsBnB,EAAIqD,aAAa,+BAEvCK,GAET7C,yBAAgBiD,EAAUC,EAAcC,EAAazF,SAE5C,OAET0C,6BAAoBgD,EAAMlE,EAAOI,QAC1BO,YAAY,SAAS,EAAMuD,IAOlCC,8BAAqBC,UACZA,GAAeA,EAAY/D,OAAS,IAK/ChC,OAAOgG,yBAA2B,CAAChG,OAAOC,kCClPpCgG,0FAA6BC,iBACjC,CAACjG,8BACDkG,8DA+DgBT,EAAUC,EAAcC,EAAazF,OAC/CiG,EAAUlB,KAAKX,IAAIoB,EAAcpE,KAAKgD,WAKnC,UAHF6B,EAAU,EAAIlB,KAAKmB,MAAOX,EAAWU,EAAW,KAAS,IAAM,KAChE,KAEqB,MADNjG,EAAY,EACmB,gDAlE3CmG,8CA0CA,kEAGA,CAQL/B,IAAK,CACHnE,KAAMC,OACNC,MAAO,IACPC,SAAU,kiFAalBP,OAAOuG,eAAeC,OAAOP,EAAqBQ,IAAKR,OC1EjDS,0FAA8BR,iBAClC,CAACjG,8BACDkG,8DAwDgBT,EAAUC,EAAcC,EAAazF,OAC/CwG,EAAYpF,KAAKqF,WAAajB,EAAeC,SAE9Ce,EAAY,EAAIzB,KAAKmB,MAAOX,EAAWiB,EAAa,KAAS,IAAM,KACpE,8CAzDKL,8CAsCA,mEAGA,CAKLM,WAAY,CACVxG,KAAMK,QACNH,OAAO,EACPC,SAAU,sBAYlBP,OAAOuG,eAAeC,OAAOE,EAAsBD,IAAKC"}