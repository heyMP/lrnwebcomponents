{"version":3,"file":"paper-search.umd.js","sources":["lib/paper-search-bar.js","lib/paper-filter-dialog.js","lib/paper-search-panel.js"],"sourcesContent":["import { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport { afterNextRender } from \"@polymer/polymer/lib/utils/render-status.js\";\nimport { mixinBehaviors } from \"@polymer/polymer/lib/legacy/class.js\";\nimport { IronA11yKeysBehavior } from \"@polymer/iron-a11y-keys-behavior/iron-a11y-keys-behavior.js\";\n\nclass PaperSearchBar extends mixinBehaviors(\n  [IronA11yKeysBehavior],\n  PolymerElement\n) {\n  static get tag() {\n    return \"paper-search-bar\";\n  }\n  /**\n   * Fired when the user requests to open the filtering dialog\n   *\n   * @event paper-search-filter\n   */\n  /**\n   * Fired when the user requests to search for a query\n   *\n   * @event paper-search-search\n   */\n  /**\n   * Fired when the user taps the clear icon\n   *\n   * @event paper-search-clear\n   */\n\n  static get properties() {\n    return {\n      /**\n       * Text for which the user is searching\n       */\n      query: {\n        type: String,\n        notify: true,\n        value: \"\"\n      },\n      /**\n       * Whether to hide the Filter button. Set attribute \"hide-filter-button\" to do so.\n       */\n      hideFilterButton: {\n        type: Boolean,\n        value: false\n      },\n      /**\n       * Whether to disable the Filter button. Set attribute \"disable-filter-button\" to do so.\n       */\n      disableFilterButton: {\n        type: Boolean,\n        value: false\n      },\n      /**\n       * Number of filters the user has been selected (shown in the badge) (optional)\n       */\n      nrSelectedFilters: {\n        type: Number,\n        value: 0\n      },\n      /**\n       * Icon shown in the search background\n       */\n      icon: {\n        type: String,\n        value: \"search\"\n      },\n      /**\n       * Text shown in the search box if the user didn't enter any query\n       */\n      placeholder: {\n        type: String,\n        value: \"Search\"\n      }\n    };\n  }\n\n  focus() {\n    this.$.input.focus();\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    afterNextRender(this, function() {\n      this.addEventListener(\"keypress\", this._search.bind(this));\n    });\n  }\n\n  disconnectedCallback() {\n    this.removeEventListener(\"keypress\", this._search.bind(this));\n    super.disconnectedCallback();\n  }\n  // Private methods\n  _filter(e) {\n    this.dispatchEvent(\n      new CustomEvent(\"paper-search-filter\", {\n        bubbles: true,\n        cancelable: true,\n        composed: true,\n        detail: true\n      })\n    );\n  }\n  _clear() {\n    this.query = \"\";\n    this.$.input.focus();\n    this.dispatchEvent(\n      new CustomEvent(\"paper-search-clear\", {\n        bubbles: true,\n        cancelable: true,\n        composed: true,\n        detail: true\n      })\n    );\n  }\n  _search(e) {\n    if (e.keyCode == 13) {\n      //Enter\n      this.dispatchEvent(\n        new CustomEvent(\"paper-search-search\", {\n          bubbles: true,\n          cancelable: true,\n          composed: true,\n          detail: true\n        })\n      );\n      return false;\n    }\n  }\n}\nwindow.customElements.define(PaperSearchBar.tag, PaperSearchBar);\nexport { PaperSearchBar };\n","import { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport { dom } from \"@polymer/polymer/lib/legacy/polymer.dom.js\";\nclass PaperFilterDialog extends PolymerElement {\n  static get tag() {\n    return \"paper-filter-dialog\";\n  }\n\n  /**\n   * Fired when the user requests to save the filter selection\n   *\n   * @event save\n   */\n\n  static get properties() {\n    return {\n      /**\n       * All filters from which the user can choose\n       */\n      filters: Array,\n      /**\n       * All filters that have been selected by the user, e.g. `{ age: [ \"child\", \"teen\" ] }`\n       */\n      selectedFilters: {\n        type: Object,\n        notify: true,\n        value: {}\n      },\n\n      /**\n       * Text for the reset button. Use this property to localize the element.\n       */\n      resetButton: {\n        type: String,\n        value: \"Reset\"\n      },\n\n      /**\n       * Text for the save button. Use this property to localize the element.\n       */\n      saveButton: {\n        type: String,\n        value: \"Save filters\"\n      },\n\n      /**\n       * Label shown if no values are selected for a filter. Use this property to localize the element.\n       */\n      noValuesLabel: {\n        type: String,\n        value: \"No filters yet\"\n      },\n\n      /**\n       * Internal copy that is changed. Copied back to original variable only once the user clicks on [Apply]\n       */\n      _selectedFilters: {\n        type: Object,\n        value: {}\n      },\n      _selectedFilter: Object,\n      _selectedFilterValues: {\n        type: Array,\n        value: []\n      }\n    };\n  }\n\n  // Public methods\n  /**\n   * Opens the filter dialog\n   */\n  open() {\n    // Attach dialog to the body to ensure it's on top of all existing overlays\n    // XXX - Known issue: this generates addEventListener errors from a11y\n    dom(document.body).appendChild(this);\n\n    // Wait until dialog is added to the DOM (required for Safari)\n    setTimeout(\n      function() {\n        this.$.dialog.open();\n\n        // Clone selected filters, so it can be changed without touching the external property\n        this._selectedFilters = Object.assign({}, this.selectedFilters);\n      }.bind(this),\n      1\n    );\n  }\n\n  close() {\n    this.$.dialog.close();\n  }\n\n  /**\n   * Handles if the user taps on a filter\n   */\n  _tapSelectFilter(e) {\n    this.$.selector.select(e.model.filter);\n\n    this._preselectFilterValues();\n  }\n\n  /**\n   * Separate function for unit testing\n   */\n  _preselectFilterValues() {\n    // Check all values that are selected\n    var selectedValueIds = this._selectedFilters[this._selectedFilter.id];\n    var isSelected = function(value) {\n      return (\n        Boolean(selectedValueIds) && selectedValueIds.indexOf(value.id) >= 0\n      );\n    };\n    this._selectedFilterValues = this._selectedFilter.values.map(function(\n      value\n    ) {\n      return Object.assign({}, value, {\n        selected: isSelected(value)\n      });\n    });\n  }\n  _tapReset(e) {\n    this._selectedFilters = {};\n  }\n  _tapApply(e) {\n    this.selectedFilters = this._selectedFilters;\n\n    this.dispatchEvent(\n      new CustomEvent(\"save\", {\n        bubbles: true,\n        cancelable: true,\n        composed: true,\n        detail: true\n      })\n    );\n  }\n  _tapSelectValues(e) {\n    // Captured IDs of the selected items\n    const selectedValues = this._selectedFilterValues\n      .filter(function(value) {\n        return value.selected;\n      })\n      .map(function(value) {\n        return value.id;\n      });\n    this._selectedFilters = Object.assign({}, this._selectedFilters, {\n      [this._selectedFilter.id]: selectedValues\n    });\n\n    this.$.selector.deselect(this._selectedFilter);\n  }\n\n  /**\n   * True if any filter was set\n   * @param  {[type]} selectedFilters  [description]\n   * @return {[type]}                   [description]\n   */\n  _hasSelectedFilters(selectedFilters) {\n    // Iterate until we find a filter that is selected\n    for (selectedFilter in selectedFilters) {\n      if (selectedFilters[selectedFilter].length > 0) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n  // Returns the concated names of the selected values for a specific filter\n  _getSelectedValuesNames(filter, _selectedFilters) {\n    var selectedValueIds = _selectedFilters[filter.id];\n    if (!filter.values || !selectedValueIds) {\n      return this.noValuesLabel;\n    }\n\n    // Capture names of all selected values\n    var names = filter.values\n      .filter(function(value) {\n        // Only consider values that are selected\n        return selectedValueIds.indexOf(value.id) >= 0;\n      })\n      .map(function(value) {\n        // Capture name of the selected value\n        return value.name;\n      });\n\n    return names.length > 0 ? names.join(\", \") : this.noValuesLabel;\n  }\n}\nwindow.customElements.define(PaperFilterDialog.tag, PaperFilterDialog);\nexport { PaperFilterDialog };\n","import { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport \"./paper-search-bar.js\";\nimport \"./paper-filter-dialog.js\";\n\nclass PaperSearchPanel extends PolymerElement {\n  static get tag() {\n    return \"paper-search-panel\";\n  }\n\n  /**\n   * Fired when the user changes the parameter defining the currently shown items\n   *\n   * @event change-request-params\n   */\n  /**\n   * Fired when the user requests to search for a query\n   *\n   * @event search\n   */\n\n  static get properties() {\n    return {\n      /**\n       * Query for which the user was searching\n       */\n      search: {\n        type: String,\n        observer: \"_onChangeRequest\",\n        notify: true\n      },\n      /**\n       * All filters from which the user can choose\n       */\n      filters: Object,\n      /**\n       * All filters that have been selected by the user, e.g. `{ age: [ \"child\", \"teen\" ] }`\n       */\n      selectedFilters: {\n        type: Object,\n        observer: \"_onChangeRequest\",\n        notify: true,\n        value: {}\n      },\n      /**\n       * Items that are currently shown in the lister\n       */\n      items: Array,\n      /**\n       * True if further items could be loaded\n       */\n      hasMore: {\n        type: Boolean,\n        value: false\n      },\n\n      /**\n       * True if items are currently loaded\n       */\n      loading: {\n        type: Boolean,\n        value: false\n      },\n\n      /**\n       * Whether to hide the Filter button. Set attribute \"hide-filter-button\" to do so.\n       */\n      hideFilterButton: {\n        type: Boolean,\n        value: false\n      },\n\n      /**\n       * Number of items loaded per page (i.e. for each click on [more])\n       */\n      count: {\n        type: Number,\n        notify: true,\n        value: 20\n      },\n      /**\n       * Icon shown in the search background\n       */\n      icon: {\n        type: String,\n        value: \"search\"\n      },\n      /**\n       * Text shown in the search box if the user didn't enter any query\n       */\n      placeholder: {\n        type: String,\n        value: \"Search\"\n      },\n\n      /**\n       * Text shown if no results are found. Use this property to localize the element.\n       */\n      noResultsText: {\n        type: String,\n        value: \"No matching results found.\"\n      },\n\n      /**\n       * Text for the more button to load more data. Use this property to localize the element.\n       */\n      moreButton: {\n        type: String,\n        value: \"More\"\n      },\n\n      /**\n       * Text for the reset button in the filter dialog. Use this property to localize the element.\n       */\n      resetButton: String,\n\n      /**\n       * Text for the save button in the filter dialog. Use this property to localize the element.\n       */\n      saveButton: String,\n\n      /**\n       * Label shown if no values are selected for a filter. Use this property to localize the element.\n       */\n      noValuesLabel: String,\n\n      _hasItems: {\n        type: Boolean,\n        computed: \"_computeHasItems(items)\",\n        value: false\n      }\n    };\n  }\n\n  getPaperSearchBarInstance() {\n    return this.$.paperSearchBar;\n  }\n\n  // Private methods\n  _loadMore() {\n    this.count += 20;\n    this._updateData();\n  }\n  _computeHasItems(items) {\n    return typeof items !== \"undefined\" && items.length > 0;\n  }\n  _showNoResults(_hasItems, loading) {\n    return !_hasItems && !loading;\n  }\n  _onChangeRequest(newValue, oldValue) {\n    // Ignore initial setting of properties (caller is supposed to trigger this call automatically)\n    if (typeof oldValue !== \"undefined\") {\n      // Set back to default to avoid endless listers\n      this.count = 20;\n      this._updateData();\n    }\n  }\n  _updateData() {\n    this.dispatchEvent(\n      new CustomEvent(\"change-request-params\", {\n        bubbles: true,\n        cancelable: true,\n        composed: true,\n        detail: true\n      })\n    );\n  }\n  _onFilter() {\n    this.$.filterDialog.open();\n  }\n  _onSearch() {\n    this.dispatchEvent(\n      new CustomEvent(\"search\", {\n        bubbles: true,\n        cancelable: true,\n        composed: true,\n        detail: true\n      })\n    );\n  }\n  // Counts the selected filters\n  _getNrSelectedFilters(selectedFilters) {\n    if (Object.keys(selectedFilters).length <= 0) {\n      return 0;\n    }\n\n    var nrSelectedFilters = Object.keys(selectedFilters)\n      .map(function(key) {\n        // Returns number of selected value for a filter\n        return selectedFilters[key].length;\n      })\n      .reduce(function(sum, value) {\n        // Sum up the selected values across filters\n        return sum + value;\n      });\n\n    return nrSelectedFilters;\n  }\n\n  _disableFilterButton(filters) {\n    return !(filters && filters.length > 0);\n  }\n}\nwindow.customElements.define(PaperSearchPanel.tag, PaperSearchPanel);\nexport { PaperSearchPanel };\n"],"names":["PaperSearchBar","mixinBehaviors","IronA11yKeysBehavior","PolymerElement","$","input","focus","afterNextRender","this","addEventListener","_search","bind","removeEventListener","e","dispatchEvent","CustomEvent","bubbles","cancelable","composed","detail","query","keyCode","type","String","notify","value","hideFilterButton","Boolean","disableFilterButton","nrSelectedFilters","Number","icon","placeholder","window","customElements","define","tag","PaperFilterDialog","dom","document","body","appendChild","setTimeout","dialog","open","_selectedFilters","Object","assign","selectedFilters","close","selector","select","model","filter","_preselectFilterValues","selectedValueIds","_selectedFilter","id","isSelected","indexOf","_selectedFilterValues","values","map","selected","selectedValues","deselect","selectedFilter","length","noValuesLabel","names","name","join","filters","Array","resetButton","saveButton","PaperSearchPanel","paperSearchBar","count","_updateData","items","_hasItems","loading","newValue","oldValue","filterDialog","keys","key","reduce","sum","search","observer","hasMore","noResultsText","moreButton","computed"],"mappings":"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"}