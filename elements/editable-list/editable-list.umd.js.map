{"version":3,"file":"editable-list.umd.js","sources":["lib/editable-list-item.js","editable-list.umd.js"],"sourcesContent":["/**\n * Copyright 2018 The Pennsylvania State University\n * @license Apache-2.0, see License.md for full text.\n */\nimport { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport \"@polymer/iron-icons/iron-icons.js\";\nimport \"@polymer/paper-icon-button/paper-icon-button.js\";\nimport \"@polymer/paper-input/paper-input.js\";\nimport \"@lrnwebcomponents/simple-colors/simple-colors.js\";\n\n/**\n * `editable-list-item`\n * `an individual list item`\n *\n * @microcopy - language worth noting:\n *  - an item is a thing in a list of many which can be modified\n *\n * @customElement\n * @polymer\n * @demo demo/index.html\n */\nclass EditableListItem extends PolymerElement {\n  // render function\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: block;\n        }\n\n        :host([hidden]) {\n          display: none;\n        }\n        :host([can-edit]) #edit {\n          visibility: visible;\n          opacity: 1;\n        }\n        :host([can-delete]) #delete {\n          visibility: visible;\n          opacity: 1;\n        }\n        :host #add,\n        #duplicate {\n          visibility: visible;\n          opacity: 1;\n        }\n        paper-icon-button {\n          visibility: hidden;\n          opacity: 0;\n          transition: 0.3s all linear;\n        }\n        paper-input {\n          --paper-input-container-shared-input-style: {\n            height: 40px;\n            padding: 0;\n            margin: 0;\n          }\n        }\n        .input {\n          display: block;\n          height: 40px;\n          padding: 0;\n          margin: 0;\n          line-height: 40px;\n        }\n        .input[hidden] {\n          display: none;\n        }\n        div.input {\n          z-index: 1;\n        }\n        .ops {\n          position: absolute;\n          display: block;\n          right: 0;\n          top: 0;\n          z-index: 2;\n          background-color: white;\n        }\n        .ops paper-icon-button {\n          border-radius: 50%;\n          height: 32px;\n          width: 32px;\n          padding: 4px;\n          margin: 0px;\n        }\n        .ops[hidden] {\n          display: none;\n        }\n        #edit {\n          color: white;\n          background-color: var(--simple-colors-default-theme-green-8, #ddffdd);\n        }\n        #delete {\n          color: white;\n          background-color: var(--simple-colors-default-theme-red-6, #ff5555);\n        }\n      </style>\n      <paper-input\n        id=\"input\"\n        class=\"input\"\n        value=\"{{value}}\"\n        hidden$=\"[[!editing]]\"\n      ></paper-input>\n      <div class=\"input\" hidden$=\"[[editing]]\">[[value]]</div>\n      <div class=\"ops\" hidden$=\"[[!editMode]]\">\n        <paper-icon-button\n          on-click=\"_editToggle\"\n          id=\"edit\"\n          icon=\"icons:create\"\n        ></paper-icon-button>\n        <paper-icon-button\n          on-click=\"_editToggle\"\n          id=\"add\"\n          icon=\"icons:add\"\n        ></paper-icon-button>\n        <paper-icon-button\n          on-click=\"_editToggle\"\n          id=\"duplicate\"\n          icon=\"icons:content-copy\"\n        ></paper-icon-button>\n        <paper-icon-button\n          on-click=\"_deleteModal\"\n          id=\"delete\"\n          icon=\"icons:delete\"\n        ></paper-icon-button>\n      </div>\n    `;\n  }\n  // properties available to the custom element for data binding\n  static get properties() {\n    return {\n      /**\n       * The value that gets bound into the text field\n       */\n      value: {\n        name: \"value\",\n        type: \"String\"\n      },\n      /**\n       * ability to edit the items in the list\n       */\n      editMode: {\n        name: \"editMode\",\n        type: \"Boolean\",\n        value: false,\n        notify: true,\n        reflectToAttribute: true\n      },\n      /**\n       * Editing state of the item\n       */\n      editing: {\n        name: \"editing\",\n        type: \"Boolean\",\n        value: false,\n        observer: \"_editModeChanged\"\n      },\n      /**\n       * Permission to edit this\n       */\n      canEdit: {\n        name: \"canEdit\",\n        type: \"Boolean\",\n        value: false,\n        reflectToAttribute: true\n      },\n      /**\n       * Permission to delete this\n       */\n      canDelete: {\n        name: \"canDelete\",\n        type: \"Boolean\",\n        value: false,\n        reflectToAttribute: true\n      }\n    };\n  }\n\n  /**\n   * Store the tag name to make it easier to obtain directly.\n   * @notice function name must be here for tooling to operate correctly\n   */\n  static get tag() {\n    return \"editable-list-item\";\n  }\n  /**\n   * life cycle, element is afixed to the DOM\n   */\n  connectedCallback() {\n    super.connectedCallback();\n  }\n  /**\n   * life cycle, element is removed from the DOM\n   */\n  //disconnectedCallback() {}\n  _editToggle(e) {\n    this.editing = !this.editing;\n    if (this.editing) {\n      this.$.input.focus();\n    }\n  }\n  /**\n   * Generate a modal to delete this item, parent has to handle that though\n   */\n  _deleteModal(e) {\n    const evt = new CustomEvent(\"editable-list-item-delete\", {\n      bubbles: true,\n      cancelable: true,\n      detail: {\n        element: this\n      }\n    });\n    this.dispatchEvent(evt);\n  }\n  // Observer editMode for changes\n  _editModeChanged(newValue, oldValue) {\n    if (typeof newValue !== typeof undefined) {\n      if (newValue) {\n        this.$.edit.icon = \"icons:save\";\n      } else {\n        this.$.edit.icon = \"icons:create\";\n      }\n    }\n  }\n}\nwindow.customElements.define(EditableListItem.tag, EditableListItem);\nexport { EditableListItem };\n","/**\n * Copyright 2018 The Pennsylvania State University\n * @license Apache-2.0, see License.md for full text.\n */\nimport { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport \"@lrnwebcomponents/simple-modal/simple-modal.js\";\nimport \"@polymer/iron-list/iron-list.js\";\nimport \"./lib/editable-list-item.js\";\n/**\n * `editable-list`\n * `a listing of items that can be edited in place with operations`\n *\n * @microcopy - language worth noting:\n *  -\n *\n * @customElement\n * @polymer\n * @demo demo/index.html\n */\nclass EditableList extends PolymerElement {\n  \n  // render function\n  static get template() {\n    return html`\n<style>:host {\n  display: block;\n}\n\n:host([hidden]) {\n  display: none;\n}\n\niron-list {\n  height: 100%;\n}</style>\n<iron-list id=\"list\" items=\"[[items]]\" as=\"item\" mutable-data>\n  <template>\n    <editable-list-item edit-mode=\"[[item.metadata.canEdit]]\" can-edit=\"[[item.metadata.canEdit]]\" can-delete=\"[[item.metadata.canDelete]]\" value=\"[[item.title]]\"></editable-list-item>\n  </template>\n</iron-list>`;\n  }\n\n  // properties available to the custom element for data binding\n  static get properties() {\n    return {\n  /**\n   * ability to edit the items in the list\n   */\n  \"editMode\": {\n    \"name\": \"editMode\",\n    \"type\": \"Boolean\",\n    \"value\": false,\n    \"notify\": true,\n    \"reflectToAttribute\": true,\n    \"observer\": \"_editModeChanged\"\n  },\n  /**\n   * items array\n   */\n  \"items\": {\n    \"name\": \"items\",\n    \"type\": \"Array\",\n    \"value\": [],\n    \"reflectToAttribute\": false,\n    \"observer\": \"_itemsChanged\"\n  },\n  /**\n   * Active element being worked on in the list\n   */\n  \"activeElement\": {\n    \"name\": \"activeElement\",\n    \"type\": \"Object\"\n  }\n}\n;\n  }\n\n  /**\n   * Store the tag name to make it easier to obtain directly.\n   * @notice function name must be here for tooling to operate correctly\n   */\n  static get tag() {\n    return \"editable-list\";\n  }\n  /**\n   * life cycle, element is afixed to the DOM\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    const modal = window.SimpleModal.requestAvailability();\n    this.$.list.addEventListener(\n      \"editable-list-item-delete\",\n      this.triggerDeleteModal.bind(this)\n    );\n  }\n  /**\n   * life cycle, element is removed from the DOM\n   */\n  disconnectedCallback() {\n    this.$.list.removeEventListener(\n      \"editable-list-item-delete\",\n      this.triggerDeleteModal.bind(this)\n    );\n  }\n\n  triggerDeleteModal(e) {\n    this.activeElement = e.detail.element;\n    let c = document.createElement(\"div\");\n    c.innerHTML = `<div>Are you sure you want to delete <strong>${\n      e.detail.element.value\n    }</strong>?</div>`;\n    let button1 = document.createElement(\"paper-button\");\n    button1.raised = true;\n    button1.addEventListener(\"click\", this._deleteItemConfirm.bind(this));\n    button1.appendChild(document.createTextNode(\"Delete\"));\n    let button2 = document.createElement(\"paper-button\");\n    button2.raised = true;\n    button2.setAttribute(\"dialog-dismiss\", \"dialog-dismiss\");\n    button2.appendChild(document.createTextNode(\"cancel\"));\n    let b = document.createElement(\"div\");\n    b.appendChild(button1);\n    b.appendChild(button2);\n    const evt = new CustomEvent(\"simple-modal-show\", {\n      bubbles: true,\n      cancelable: true,\n      detail: {\n        title: `Delete ${e.detail.element.value}`,\n        elements: {\n          content: c,\n          buttons: b\n        },\n        invokedBy: e.detail.element.$.delete,\n        clone: false\n      }\n    });\n    this.dispatchEvent(evt);\n  }\n  /**\n   * Confirm deleting the active item\n   */\n  _deleteItemConfirm(e) {\n    // @todo delete the thing\n    const evt = new CustomEvent(\"simple-modal-hide\", {\n      bubbles: true,\n      cancelable: true,\n      detail: {}\n    });\n    this.dispatchEvent(evt);\n  }\n  // Observer editMode for changes\n  _editModeChanged(newValue, oldValue) {\n    if (typeof newValue !== typeof undefined) {\n      this._itemsChanged(this.items);\n      for (var i in this.items) {\n        if (this.items[i].metadata) {\n          this.items[i].metadata.canEdit = newValue;\n          this.notifyPath(`items.${i}.metadata.canEdit`);\n        }\n      }\n    }\n  }\n  // Observer items for changes\n  _itemsChanged(newValue, oldValue) {\n    if (typeof newValue !== typeof undefined && typeof newValue === \"string\") {\n      this.set(\"items\", JSON.parse(newValue));\n    }\n  }\n}\nwindow.customElements.define(EditableList.tag, EditableList);\nexport { EditableList };\n"],"names":["EditableListItem","PolymerElement","e","editing","this","$","input","focus","evt","CustomEvent","bubbles","cancelable","detail","element","dispatchEvent","newValue","oldValue","_typeof","edit","icon","html","value","name","type","editMode","notify","reflectToAttribute","observer","canEdit","canDelete","window","customElements","define","tag","EditableList","SimpleModal","requestAvailability","list","addEventListener","triggerDeleteModal","bind","removeEventListener","activeElement","c","document","createElement","innerHTML","button1","raised","_deleteItemConfirm","appendChild","createTextNode","button2","setAttribute","b","title","elements","content","buttons","invokedBy","clone","i","_itemsChanged","items","metadata","notifyPath","set","JSON","parse"],"mappings":"+hKAqBMA,0FAAyBC,2JA+KjBC,QACLC,SAAWC,KAAKD,QACjBC,KAAKD,cACFE,EAAEC,MAAMC,6CAMJL,OACLM,EAAM,IAAIC,YAAY,4BAA6B,CACvDC,SAAS,EACTC,YAAY,EACZC,OAAQ,CACNC,QAAST,aAGRU,cAAcN,4CAGJO,EAAUC,iBACrBC,EAAOF,UAEFV,EAAEa,KAAKC,KADVJ,EACiB,aAEA,0DArMhBK,qDA2GA,CAILC,MAAO,CACLC,KAAM,QACNC,KAAM,UAKRC,SAAU,CACRF,KAAM,WACNC,KAAM,UACNF,OAAO,EACPI,QAAQ,EACRC,oBAAoB,GAKtBvB,QAAS,CACPmB,KAAM,UACNC,KAAM,UACNF,OAAO,EACPM,SAAU,oBAKZC,QAAS,CACPN,KAAM,UACNC,KAAM,UACNF,OAAO,EACPK,oBAAoB,GAKtBG,UAAW,CACTP,KAAM,YACNC,KAAM,UACNF,OAAO,EACPK,oBAAoB,sCAUjB,yfA0CXI,OAAOC,eAAeC,OAAOhC,EAAiBiC,IAAKjC,OC/M7CkC,0FAAqBjC,uHAsET6B,OAAOK,YAAYC,2BAC5B/B,EAAEgC,KAAKC,iBACV,4BACAlC,KAAKmC,mBAAmBC,KAAKpC,2DAO1BC,EAAEgC,KAAKI,oBACV,4BACArC,KAAKmC,mBAAmBC,KAAKpC,kDAIdF,QACZwC,cAAgBxC,EAAEU,OAAOC,YAC1B8B,EAAIC,SAASC,cAAc,OAC/BF,EAAEG,iEACA5C,EAAEU,OAAOC,QAAQQ,8BAEf0B,EAAUH,SAASC,cAAc,gBACrCE,EAAQC,QAAS,EACjBD,EAAQT,iBAAiB,QAASlC,KAAK6C,mBAAmBT,KAAKpC,OAC/D2C,EAAQG,YAAYN,SAASO,eAAe,eACxCC,EAAUR,SAASC,cAAc,gBACrCO,EAAQJ,QAAS,EACjBI,EAAQC,aAAa,iBAAkB,kBACvCD,EAAQF,YAAYN,SAASO,eAAe,eACxCG,EAAIV,SAASC,cAAc,OAC/BS,EAAEJ,YAAYH,GACdO,EAAEJ,YAAYE,OACR5C,EAAM,IAAIC,YAAY,oBAAqB,CAC/CC,SAAS,EACTC,YAAY,EACZC,OAAQ,CACN2C,uBAAiBrD,EAAEU,OAAOC,QAAQQ,OAClCmC,SAAU,CACRC,QAASd,EACTe,QAASJ,GAEXK,UAAWzD,EAAEU,OAAOC,QAAQR,SAC5BuD,OAAO,UAGN9C,cAAcN,8CAKFN,OAEXM,EAAM,IAAIC,YAAY,oBAAqB,CAC/CC,SAAS,EACTC,YAAY,EACZC,OAAQ,UAELE,cAAcN,4CAGJO,EAAUC,oBACrBC,EAAOF,OAEJ,IAAI8C,UADJC,cAAc1D,KAAK2D,OACV3D,KAAK2D,MACb3D,KAAK2D,MAAMF,GAAGG,gBACXD,MAAMF,GAAGG,SAASpC,QAAUb,OAC5BkD,2BAAoBJ,+DAMnB9C,EAAUC,iBAClBC,EAAOF,IAAqD,iBAAbA,QAC5CmD,IAAI,QAASC,KAAKC,MAAMrD,8CA7IxBK,qDAqBA,UAIG,MACF,gBACA,iBACC,UACC,sBACY,WACV,0BAKL,MACC,aACA,cACC,uBACa,WACV,+BAKG,MACP,qBACA,6CAWD,yBAsFXU,OAAOC,eAAeC,OAAOE,EAAaD,IAAKC"}