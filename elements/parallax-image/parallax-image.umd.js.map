{"version":3,"file":"parallax-image.umd.js","sources":["parallax-image.umd.js"],"sourcesContent":["import { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport { afterNextRender } from \"@polymer/polymer/lib/utils/render-status.js\";\nimport { HAXWiring } from \"@lrnwebcomponents/hax-body-behaviors/lib/HAXWiring.js\";\nimport { SchemaBehaviors } from \"@lrnwebcomponents/schema-behaviors/schema-behaviors.js\";\n/**\n * `parallax-image`\n * @demo demo/index.html\n */\nclass ParallaxImage extends SchemaBehaviors(PolymerElement) {\n  constructor() {\n    super();\n    afterNextRender(this, function() {\n      this.HAXWiring = new HAXWiring();\n      this.HAXWiring.setup(\n        ParallaxImage.haxProperties,\n        ParallaxImage.tag,\n        this\n      );\n    });\n  }\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: block;\n          --parallax-image-background: \"\";\n          --parallax-title-background: rgba(0, 0, 0, 0.3);\n          --parallax-title-font: #fff;\n        }\n\n        .parallax_container {\n          height: 400px;\n          width: 100%;\n          overflow: hidden;\n          display: flex;\n          justify-content: center;\n        }\n\n        .parallax {\n          background-image: var(--parallax-image-background);\n          background-attachment: fixed;\n          background-position: top center;\n          background-repeat: no-repeat;\n          background-size: cover;\n          width: 100%;\n          height: 100%;\n          justify-content: center;\n        }\n\n        #bgParallax {\n          display: flex;\n          align-items: center;\n        }\n\n        .title {\n          background: var(--parallax-title-background);\n          display: block;\n          padding: 20px 15px;\n          text-align: center;\n          width: 40%;\n          color: var(--parallax-title-font);\n          font-size: 32px;\n          position: absolute;\n          margin-top: 120px;\n        }\n\n        @media screen and (max-width: 900px) {\n          .title {\n            font-size: 16px;\n          }\n        }\n      </style>\n\n      <a href=\"[[url]]\" target$=\"[[_urlTarget(url)]]\">\n        <div class=\"parallax_container\">\n          <div id=\"bgParallax\" class=\"parallax\">\n            <div class=\"title\" id=\"titleParallax\">\n              <slot name=\"parallax_heading\"></slot>\n            </div>\n          </div>\n        </div>\n      </a>\n    `;\n  }\n\n  static get tag() {\n    return \"parallax-image\";\n  }\n\n  static get properties() {\n    let props = {\n      /**\n       * Image\n       */\n      imageBg: {\n        type: String,\n        value: \"\",\n        reflectToAttribute: true\n      },\n      /**\n       * Url\n       */\n      url: {\n        type: String,\n        value: \"\",\n        reflectToAttribute: true\n      }\n    };\n    if (super.properties) {\n      props = Object.assign(props, super.properties);\n    }\n    return props;\n  }\n\n  static get observers() {\n    return [\"__updateStyles(imageBg)\"];\n  }\n\n  _urlTarget(url) {\n    if (url) {\n      const external = this._outsideLink(url);\n      if (external) {\n        return \"_blank\";\n      }\n    }\n    return false;\n  }\n  /**\n   * Internal function to check if a url is external\n   */\n  _outsideLink(url) {\n    if (url.indexOf(\"http\") != 0) return false;\n    var loc = location.href,\n      path = location.pathname,\n      root = loc.substring(0, loc.indexOf(path));\n    return url.indexOf(root) != 0;\n  }\n  __updateStyles(imageBg) {\n    this.updateStyles({ \"--parallax-image-background\": `url(${imageBg})` });\n  }\n  ready() {\n    super.ready();\n    const bgParallax = this.$.bgParallax;\n    const titleParallax = this.$.titleParallax;\n    window.addEventListener(\"scroll\", e => {\n      const yParallaxPosition = window.scrollY * -0.2;\n      const yParallaxPositionTitle = yParallaxPosition * 1.4;\n      bgParallax.style.backgroundPosition = `center ${yParallaxPosition}px`;\n      titleParallax.style.transform = `translate3D(0, ${yParallaxPositionTitle}px, 0)`;\n    });\n  }\n  disconnectedCallback() {\n    window.removeEventListener(\"scroll\", e => {\n      const yParallaxPosition = window.scrollY * -0.2;\n      const yParallaxPositionTitle = yParallaxPosition * 1.4;\n      bgParallax.style.backgroundPosition = `center ${yParallaxPosition}px`;\n      titleParallax.style.transform = `translate3D(0, ${yParallaxPositionTitle}px, 0)`;\n    });\n    super.disconnectedCallback();\n  }\n  static get haxProperties() {\n    return {\n      canScale: true,\n      canPosition: true,\n      canEditSource: false,\n      gizmo: {\n        title: \"Sample gizmo\",\n        description: \"The user will be able to see this for selection in a UI.\",\n        icon: \"av:play-circle-filled\",\n        color: \"grey\",\n        groups: [\"Video\", \"Media\"],\n        handles: [\n          {\n            type: \"video\",\n            url: \"source\"\n          }\n        ],\n        meta: {\n          author: \"Your organization on github\"\n        }\n      },\n      settings: {\n        quick: [\n          {\n            property: \"title\",\n            title: \"Title\",\n            description: \"The title of the element\",\n            inputMethod: \"textfield\",\n            icon: \"editor:title\"\n          }\n        ],\n        configure: [\n          {\n            property: \"title\",\n            title: \"Title\",\n            description: \"The title of the element\",\n            inputMethod: \"textfield\",\n            icon: \"editor:title\"\n          }\n        ],\n        advanced: []\n      }\n    };\n  }\n}\nwindow.customElements.define(ParallaxImage.tag, ParallaxImage);\nexport { ParallaxImage };\n"],"names":["ParallaxImage","afterNextRender","HAXWiring","setup","haxProperties","tag","this","SchemaBehaviors","PolymerElement","html","props","imageBg","type","String","value","reflectToAttribute","url","Object","assign","canScale","canPosition","canEditSource","gizmo","title","description","icon","color","groups","handles","meta","author","settings","quick","property","inputMethod","configure","advanced","_outsideLink","indexOf","loc","location","href","path","pathname","root","substring","updateStyles","bgParallax","$","titleParallax","window","addEventListener","e","yParallaxPosition","scrollY","yParallaxPositionTitle","style","backgroundPosition","transform","removeEventListener","customElements","define"],"mappings":"ovGAQMA,gOAGFC,uBAAsB,gBACfC,UAAY,IAAIA,iBAChBA,UAAUC,MACbH,EAAcI,cACdJ,EAAcK,IACdC,gQARoBC,kBAAgBC,gEAajCC,8CAiEA,wDAIHC,EAAQ,CAIVC,QAAS,CACPC,KAAMC,OACNC,MAAO,GACPC,oBAAoB,GAKtBC,IAAK,CACHJ,KAAMC,OACNC,MAAO,GACPC,oBAAoB,uCAItBL,EAAQO,OAAOC,OAAOR,8BAEjBA,0CAIA,CAAC,uEA8CD,CACLS,UAAU,EACVC,aAAa,EACbC,eAAe,EACfC,MAAO,CACLC,MAAO,eACPC,YAAa,2DACbC,KAAM,wBACNC,MAAO,OACPC,OAAQ,CAAC,QAAS,SAClBC,QAAS,CACP,CACEhB,KAAM,QACNI,IAAK,WAGTa,KAAM,CACJC,OAAQ,gCAGZC,SAAU,CACRC,MAAO,CACL,CACEC,SAAU,QACVV,MAAO,QACPC,YAAa,2BACbU,YAAa,YACbT,KAAM,iBAGVU,UAAW,CACT,CACEF,SAAU,QACVV,MAAO,QACPC,YAAa,2BACbU,YAAa,YACbT,KAAM,iBAGVW,SAAU,6CAlFLpB,MACLA,GACeV,KAAK+B,aAAarB,SAE1B,gBAGJ,uCAKIA,MACgB,GAAvBA,EAAIsB,QAAQ,QAAc,OAAO,MACjCC,EAAMC,SAASC,KACjBC,EAAOF,SAASG,SAChBC,EAAOL,EAAIM,UAAU,EAAGN,EAAID,QAAQI,WACV,GAArB1B,EAAIsB,QAAQM,0CAENjC,QACRmC,aAAa,6CAAwCnC,uFAIpDoC,EAAazC,KAAK0C,EAAED,WACpBE,EAAgB3C,KAAK0C,EAAEC,cAC7BC,OAAOC,iBAAiB,SAAU,SAAAC,OAC1BC,GAAsC,GAAlBH,OAAOI,QAC3BC,EAA6C,IAApBF,EAC/BN,EAAWS,MAAMC,oCAA+BJ,QAChDJ,EAAcO,MAAME,mCAA8BH,6DAIpDL,OAAOS,oBAAoB,SAAU,SAAAP,OAC7BC,GAAsC,GAAlBH,OAAOI,QAC3BC,EAA6C,IAApBF,EAC/BN,WAAWS,MAAMC,oCAA+BJ,QAChDJ,cAAcO,MAAME,mCAA8BH,4GAiDxDL,OAAOU,eAAeC,OAAO7D,EAAcK,IAAKL"}