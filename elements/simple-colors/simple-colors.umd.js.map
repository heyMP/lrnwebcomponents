{"version":3,"file":"simple-colors.umd.js","sources":["lib/simple-colors-styles.js","simple-colors.umd.js"],"sourcesContent":["/**\n * Copyright 2018 The Pennsylvania State University\n * @license Apache-2.0, see License.md for full text.\n *\n * `simple-colors-styles`\n * `a shared set of styles for simple-colors`\n *\n * @microcopy - language worth noting:\n *  -\n *\n * @customElement\n * @polymer\n * @demo demo/index.html\n */\nimport { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\n\nwindow.SimpleColorsStyles = {};\nwindow.SimpleColorsStyles.instance = null;\nwindow.SimpleColorsStyles.colors = {\n  grey: [\n    \"#ffffff\",\n    \"#eeeeee\",\n    \"#dddddd\",\n    \"#cccccc\",\n    \"#bbbbbb\",\n    \"#999999\",\n    \"#666666\",\n    \"#444444\",\n    \"#333333\",\n    \"#222222\",\n    \"#111111\",\n    \"#000000\"\n  ],\n  red: [\n    \"#ffdddd\",\n    \"#ffaeae\",\n    \"#ff8f8f\",\n    \"#ff7474\",\n    \"#fd5151\",\n    \"#ff2222\",\n    \"#ee0000\",\n    \"#ac0000\",\n    \"#850000\",\n    \"#670000\",\n    \"#520000\",\n    \"#3f0000\"\n  ],\n  pink: [\n    \"#ffe6f1\",\n    \"#ffa5cf\",\n    \"#ff87c0\",\n    \"#ff73b5\",\n    \"#fd60aa\",\n    \"#ff3996\",\n    \"#da004e\",\n    \"#b80042\",\n    \"#980036\",\n    \"#78002b\",\n    \"#5a0020\",\n    \"#440019\"\n  ],\n  purple: [\n    \"#fce6ff\",\n    \"#f4affd\",\n    \"#f394ff\",\n    \"#f07cff\",\n    \"#ed61ff\",\n    \"#e200ff\",\n    \"#a500ba\",\n    \"#8a009b\",\n    \"#6c0079\",\n    \"#490052\",\n    \"#33003a\",\n    \"#200025\"\n  ],\n  \"deep-purple\": [\n    \"#f3e4ff\",\n    \"#ddacff\",\n    \"#c97eff\",\n    \"#bb63f9\",\n    \"#b44aff\",\n    \"#a931ff\",\n    \"#7e00d8\",\n    \"#5d009f\",\n    \"#4c0081\",\n    \"#3a0063\",\n    \"#2a0049\",\n    \"#1d0033\"\n  ],\n  indigo: [\n    \"#e5ddff\",\n    \"#c3b2ff\",\n    \"#af97ff\",\n    \"#9e82ff\",\n    \"#9373ff\",\n    \"#835fff\",\n    \"#3a00ff\",\n    \"#2801b0\",\n    \"#20008c\",\n    \"#160063\",\n    \"#100049\",\n    \"#0a0030\"\n  ],\n  blue: [\n    \"#e2ecff\",\n    \"#acc9ff\",\n    \"#95baff\",\n    \"#74a5ff\",\n    \"#5892fd\",\n    \"#4083ff\",\n    \"#0059ff\",\n    \"#0041bb\",\n    \"#003494\",\n    \"#002569\",\n    \"#001947\",\n    \"#001333\"\n  ],\n  \"light-blue\": [\n    \"#ddefff\",\n    \"#a1d1ff\",\n    \"#92c9ff\",\n    \"#65b3ff\",\n    \"#58adff\",\n    \"#41a1ff\",\n    \"#007ffc\",\n    \"#0066ca\",\n    \"#0055a8\",\n    \"#003f7d\",\n    \"#002850\",\n    \"#001b36\"\n  ],\n  cyan: [\n    \"#ddf8ff\",\n    \"#9beaff\",\n    \"#77e2ff\",\n    \"#33d4ff\",\n    \"#1ccfff\",\n    \"#00c9ff\",\n    \"#009dc7\",\n    \"#007999\",\n    \"#005970\",\n    \"#003f50\",\n    \"#002c38\",\n    \"#001a20\"\n  ],\n  teal: [\n    \"#d9fff0\",\n    \"#98ffd7\",\n    \"#79ffcb\",\n    \"#56ffbd\",\n    \"#29ffac\",\n    \"#00ff9c\",\n    \"#009d75\",\n    \"#007658\",\n    \"#004e3a\",\n    \"#003829\",\n    \"#002a20\",\n    \"#001b14\"\n  ],\n  green: [\n    \"#e1ffeb\",\n    \"#acffc9\",\n    \"#79ffa7\",\n    \"#49ff88\",\n    \"#24ff70\",\n    \"#00f961\",\n    \"#008c37\",\n    \"#00762e\",\n    \"#005a23\",\n    \"#003d18\",\n    \"#002a11\",\n    \"#001d0c\"\n  ],\n  \"light-green\": [\n    \"#ebffdb\",\n    \"#c7ff9b\",\n    \"#b1ff75\",\n    \"#a1fd5a\",\n    \"#8efd38\",\n    \"#6fff00\",\n    \"#429d00\",\n    \"#357f00\",\n    \"#296100\",\n    \"#1b3f00\",\n    \"#143000\",\n    \"#0d2000\"\n  ],\n  lime: [\n    \"#f1ffd2\",\n    \"#dfff9b\",\n    \"#d4ff77\",\n    \"#caff58\",\n    \"#bdff2d\",\n    \"#aeff00\",\n    \"#649900\",\n    \"#4d7600\",\n    \"#3b5a00\",\n    \"#293f00\",\n    \"#223400\",\n    \"#182400\"\n  ],\n  yellow: [\n    \"#ffffd5\",\n    \"#ffffac\",\n    \"#ffff90\",\n    \"#ffff7c\",\n    \"#ffff3a\",\n    \"#f6f600\",\n    \"#929100\",\n    \"#787700\",\n    \"#585700\",\n    \"#454400\",\n    \"#303000\",\n    \"#242400\"\n  ],\n  amber: [\n    \"#fff2d4\",\n    \"#ffdf92\",\n    \"#ffd677\",\n    \"#ffcf5e\",\n    \"#ffc235\",\n    \"#ffc500\",\n    \"#b28900\",\n    \"#876800\",\n    \"#614b00\",\n    \"#413200\",\n    \"#302500\",\n    \"#221a00\"\n  ],\n  orange: [\n    \"#ffebd7\",\n    \"#ffca92\",\n    \"#ffbd75\",\n    \"#ffb05c\",\n    \"#ff9e36\",\n    \"#ff9625\",\n    \"#e56a00\",\n    \"#ae5100\",\n    \"#833d00\",\n    \"#612d00\",\n    \"#3d1c00\",\n    \"#2c1400\"\n  ],\n  \"deep-orange\": [\n    \"#ffe7e0\",\n    \"#ffb299\",\n    \"#ffa588\",\n    \"#ff8a64\",\n    \"#ff7649\",\n    \"#ff6c3c\",\n    \"#f53100\",\n    \"#b92500\",\n    \"#8a1c00\",\n    \"#561100\",\n    \"#3a0c00\",\n    \"#240700\"\n  ],\n  brown: [\n    \"#f0e2de\",\n    \"#e5b8aa\",\n    \"#c59485\",\n    \"#b68373\",\n    \"#ac7868\",\n    \"#a47060\",\n    \"#85574a\",\n    \"#724539\",\n    \"#5b3328\",\n    \"#3b1e15\",\n    \"#2c140e\",\n    \"#200e09\"\n  ],\n  \"blue-grey\": [\n    \"#e7eff1\",\n    \"#b1c5ce\",\n    \"#9badb6\",\n    \"#8d9fa7\",\n    \"#7a8f98\",\n    \"#718892\",\n    \"#56707c\",\n    \"#40535b\",\n    \"#2f3e45\",\n    \"#1e282c\",\n    \"#182023\",\n    \"#0f1518\"\n  ]\n};\nclass SimpleColorsStyles extends PolymerElement {\n  // properties available to the custom element for data binding\n  static get properties() {\n    return {\n      /**\n       * The colors object.\n       * Each color contains an array of shades as hex codes from lightest to darkest.\n       */\n      colors: {\n        type: Object,\n        value: window.SimpleColorsStyles.colors\n      },\n      /**\n       * Object with information on which color combinations are WCAG 2.0AA compliant, eg: ```\n        {\n          greyColor: {          //if either the color or its contrast will be a grey\n            aaLarge: [          //if bold text >= 14pt, text >= 18pt, decorative only, or disabled\n              {                 //for the first shade of a color\n                min: 7,         //index of the lightest contrasting shade of another color\n                max: 12         //index of the darkest contrasting shade of another color\n              },\n              ...\n            ],\n            aa: [ ... ]         //if bold text < 14pt, or text < 18pt\n          },\n          colorColor: { ... }   //if neither the color nor its contrast are grey\n        }```\n      */\n      contrasts: {\n        type: Object,\n        value: {\n          greyColor: {\n            aaLarge: [\n              { min: 7, max: 12 },\n              { min: 7, max: 12 },\n              { min: 7, max: 12 },\n              { min: 7, max: 12 },\n              { min: 8, max: 12 },\n              { min: 10, max: 12 },\n              { min: 1, max: 3 },\n              { min: 1, max: 5 },\n              { min: 1, max: 6 },\n              { min: 1, max: 6 },\n              { min: 1, max: 6 },\n              { min: 1, max: 6 }\n            ],\n            aa: [\n              //if bold text < 14pt, or text < 18pt\n              { min: 7, max: 12 },\n              { min: 7, max: 12 },\n              { min: 7, max: 12 },\n              { min: 8, max: 12 },\n              { min: 8, max: 12 },\n              { min: 11, max: 12 },\n              { min: 1, max: 2 },\n              { min: 1, max: 7 },\n              { min: 1, max: 7 },\n              { min: 1, max: 6 },\n              { min: 1, max: 6 },\n              { min: 1, max: 6 }\n            ]\n          },\n          colorColor: {\n            //if neither the color nor its contrast are grey\n            aaLarge: [\n              { min: 7, max: 12 },\n              { min: 7, max: 12 },\n              { min: 8, max: 12 },\n              { min: 9, max: 12 },\n              { min: 10, max: 12 },\n              { min: 11, max: 12 },\n              { min: 1, max: 2 },\n              { min: 1, max: 3 },\n              { min: 1, max: 4 },\n              { min: 1, max: 5 },\n              { min: 1, max: 6 },\n              { min: 1, max: 6 }\n            ],\n            aa: [\n              { min: 8, max: 12 },\n              { min: 8, max: 12 },\n              { min: 9, max: 12 },\n              { min: 9, max: 12 },\n              { min: 11, max: 12 },\n              { min: 12, max: 12 },\n              { min: 1, max: 1 },\n              { min: 1, max: 2 },\n              { min: 1, max: 4 },\n              { min: 1, max: 4 },\n              { min: 1, max: 5 },\n              { min: 1, max: 5 }\n            ]\n          }\n        }\n      }\n    };\n  }\n\n  /**\n   * Store the tag name to make it easier to obtain directly.\n   * @notice function name must be here for tooling to operate correctly\n   */\n  static get tag() {\n    return \"simple-colors-styles\";\n  }\n\n  /**\n   * life cycle, element is afixed to the DOM\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    /**\n     * append and register the shared styles\n     */\n    let style = document.createElement(\"style\");\n    document.head.appendChild(style);\n    this.__sheet = style.sheet;\n    this.addCssVariables();\n    this.addAccentVariables();\n  }\n\n  /**\n   * life cycle, element is disconnected\n   */\n  disconnectedCallback() {\n    super.disconnectedCallback();\n  }\n\n  /**\n   * gets the color information of a given CSS variable or class\n   *\n   * @param {string} the CSS variable (eg. `--simple-colors-fixed-theme-red-3`)\n   * @param {object} an object that includes the theme, color, and shade information\n   */\n  getColorInfo(colorName) {\n    let temp1 = colorName\n        .replace(/(simple-colors-)?(-text)?(-border)?/g, \"\")\n        .split(\"-theme-\"),\n      theme = temp1.length > 0 ? temp1[0] : \"default\",\n      temp2 = temp1.length > 0 ? temp1[1].split(\"-\") : temp1[0].split(\"-\"),\n      color =\n        temp2.length > 1 ? temp2.slice(1, temp2.length - 1).join(\"-\") : \"grey\",\n      shade = temp2.length > 1 ? temp2[temp2.length - 1] : \"1\";\n    return {\n      theme: theme,\n      color: color,\n      shade: shade\n    };\n  }\n  /**\n   * for large or small text given a color and its shade,\n   * lists all the shades of another color that would be\n   * WCAG 2.0 AA-compliant for contrast\n   *\n   * @param {boolean} large text? >= 18pt || (bold && >= 14pt)\n   * @param {string} color name, e.g. \"deep-purple\"\n   * @param {string} color shade, e.g. 3\n   * @param {string} contrasting color name, e.g. \"grey\"\n   * @param {array} all of the WCAG 2.0 AA-compliant shades of the contrasting color\n   */\n  getContrastingShades(isLarge, colorName, colorShade, contrastName) {\n    let hasGrey =\n        colorName === \"grey\" || contrastName === \"grey\"\n          ? \"greyColor\"\n          : \"colorColor\",\n      aa = isLarge ? \"aaLarge\" : \"aa\",\n      index = parseInt(colorShade) + 1,\n      range = this.contrasts[hasGrey][aa][index];\n    return Array(range.max - range.min + 1)\n      .fill()\n      .map((_, idx) => range.min + idx);\n  }\n\n  /**\n   * for large or small text given a color and its shade,\n   * lists all the colors and shades that would be\n   * WCAG 2.0 AA-compliant for contrast\n   *\n   * @param {boolean} large text? >= 18pt || (bold && >= 14pt)\n   * @param {string} color name, e.g. \"deep-purple\"\n   * @param {string} color shade, e.g. 3\n   * @param {object} all of the WCAG 2.0 AA-compliant colors and shades\n   */\n  getContrastingColors(colorName, colorShade, isLarge) {\n    let result = {};\n    Object.keys(this.colors).forEach(color => {\n      result[color] = this.getContrastingShades(\n        isLarge,\n        colorName,\n        colorShade,\n        color\n      );\n    });\n    return result.color;\n  }\n  /**\n   * determines if two shades are WCAG 2.0 AA-compliant for contrast\n   *\n   * @param {boolean} large text? >= 18pt || (bold && >= 14pt)\n   * @param {string} color name, e.g. \"deep-purple\"\n   * @param {string} color shade, e.g. 3\n   * @param {string} contrasting color name, e.g. \"grey\"\n   * @param {string} contrast shade, e.g. 12\n   * @param {boolean} whether or not the contrasting shade is WCAG 2.0 AA-compliant\n   */\n  isContrastCompliant(\n    isLarge,\n    colorName,\n    colorShade,\n    contrastName,\n    contrastShade\n  ) {\n    let hasGrey =\n        colorName === \"grey\" || contrastName === \"grey\"\n          ? \"greyColor\"\n          : \"colorColor\",\n      aa = isLarge ? \"aaLarge\" : \"aa\",\n      index = parseInt(colorShade) + 1,\n      range = this.contrasts[hasGrey][aa][index];\n    return contrastShade >= range.min && ontrastShade >= range.max;\n  }\n\n  /**\n   * gets the current shade based on the index\n   *\n   * @param {string} the index\n   * @param {number} the shade\n   */\n  indexToShade(index) {\n    return parseInt(index) + 1;\n  }\n\n  /**\n   * gets the current shade based on the index\n   *\n   * @param {string} the shade\n   * @param {number} the index\n   */\n  shadeToIndex(shade) {\n    return parseInt(shade) - 1;\n  }\n\n  /**\n   * gets the current shade\n   *\n   * @param {string} the shade\n   * @param {number} the inverted shade\n   */\n\n  invertShade(shade) {\n    return this.colors[\"grey\"].length + 1 - parseInt(shade);\n  }\n\n  /**\n   * inverts the current index\n   *\n   * @param {string} the index\n   * @param {number} the inverted index\n   */\n  invertIndex(index) {\n    return this.colors[\"grey\"].length - 1 - parseInt(index);\n  }\n\n  /**\n   * returns the maximum contrast to the index\n   *\n   * @param {string} the index\n   * @param {number} the index with maximum contrast\n   */\n  maxContrastIndex(index) {\n    return parseInt(index) < this.colors[\"grey\"].length / 2\n      ? this.colors[\"grey\"].length - 1\n      : 0;\n  }\n\n  /**\n   * returns the maximum contrast to the shade\n   *\n   * @param {string} the shade\n   * @param {number} the shade with maximum contrast\n   */\n  maxContrastShade(shade) {\n    return parseInt(shade) < this.colors[\"grey\"].length / 2 + 1\n      ? this.colors[\"grey\"].length\n      : 1;\n  }\n\n  /**\n   * returns a variable based on color name, shade, and fixed theme\n   *\n   * @param {string} the color name\n   * @param {number} the color shade\n   * @param {boolean} the color shade\n   * @returns {string} the CSS Variable\n   */\n  makeVariable(color = \"grey\", shade = 1, theme = \"default\") {\n    return [\"--simple-colors\", theme, \"theme\", color, shade].join(\"-\");\n  }\n\n  /**\n   * gets the correct hexCode for a color shade,\n   * depending on whether or not the list is dark (inverted)\n   */\n  getHex(hexcodes, index, dark) {\n    if (dark) {\n      return hexcodes[this.invertIndex(this.colors, index)];\n    } else {\n      return hexcodes[index];\n    }\n  }\n  /**\n   * adds all CSS variables for a given theme (default, dark, or light)\n   */\n  addThemeVariables(theme, dark) {\n    let str = [];\n    for (var name in this.colors) {\n      str.push(this.addColorShades(theme, name, this.colors[name], dark));\n    }\n    return str.join(\"\");\n  }\n  /**\n   * adds CSS variables for all shades of contrast for a given theme+color\n   * and assigns a hex code to it\n   *\n   * @returns {string}\n   */\n  addColorShades(theme, color, hexcodes, dark) {\n    let str = [];\n    for (let i = 0; i < hexcodes.length; i++) {\n      let cssvar = this.makeVariable(color, i + 1, theme),\n        hex = dark ? hexcodes[this.invertIndex(i)] : hexcodes[i];\n      str.push(cssvar + \":\" + hex + \"; \");\n    }\n    return str.join(\"\");\n  }\n  /**\n   * adds all CSS variables as styles for :host and :host([dark]) selectors\n   *\n   * @returns {string}\n   */\n  addCssVariables() {\n    let greys = this.colors[\"grey\"];\n    this.__sheet.insertRule(\n      this.makeRule(\n        \"html\",\n        this.addColorShades(\"default\", \"accent\", greys, false) +\n          this.addThemeVariables(\"default\", false)\n      ),\n      this.__sheet.cssRules.length\n    );\n    this.__sheet.insertRule(\n      this.makeRule(\n        \"html\",\n        this.addColorShades(\"fixed\", \"accent\", greys, false) +\n          this.addThemeVariables(\"fixed\", false)\n      ),\n      this.__sheet.cssRules.length\n    );\n    this.__sheet.insertRule(\n      this.makeRule(\n        \"[dark]\",\n        this.addColorShades(\"default\", \"accent\", greys, true) +\n          this.addThemeVariables(\"default\", true)\n      ),\n      this.__sheet.cssRules.length\n    );\n  }\n  /**\n   * adds all CSS accent color variables as styles for :host([accent-color]]) selectors\n   *\n   * @returns {object}\n   */\n  addAccentVariables() {\n    for (let color in this.colors) {\n      this.__sheet.insertRule(\n        this.makeRule(\n          '[accent-color=\"' + color + '\"]',\n          [\n            this.addColorShades(\"default\", \"accent\", this.colors[color], false),\n            this.addColorShades(\"fixed\", \"accent\", this.colors[color], false)\n          ].join(\"\")\n        ),\n        this.__sheet.cssRules.length\n      );\n\n      this.__sheet.insertRule(\n        this.makeRule(\n          '[dark][accent-color=\"' + color + '\"]',\n          [\n            this.addColorShades(\"default\", \"accent\", this.colors[color], true)\n          ].join(\"\")\n        ),\n        this.__sheet.cssRules.length\n      );\n    }\n  }\n  makeRule(selector, style) {\n    return selector + \" {\\n\" + style + \"\\n}\\n\";\n  }\n}\nwindow.customElements.define(SimpleColorsStyles.tag, SimpleColorsStyles);\nexport { SimpleColorsStyles };\n\n/**\n * Checks to see if there is an instance available, and if not appends one\n */\nwindow.SimpleColorsStyles.requestAvailability = function() {\n  if (window.SimpleColorsStyles.instance == null) {\n    window.SimpleColorsStyles.instance = document.createElement(\n      \"simple-colors-styles\"\n    );\n  }\n  document.body.appendChild(window.SimpleColorsStyles.instance);\n  return window.SimpleColorsStyles.instance;\n};\n","/**\n * Copyright 2018 The Pennsylvania State University\n * @license Apache-2.0, see License.md for full text.\n */\nimport { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport \"./lib/simple-colors-styles.js\";\n/**\n * `simple-colors`\n * `a shared set of styles for @lrnwebcomponents`\n *\n * @microcopy - language worth noting:\n *  -\n *\n * @customElement\n * @polymer\n * @demo demo/index.html demo\n * @demo demo/how.html getting started\n * @demo demo/colors.html all of the colors\n * @demo demo/picker.html simple-colors-picker\n * @demo demo/extending.html extending simple-colors\n */\nclass SimpleColors extends PolymerElement {\n  // render function\n  static get template() {\n    return html`\n      <style></style>\n      <slot></slot>\n    `;\n  }\n\n  // properties available to the custom element for data binding\n  static get properties() {\n    return {\n      /**\n       * a selected accent-color: grey, red, pink, purple, etc.\n       */\n      accentColor: {\n        name: \"accentColor\",\n        type: \"String\",\n        value: \"grey\",\n        reflectToAttribute: true,\n        notify: true\n      },\n      /**\n       * make the default theme dark?\n       */\n      dark: {\n        name: \"dark\",\n        type: \"Boolean\",\n        value: false,\n        reflectToAttribute: true,\n        notify: true\n      },\n      /**\n       * make the default theme dark?\n       */\n      colors: {\n        name: \"colors\",\n        type: \"Object\",\n        value: window.SimpleColorsStyles.colors,\n        notify: true\n      }\n    };\n  }\n\n  static get tag() {\n    return \"simple-colors\";\n  }\n  /**\n   * life cycle, element is afixed to the DOM\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    this.__utils = window.SimpleColorsStyles.requestAvailability();\n  }\n\n  /**\n   * life cycle, element is ready\n   */\n  ready() {\n    super.ready();\n  }\n\n  /**\n   * returns the maximum contrast to the shade\n   *\n   * @param {string} the shade\n   * @param {number} the shade with maximum contrast\n   */\n  maxContrastShade(shade) {\n    return this.__utils.maxContrastShade(shade);\n  }\n\n  /**\n   * gets the current shade\n   *\n   * @param {string} the shade\n   * @param {number} the inverted shade\n   */\n  invertShade(shade) {\n    return this.__utils.invertShade(shade);\n  }\n\n  /**\n   * gets the color information of a given CSS variable or class\n   *\n   * @param {string} the CSS variable (eg. `--simple-colors-fixed-theme-red-3`) or a class (eg. `.simple-colors-fixed-theme-red-3-text`)\n   * @param {object} an object that includes the theme, color, and shade information\n   */\n  getColorInfo(colorName) {\n    return this.__utils.getColorInfo(colorName);\n  }\n\n  /**\n   * returns a variable based on color name, shade, and fixed theme\n   *\n   * @param {string} the color name\n   * @param {number} the color shade\n   * @param {boolean} the color shade\n   * @returns {string} the CSS Variable\n   */\n  makeVariable(color = \"grey\", shade = 1, theme = \"default\") {\n    return this.__utils.makeVariable(\n      (color = \"grey\"),\n      (shade = 1),\n      (theme = \"default\")\n    );\n  }\n\n  /**\n   * for large or small text given a color and its shade,\n   * lists all the colors and shades that would be\n   * WCAG 2.0 AA-compliant for contrast\n   *\n   * @param {boolean} large text? >= 18pt || (bold && >= 14pt)\n   * @param {string} color name, e.g. \"deep-purple\"\n   * @param {string} color shade, e.g. 3\n   * @param {object} all of the WCAG 2.0 AA-compliant colors and shades\n   */\n  getContrastingColors(colorName, colorShade, isLarge) {\n    return this.__utils.getContrastingColors(colorName, colorShade, isLarge);\n  }\n\n  /**\n   * for large or small text given a color and its shade,\n   * lists all the shades of another color that would be\n   * WCAG 2.0 AA-compliant for contrast\n   *\n   * @param {boolean} large text? >= 18pt || (bold && >= 14pt)\n   * @param {string} color name, e.g. \"deep-purple\"\n   * @param {string} color shade, e.g. 3\n   * @param {string} contrasting color name, e.g. \"grey\"\n   * @param {array} all of the WCAG 2.0 AA-compliant shades of the contrasting color\n   */\n  getContrastingShades(isLarge, colorName, colorShade, contrastName) {\n    return this.__utils.getContrastingShades(\n      isLarge,\n      colorName,\n      colorShade,\n      contrastName\n    );\n  }\n\n  /**\n   * determines if two shades are WCAG 2.0 AA-compliant for contrast\n   *\n   * @param {boolean} large text? >= 18pt || (bold && >= 14pt)\n   * @param {string} color name, e.g. \"deep-purple\"\n   * @param {string} color shade, e.g. 3\n   * @param {string} contrasting color name, e.g. \"grey\"\n   * @param {string} contrast shade, e.g. 12\n   * @param {boolean} whether or not the contrasting shade is WCAG 2.0 AA-compliant\n   */\n  isContrastCompliant(\n    isLarge,\n    colorName,\n    colorShade,\n    contrastName,\n    contrastShade\n  ) {\n    return this.__utils.isContrastCompliant(\n      isLarge,\n      colorName,\n      colorShade,\n      contrastName,\n      contrastShade\n    );\n  }\n}\ncustomElements.define(SimpleColors.tag, SimpleColors);\nexport { SimpleColors };\n"],"names":["window","SimpleColorsStyles","instance","colors","grey","red","pink","purple","indigo","blue","cyan","teal","green","lime","yellow","amber","orange","brown","PolymerElement","style","document","createElement","head","appendChild","__sheet","sheet","addCssVariables","addAccentVariables","colorName","temp1","replace","split","theme","length","temp2","color","slice","join","shade","isLarge","colorShade","contrastName","hasGrey","aa","index","parseInt","range","this","contrasts","Array","max","min","fill","map","_","idx","result","Object","keys","forEach","_this","getContrastingShades","contrastShade","ontrastShade","hexcodes","dark","invertIndex","str","name","push","addColorShades","i","cssvar","makeVariable","hex","greys","insertRule","makeRule","addThemeVariables","cssRules","selector","type","value","greyColor","aaLarge","colorColor","customElements","define","tag","requestAvailability","body","SimpleColors","__utils","maxContrastShade","invertShade","getColorInfo","getContrastingColors","isContrastCompliant","html","accentColor","reflectToAttribute","notify"],"mappings":"2hDAgBAA,OAAOC,mBAAqB,GAC5BD,OAAOC,mBAAmBC,SAAW,KACrCF,OAAOC,mBAAmBE,OAAS,CACjCC,KAAM,CACJ,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEFC,IAAK,CACH,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEFC,KAAM,CACJ,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEFC,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,yBAEa,CACb,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEFC,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEFC,KAAM,CACJ,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,wBAEY,CACZ,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEFC,KAAM,CACJ,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEFC,KAAM,CACJ,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEFC,MAAO,CACL,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,yBAEa,CACb,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEFC,KAAM,CACJ,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEFC,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEFC,MAAO,CACL,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEFC,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,yBAE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"}