{"version":3,"file":"a11y-behaviors.umd.js","sources":["a11y-behaviors.umd.js"],"sourcesContent":["export const A11yBehaviors = function(SuperClass) {\n  return class extends SuperClass {\n    /**\n     * Get a a11y safe text color based on background color\n     * @prop {string} bgColor hexadecimal value for the color\n     * @return {string} hexadecimal value for the color\n     */\n    getTextContrastColor(bgColor) {\n      // verify the value is hex value\n      let color = \"\";\n      // strip hash from string\n      const colorBuffer = bgColor.replace(\"#\", \"\");\n      // convert rrggbb to decimal\n      const rgb = parseInt(colorBuffer, 16);\n      // extract RGB\n      const r = (rgb >> 16) & 0xff;\n      const g = (rgb >> 8) & 0xff;\n      const b = (rgb >> 0) & 0xff;\n      // calculate luma\n      const luma = 0.2126 * r + 0.7152 * g + 0.0722 * b; // per ITU-R BT.709\n      // if the luma is to low switch to white text\n      if (luma < 141) {\n        color = \"#ffffff\";\n      } else {\n        color = \"#000000\";\n      }\n      // Set color and background color vars\n      return color;\n    }\n    /**\n     * Validate and modify the text contrast to ensure the correct contrast\n     */\n    computeTextPropContrast(textprop, bgprop) {\n      // verify the value is hex value\n      if (this[bgprop].includes(\"#\")) {\n        const color = this.getTextContrastColor(this[bgprop]);\n        // Set color and background color vars\n        this.set(textprop, color);\n      }\n    }\n  };\n};\n"],"names":["SuperClass","bgColor","colorBuffer","replace","rgb","parseInt","textprop","bgprop","this","includes","color","getTextContrastColor","set"],"mappings":"+xBAA6B,SAASA,waACfA,sDAMEC,OAIbC,EAAcD,EAAQE,QAAQ,IAAK,IAEnCC,EAAMC,SAASH,EAAa,UAMrB,OAJFE,GAAO,GAAM,KAIE,OAHfA,GAAO,EAAK,KAGgB,OAF5BA,GAAO,EAAK,KAIZ,IACD,UAEA,0DAQYE,EAAUC,MAE5BC,KAAKD,GAAQE,SAAS,KAAM,KACxBC,EAAQF,KAAKG,qBAAqBH,KAAKD,SAExCK,IAAIN,EAAUI"}