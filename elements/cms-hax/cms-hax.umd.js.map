{"version":3,"file":"cms-hax.umd.js","sources":["cms-hax.umd.js"],"sourcesContent":["import { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport { FlattenedNodesObserver } from \"@polymer/polymer/lib/utils/flattened-nodes-observer.js\";\nimport \"@polymer/iron-ajax/iron-ajax.js\";\nimport \"@lrnwebcomponents/h-a-x/h-a-x.js\";\nimport \"@lrnwebcomponents/simple-toast/simple-toast.js\";\n/**\n * `cms-hax`\n * @demo ../../demo/index.html\n */\nclass CmsHax extends PolymerElement {\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: block;\n          font-size: 16px;\n          box-sizing: content-box;\n        }\n      </style>\n      <iron-ajax\n        id=\"pageupdateajax\"\n        url=\"[[endPoint]]\"\n        method=\"[[method]]\"\n        body=\"[[updatePageData]]\"\n        content-type=\"application/json\"\n        handle-as=\"json\"\n        on-response=\"_handleUpdateResponse\"\n      ></iron-ajax>\n      <h-a-x app-store$=\"[[appStoreConnection]]\"></h-a-x>\n    `;\n  }\n\n  static get tag() {\n    return \"cms-hax\";\n  }\n  static get observers() {\n    return [\n      \"_noticeTagChanges(allowedTags, hideExportButton, hidePanelOps, hidePreferencesButton, align, bodyOffsetLeft)\"\n    ];\n  }\n  static get properties() {\n    return {\n      /**\n       * Default the panel to open\n       */\n      openDefault: {\n        type: Boolean,\n        value: false\n      },\n      /**\n       * Hide the export button, showing it is good for developers\n       * or those doing QA testing of new elements.\n       */\n      hideExportButton: {\n        type: Boolean,\n        value: true\n      },\n      /**\n       * Hide the panel operations (save and cancel),\n       */\n      hidePanelOps: {\n        type: Boolean,\n        value: false\n      },\n      /**\n       * Hide preferences button\n       */\n      hidePreferencesButton: {\n        type: Boolean,\n        value: false\n      },\n      /**\n       * Direction to align the hax edit panel\n       */\n      align: {\n        type: String,\n        value: \"right\"\n      },\n      /**\n       * allowed Tags, usually as dictated by the input filtering\n       * layer of the backend system that HAX is riding on.\n       * While not fullproof, this at least will enforce front-end\n       * filtering to match what actually is going to be allowed\n       * to be saved in the first place.\n       */\n      allowedTags: {\n        type: Array\n      },\n      /**\n       * Location to save content to.\n       */\n      endPoint: {\n        type: String\n      },\n      /**\n       * Method to save content.\n       */\n      method: {\n        type: String,\n        value: \"PUT\"\n      },\n      /**\n       * Page data, body of text as a string.\n       */\n      updatePageData: {\n        type: String\n      },\n      /**\n       * Connection object for talking to an app store.\n       */\n      appStoreConnection: {\n        type: Object\n      },\n      /**\n       * Offset from the left of the body field\n       */\n      bodyOffsetLeft: {\n        type: Number,\n        value: -164\n      },\n      /**\n       * State of the panel\n       */\n      editMode: {\n        type: Boolean,\n        reflectToAttribute: true\n      },\n      /**\n       * syncBody\n       */\n      syncBody: {\n        type: Boolean,\n        value: false\n      },\n      /**\n       * Only available if syncBody is true; this allows data binding to the value being worked on in hax-body tag\n       */\n      bodyValue: {\n        type: String,\n        value: \"\"\n      },\n      /**\n       * Flag to hide the toast.\n       */\n      hideMessage: {\n        type: Boolean,\n        value: false\n      },\n      /**\n       * Optional URL to redirect to once we save.\n       */\n      redirectLocation: {\n        type: String\n      },\n      /**\n       * Option to redirect once we save successfully\n       */\n      redirectOnSave: {\n        type: Boolean,\n        computed: \"_computeRedirectOnSave(redirectLocation)\"\n      },\n      /**\n       * Reference to activeBody.\n       */\n      activeHaxBody: {\n        type: Object,\n        observer: \"_activeHaxBodyUpdated\"\n      },\n      __imported: {\n        type: Boolean,\n        value: false\n      }\n    };\n  }\n\n  /**\n   * Ensure we've imported our content on initial setup\n   */\n  _activeHaxBodyUpdated(newValue, oldValue) {\n    // ensure we import our content once we get an initial registration of active body\n    if (newValue != null && !this.__imported) {\n      this.__imported = true;\n      // see what's inside of this, in a template tag\n      let children = this.querySelector(\"template\");\n      // convert this template content into the real thing\n      // this helps with correctly preserving everything on the way down\n      if (children != null) {\n        newValue.importContent(children.innerHTML);\n      }\n    }\n  }\n\n  /**\n   * Calculate if we have anywhere to redirect to.\n   */\n  _computeRedirectOnSave(redirectLocation) {\n    if (typeof redirectLocation !== typeof undefined) {\n      return true;\n    }\n    return false;\n  }\n  /**\n   * Break the shadow root for this element (by design)\n   */\n  _attachDom(dom) {\n    this.appendChild(dom);\n  }\n  /**\n   * Set certain data bound values to the store once it's ready\n   */\n  _noticeTagChanges(\n    allowedTags,\n    hideExportButton,\n    hidePanelOps,\n    hidePreferencesButton,\n    align,\n    bodyOffsetLeft\n  ) {\n    if (window.HaxStore.ready) {\n      // double check because this can cause issues\n      if (allowedTags) {\n        window.HaxStore.instance.validTagList = allowedTags;\n      }\n      window.HaxStore.instance.haxPanel.hideExportButton = hideExportButton;\n      window.HaxStore.instance.haxPanel.hidePanelOps = hidePanelOps;\n      window.HaxStore.instance.haxPanel.hidePreferencesButton = hidePreferencesButton;\n      window.HaxStore.instance.haxPanel.align = align;\n      window.HaxStore.instance.activeHaxBody.contextOffsetLeft = bodyOffsetLeft;\n    }\n  }\n  /**\n   * Set certain data bound values to the store once it's ready\n   */\n  _storeReady(e) {\n    // trigger the update of different parts of the global state\n    this._noticeTagChanges(\n      this.allowedTags,\n      this.hideExportButton,\n      this.hidePanelOps,\n      this.hidePreferencesButton,\n      this.align,\n      this.bodyOffsetLeft\n    );\n  }\n  /**\n   * Created life cycle\n   */\n  constructor() {\n    super();\n    import(\"@lrnwebcomponents/cms-hax/lib/cms-token.js\");\n    import(\"@lrnwebcomponents/cms-hax/lib/cms-block.js\");\n    import(\"@lrnwebcomponents/cms-hax/lib/cms-views.js\");\n    import(\"@lrnwebcomponents/cms-hax/lib/cms-entity.js\");\n    window.addEventListener(\n      \"hax-store-property-updated\",\n      this._haxStorePropertyUpdated.bind(this)\n    );\n    window.addEventListener(\"hax-store-ready\", this._storeReady.bind(this));\n  }\n  /**\n   * detached life cycle\n   */\n  disconnectedCallback() {\n    window.removeEventListener(\"hax-store-ready\", this._storeReady.bind(this));\n    window.removeEventListener(\"hax-save\", this._saveFired.bind(this));\n    super.disconnectedCallback();\n  }\n  /**\n   * Attached to the DOM; now we can fire event to the store that\n   * we exist and are the thing being edited.\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    window.SimpleToast.requestAvailability();\n    this.__lock = false;\n    window.addEventListener(\"hax-save\", this._saveFired.bind(this));\n    // open things by default and set state for edit mode\n    if (this.openDefault) {\n      window.HaxStore.write(\"editMode\", true, this);\n    }\n    // notice ANY change to body and bubble up, only when we are attached though\n    if (this.syncBody) {\n      FlattenedNodesObserver(window.HaxStore.instance.activeHaxBody, info => {\n        if (!this.__lock) {\n          this.__lock = true;\n          this.dispatchEvent(\n            new CustomEvent(\"hax-body-content-changed\", {\n              bubbles: true,\n              cancelable: true,\n              composed: true,\n              detail: window.HaxStore.instance.activeHaxBody.haxToContent()\n            })\n          );\n          setTimeout(() => {\n            this.__lock = false;\n          }, 100);\n        }\n      });\n    }\n  }\n\n  /**\n   * Store updated, sync.\n   */\n  _haxStorePropertyUpdated(e) {\n    if (\n      e.detail &&\n      typeof e.detail.value !== typeof undefined &&\n      e.detail.property\n    ) {\n      if (typeof e.detail.value === \"object\") {\n        this.set(e.detail.property, null);\n      }\n      this.set(e.detail.property, e.detail.value);\n      this.notifyPath(e.detail.property);\n    }\n  }\n\n  /**\n   * _saveFired\n   */\n  _saveFired(e) {\n    // generate sanitized content\n    this.updatePageData = window.HaxStore.instance.activeHaxBody.haxToContent();\n    // send the request\n    this.$.pageupdateajax.generateRequest();\n  }\n\n  /**\n   * _handleUpdateResponse\n   */\n  _handleUpdateResponse(e) {\n    if (!this.hideMessage) {\n      const evt = new CustomEvent(\"simple-toast-show\", {\n        bubbles: true,\n        cancelable: true,\n        detail: {\n          text: \"Saved!\",\n          duration: 3000\n        }\n      });\n      this.dispatchEvent(evt);\n      // support auto redirecting on save if that's been requested\n      // in the integration point\n      if (this.redirectOnSave) {\n        setTimeout(() => {\n          // toggle so state is correct when we go to save\n          window.HaxStore.instance.haxPanel.toggle();\n          // trigger redirect\n          window.location = this.redirectLocation;\n        }, 1000);\n      }\n    }\n  }\n}\nwindow.customElements.define(CmsHax.tag, CmsHax);\nexport { CmsHax };\n"],"names":["CmsHax","window","addEventListener","_this","_haxStorePropertyUpdated","bind","_storeReady","PolymerElement","newValue","oldValue","this","__imported","children","querySelector","importContent","innerHTML","redirectLocation","_typeof","dom","appendChild","allowedTags","hideExportButton","hidePanelOps","hidePreferencesButton","align","bodyOffsetLeft","HaxStore","ready","instance","validTagList","haxPanel","activeHaxBody","contextOffsetLeft","e","_noticeTagChanges","html","openDefault","type","Boolean","value","String","Array","endPoint","method","updatePageData","appStoreConnection","Object","Number","editMode","reflectToAttribute","syncBody","bodyValue","hideMessage","redirectOnSave","computed","observer","removeEventListener","_saveFired","SimpleToast","requestAvailability","__lock","write","FlattenedNodesObserver","info","_this2","dispatchEvent","CustomEvent","bubbles","cancelable","composed","detail","haxToContent","setTimeout","property","set","notifyPath","$","pageupdateajax","generateRequest","evt","text","duration","toggle","location","_this3","customElements","define","tag"],"mappings":"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"}