{"version":3,"file":"lrn-gitgraph.umd.js","sources":["lib/gitgraph.js/src/gitgraph.js","lrn-gitgraph.umd.js"],"sourcesContent":["(function() {\n  \"use strict\";\n\n  /**\n   * GitGraph\n   *\n   * @constructor\n   *\n   * @param {object} [options] - GitGraph options\n   * @param {string} [options.elementId = \"gitGraph\"] - Id of the canvas container\n   * @param {object} [options.element] - Dom node of the canvas element\n   * @param {Template|string|object} [options.template] - Template of the graph\n   * @param {string} [options.author = \"Sergio Flores <saxo-guy@epic.com>\"] - Default author for commits\n   * @param {string} [options.mode = (null|\"compact\")]  - Display mode\n   * @param {HTMLElement} [options.canvas] - DOM canvas (ex: document.getElementById(\"id\"))\n   * @param {string} [options.orientation = (\"vertical-reverse\"|\"horizontal\"|\"horizontal-reverse\")] - Graph orientation\n   * @param {boolean} [options.reverseArrow = false] - Make arrows point to ancestors if true\n   * @param {number} [options.initCommitOffsetX = 0] - Add custom offsetX to initial commit.\n   * @param {number} [options.initCommitOffsetY = 0] - Add custom offsetY to initial commit.\n   * @param {HTMLElement} [options.tooltipContainer = document.body] - HTML Element containing tooltips in compact mode.\n   *\n   * @this GitGraph\n   **/\n  function GitGraph(options) {\n    // Options\n    options = _isObject(options) ? options : {};\n    this.elementId =\n      typeof options.elementId === \"string\" ? options.elementId : \"gitGraph\";\n    this.element = typeof options.element === \"object\" ? options.element : null;\n    this.author =\n      typeof options.author === \"string\"\n        ? options.author\n        : \"Sergio Flores <saxo-guy@epic.com>\";\n    this.reverseArrow = _booleanOptionOr(options.reverseArrow, false);\n\n    // Template management\n    if (typeof options.template === \"string\" || _isObject(options.template)) {\n      this.template = this.newTemplate(options.template);\n    } else if (options.template instanceof Template) {\n      this.template = options.template;\n    } else {\n      this.template = this.newTemplate(\"metro\");\n    }\n\n    this.mode = options.mode || null;\n    if (this.mode === \"compact\") {\n      this.template.commit.message.display = false;\n    }\n\n    // Orientation\n    switch (options.orientation) {\n      case \"vertical-reverse\":\n        this.template.commit.spacingY *= -1;\n        this.orientation = \"vertical-reverse\";\n        this.template.branch.labelRotation = _isNullOrUndefined(\n          options,\n          \"template.branch.labelRotation\"\n        )\n          ? 0\n          : options.template.branch.labelRotation;\n        this.template.commit.tag.spacingY *= -1;\n        break;\n      case \"horizontal\":\n        this.template.commit.message.display = false;\n        this.template.commit.spacingX = this.template.commit.spacingY;\n        this.template.branch.spacingY = this.template.branch.spacingX;\n        this.template.commit.spacingY = 0;\n        this.template.branch.spacingX = 0;\n        this.orientation = \"horizontal\";\n        this.template.branch.labelRotation = _isNullOrUndefined(\n          options,\n          \"template.branch.labelRotation\"\n        )\n          ? -90\n          : options.template.branch.labelRotation;\n        this.template.commit.tag.spacingX = -this.template.commit.spacingX;\n        this.template.commit.tag.spacingY = this.template.branch.spacingY;\n        break;\n      case \"horizontal-reverse\":\n        this.template.commit.message.display = false;\n        this.template.commit.spacingX = -this.template.commit.spacingY;\n        this.template.branch.spacingY = this.template.branch.spacingX;\n        this.template.commit.spacingY = 0;\n        this.template.branch.spacingX = 0;\n        this.orientation = \"horizontal-reverse\";\n        this.template.branch.labelRotation = _isNullOrUndefined(\n          options,\n          \"template.branch.labelRotation\"\n        )\n          ? 90\n          : options.template.branch.labelRotation;\n        this.template.commit.tag.spacingX = -this.template.commit.spacingY;\n        this.template.commit.tag.spacingY = this.template.branch.spacingY;\n        break;\n      default:\n        this.orientation = \"vertical\";\n        this.template.branch.labelRotation = _isNullOrUndefined(\n          options,\n          \"template.branch.labelRotation\"\n        )\n          ? 0\n          : options.template.branch.labelRotation;\n        break;\n    }\n\n    this.marginX =\n      this.template.branch.spacingX + this.template.commit.dot.size * 2;\n    this.marginY =\n      this.template.branch.spacingY + this.template.commit.dot.size * 2;\n    this.offsetX = 0;\n    this.offsetY = 0;\n\n    // Canvas init\n    this.canvas = this.element\n      ? this.element\n      : document.getElementById(this.elementId) || options.canvas;\n    this.context = this.canvas.getContext(\"2d\");\n    this.context.textBaseline = \"center\";\n\n    // Tooltip layer\n    this.tooltip = document.createElement(\"div\");\n    this.tooltip.className = \"gitgraph-tooltip\";\n    this.tooltip.style.position = \"fixed\";\n    this.tooltip.style.display = \"none\";\n    var tooltipContainer = options.tooltipContainer || document.body;\n    tooltipContainer.appendChild(this.tooltip);\n\n    // Navigation vars\n    this.HEAD = null;\n    this.branches = [];\n    this.commits = [];\n\n    // Utilities\n    this.columnMax = 0; // nb of column for message position\n    this.commitOffsetX = options.initCommitOffsetX || 0;\n    this.commitOffsetY = options.initCommitOffsetY || 0;\n\n    // Bindings\n    this.mouseMoveOptions = {\n      handleEvent: this.hover,\n      gitgraph: this\n    };\n    this.canvas.addEventListener(\"mousemove\", this.mouseMoveOptions, false);\n\n    this.mouseDownOptions = {\n      handleEvent: this.click,\n      gitgraph: this\n    };\n    this.canvas.addEventListener(\"mousedown\", this.mouseDownOptions, false);\n\n    // Render on window resize\n    window.onresize = this.render.bind(this);\n  }\n\n  /**\n   * Disposing canvas event handlers\n   *\n   * @this GitGraph\n   **/\n  GitGraph.prototype.dispose = function() {\n    this.canvas.removeEventListener(\"mousemove\", this.mouseMoveOptions, false);\n    this.canvas.removeEventListener(\"mousedown\", this.mouseDownOptions, false);\n  };\n\n  /**\n   * Create new branch\n   *\n   * @param {(string|object)} options - Branch name | Options of Branch\n   *\n   * @see Branch\n   * @this GitGraph\n   *\n   * @return {Branch} New branch\n   **/\n  GitGraph.prototype.branch = function(options) {\n    // Options\n    if (typeof options === \"string\") {\n      var name = options;\n      options = {};\n      options.name = name;\n    }\n\n    options = _isObject(options) ? options : {};\n    options.parent = this;\n    options.parentBranch = options.parentBranch || this.HEAD;\n\n    // Add branch\n    var branch = new Branch(options);\n    this.branches.push(branch);\n\n    // Return\n    return branch;\n  };\n\n  /**\n   * Create new orphan branch\n   *\n   * @param {(string|object)} options - Branch name | Options of Branch\n   *\n   * @see Branch\n   * @this GitGraph\n   *\n   * @return {Branch} New branch\n   **/\n  GitGraph.prototype.orphanBranch = function(options) {\n    // Options\n    if (typeof options === \"string\") {\n      var name = options;\n      options = {};\n      options.name = name;\n    }\n\n    options = _isObject(options) ? options : {};\n    options.parent = this;\n\n    // Add branch\n    var branch = new Branch(options);\n    this.branches.push(branch);\n\n    // Return\n    return branch;\n  };\n\n  /**\n   * Commit on HEAD\n   *\n   * @param {(string|BranchCommitOptions)} options - Message | Options of commit\n   *\n   * @see Commit\n   * @this GitGraph\n   *\n   * @return {GitGraph} this - Return the main object so we can chain\n   **/\n  GitGraph.prototype.commit = function(options) {\n    this.HEAD.commit(options);\n\n    // Return the main object so we can chain\n    return this;\n  };\n\n  /**\n   * Tag the HEAD\n   *\n   * @param {object} options - Options of tag\n   *\n   * @see Tag\n   * @this GitGraph\n   *\n   * @return {GitGraph} this - Return the main object so we can chain\n   **/\n  GitGraph.prototype.tag = function(options) {\n    this.HEAD.tag(options);\n\n    // Return the main object so we can chain\n    return this;\n  };\n\n  /**\n   * Create a new template\n   *\n   * @param {(string|object)} options - The template name, or the template options\n   *\n   * @see Template\n   * @this GitGraph\n   *\n   * @return {Template}\n   **/\n  GitGraph.prototype.newTemplate = function(options) {\n    if (typeof options === \"string\") {\n      return new Template().get(options);\n    }\n    return new Template(options);\n  };\n\n  /**\n   * Render the canvas\n   *\n   * @this GitGraph\n   **/\n  GitGraph.prototype.render = function() {\n    this.scalingFactor = _getScale(this.context);\n\n    // Resize canvas\n    var unscaledResolution = {\n      x:\n        Math.abs((this.columnMax + 1) * this.template.branch.spacingX) +\n        Math.abs(this.commitOffsetX) +\n        this.marginX * 2,\n      y:\n        Math.abs((this.columnMax + 1) * this.template.branch.spacingY) +\n        Math.abs(this.commitOffsetY) +\n        this.marginY * 2\n    };\n\n    if (this.template.commit.message.display) {\n      unscaledResolution.x += 800;\n    }\n\n    unscaledResolution.x += this.template.commit.widthExtension;\n\n    this.canvas.style.width = unscaledResolution.x + \"px\";\n    this.canvas.style.height = unscaledResolution.y + \"px\";\n\n    this.canvas.width = unscaledResolution.x * this.scalingFactor;\n    this.canvas.height = unscaledResolution.y * this.scalingFactor;\n\n    // Clear All\n    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n    // Add some margin\n    this.context.translate(this.marginX, this.marginY);\n\n    // Translate for inverse orientation\n    if (this.template.commit.spacingY > 0) {\n      this.context.translate(0, this.canvas.height - this.marginY * 2);\n      this.offsetY = this.canvas.height - this.marginY * 2;\n    }\n    if (this.template.commit.spacingX > 0) {\n      this.context.translate(this.canvas.width - this.marginX * 2, 0);\n      this.offsetX = this.canvas.width - this.marginX * 2;\n    }\n\n    // Scale the context when every transformations have been made.\n    this.context.scale(this.scalingFactor, this.scalingFactor);\n\n    // Render branches\n    for (\n      var i = this.branches.length - 1, branch;\n      !!(branch = this.branches[i]);\n      i--\n    ) {\n      branch.render();\n    }\n\n    // Render commits after to put them on the foreground\n    for (var j = 0, commit; !!(commit = this.commits[j]); j++) {\n      commit.render();\n    }\n\n    _emitEvent(this.canvas, \"graph:render\", {\n      id: this.elementId\n    });\n  };\n\n  /**\n   * A callback for each commit\n   *\n   * @callback CommitCallback\n   * @param {Commit} commit - A commit\n   * @param {boolean} mouseOver - True, if the mouse is currently hovering over the commit\n   * @param {Event} event - The DOM event (e.g. a click event)\n   */\n\n  /**\n   * A formatter for commit\n   *\n   * @callback CommitFormatter\n   * @param {Commit} commit - The commit to format\n   */\n\n  /**\n   * Hover event on commit dot\n   *\n   * @param {MouseEvent} event - Mouse event\n   * @param {CommitCallback} callbackFn - A callback function that will be called for each commit\n   *\n   * @this GitGraph\n   **/\n  GitGraph.prototype.applyCommits = function(event, callbackFn) {\n    // Fallback onto layerX/layerY for older versions of Firefox.\n    function getOffsetById(id) {\n      var el = document.getElementById(id);\n      var rect = el.getBoundingClientRect();\n\n      return {\n        top: rect.top + document.body.scrollTop,\n        left: rect.left + document.body.scrollLeft\n      };\n    }\n\n    var offsetX =\n      event.offsetX || event.pageX - getOffsetById(this.elementId).left;\n    var offsetY =\n      event.offsetY || event.pageY - getOffsetById(this.elementId).top;\n\n    for (var i = 0, commit; !!(commit = this.commits[i]); i++) {\n      var distanceX =\n        commit.x + (this.offsetX + this.marginX) / this.scalingFactor - offsetX;\n      var distanceY =\n        commit.y + (this.offsetY + this.marginY) / this.scalingFactor - offsetY;\n      var distanceBetweenCommitCenterAndMouse = Math.sqrt(\n        Math.pow(distanceX, 2) + Math.pow(distanceY, 2)\n      );\n      var isOverCommit =\n        distanceBetweenCommitCenterAndMouse < this.template.commit.dot.size;\n\n      callbackFn(commit, isOverCommit, event);\n    }\n  };\n\n  /**\n   * Hover event on commit dot\n   *\n   * @param {MouseEvent} event - Mouse event\n   *\n   * @this GitGraph\n   **/\n  GitGraph.prototype.hover = function(event) {\n    var self = this.gitgraph;\n    var isOut = true;\n\n    function showCommitTooltip(commit) {\n      if (!commit.tooltipDisplay) {\n        return;\n      }\n\n      self.tooltip.style.left = event.clientX + \"px\"; // TODO Scroll bug\n      self.tooltip.style.top = event.clientY + \"px\"; // TODO Scroll bug\n      if (self.template.commit.tooltipHTMLFormatter !== null) {\n        self.tooltip.innerHTML = self.template.commit.tooltipHTMLFormatter(\n          commit\n        );\n      } else {\n        self.tooltip.textContent = commit.sha1 + \" - \" + commit.message;\n      }\n      self.tooltip.style.display = \"block\";\n    }\n\n    function emitCommitEvent(commit, event) {\n      var mouseEventOptions = {\n        author: commit.author,\n        message: commit.message,\n        date: commit.date,\n        sha1: commit.sha1\n      };\n\n      _emitEvent(self.canvas, \"commit:\" + event, mouseEventOptions);\n    }\n\n    self.applyCommits(event, function(commit, isOverCommit, event) {\n      if (isOverCommit) {\n        if (\n          !self.template.commit.message.display &&\n          self.template.commit.shouldDisplayTooltipsInCompactMode\n        ) {\n          showCommitTooltip(commit);\n        }\n\n        // Don't emit event if we already were over a commit.\n        if (!commit.isMouseOver) {\n          emitCommitEvent(commit, \"mouseover\");\n        }\n\n        isOut = false;\n        commit.isMouseOver = true;\n      } else {\n        // Don't emit event if we already were out of a commit.\n        if (commit.isMouseOver) {\n          emitCommitEvent(commit, \"mouseout\");\n        }\n        commit.isMouseOver = false;\n      }\n    });\n\n    if (isOut) {\n      self.tooltip.style.display = \"none\";\n    }\n  };\n\n  /**\n   * Click event on commit dot\n   *\n   * @param {MouseEvent} event - Mouse event\n   *\n   * @this GitGraph\n   **/\n  GitGraph.prototype.click = function(event) {\n    this.gitgraph.applyCommits(event, function(commit, isOverCommit, event) {\n      if (!isOverCommit) {\n        return;\n      }\n\n      if (commit.onClick !== null) {\n        commit.onClick(commit, true, event);\n      }\n    });\n  };\n\n  // --------------------------------------------------------------------\n  // -----------------------      Branch         ------------------------\n  // --------------------------------------------------------------------\n\n  /**\n   * Branch\n   *\n   * @constructor\n   *\n   * @param {object} options - Options of branch\n   * @param {GitGraph} options.parent - GitGraph constructor\n   * @param {Branch} [options.parentBranch = options.parentCommit.branch] - Parent branch\n   * @param {Commit} [options.parentCommit = _getLast(options.parentBranch.commits)] - Parent commit\n   * @param {string} [options.name = \"no-name\"] - Branch name\n   * @param {number[]} [options.lineDash = this.template.branch.lineDash] - Branch line dash segments\n   * @param {object} [options.commitDefaultOptions = {}] - Default options for commits\n   *\n   * @this Branch\n   **/\n  function Branch(options) {\n    // Check integrity\n    if (options.parent instanceof GitGraph === false) {\n      return;\n    }\n\n    // Options\n    options = _isObject(options) ? options : {};\n    this.parent = options.parent;\n    if (options.parentCommit && options.parentBranch) {\n      if (options.parentCommit.branch !== options.parentBranch) {\n        return;\n      }\n      this.parentCommit = options.parentCommit;\n      this.parentBranch = options.parentBranch;\n    } else if (options.parentCommit) {\n      this.parentCommit = options.parentCommit;\n      this.parentBranch = options.parentCommit.branch;\n    } else if (options.parentBranch) {\n      this.parentCommit = _getParentCommitFromBranch(options.parentBranch);\n      this.parentBranch = options.parentBranch;\n    } else {\n      this.parentCommit = null;\n      this.parentBranch = null;\n    }\n    this.name = typeof options.name === \"string\" ? options.name : \"no-name\";\n    this.commitDefaultOptions = _isObject(options.commitDefaultOptions)\n      ? options.commitDefaultOptions\n      : {};\n    this.context = this.parent.context;\n    this.template = this.parent.template;\n    this.lineWidth = options.lineWidth || this.template.branch.lineWidth;\n    this.lineDash = options.lineDash || this.template.branch.lineDash;\n    this.showLabel = _booleanOptionOr(\n      options.showLabel,\n      this.template.branch.showLabel\n    );\n    this.spacingX = this.template.branch.spacingX;\n    this.spacingY = this.template.branch.spacingY;\n    this.size = 0;\n    this.height = 0;\n    this.width = 0;\n    this.commits = [];\n    this.path = []; // Path to draw, this is an array of points {x, y, type(\"start\"|\"joint\"|\"end\")}\n\n    // Column number calculation for auto-color & auto-offset\n    if (typeof options.column === \"number\") {\n      this.column = options.column;\n    } else {\n      this.column = 0;\n      this.calculColumn();\n    }\n\n    this.parent.columnMax =\n      this.column > this.parent.columnMax ? this.column : this.parent.columnMax;\n\n    // Options with auto value\n    this.offsetX = this.column * this.spacingX;\n    this.offsetY = this.column * this.spacingY;\n\n    // Add start point\n    if (this.parentBranch && this.parentCommit) {\n      if (\n        this.parentCommit === _getParentCommitFromBranch(this.parentBranch) &&\n        this.commits.length > 0\n      ) {\n        this.startPoint = {\n          x:\n            this.parentBranch.offsetX -\n            this.parent.commitOffsetX +\n            this.template.commit.spacingX,\n          y:\n            this.parentBranch.offsetY -\n            this.parent.commitOffsetY +\n            this.template.commit.spacingY,\n          type: \"start\"\n        };\n      } else {\n        this.startPoint = {\n          x: this.parentCommit.x,\n          y: this.parentCommit.y,\n          type: \"start\"\n        };\n      }\n    } else {\n      this.startPoint = null;\n    }\n\n    var columnIndex = this.column % this.template.colors.length;\n    this.color =\n      options.color ||\n      this.template.branch.color ||\n      this.template.colors[columnIndex];\n\n    // Checkout on this new branch\n    this.checkout();\n  }\n\n  /**\n   * Create new branch\n   *\n   * @param {(string|object)} options - Branch name | Options of Branch\n   *\n   * @see Branch\n   * @this Branch\n   *\n   * @return {Branch} New Branch\n   **/\n  Branch.prototype.branch = function(options) {\n    // Options\n    if (typeof options === \"string\") {\n      var name = options;\n      options = {};\n      options.name = name;\n    }\n\n    options = _isObject(options) ? options : {};\n    options.parent = this.parent;\n    options.parentBranch = options.parentBranch || this;\n\n    // Add branch\n    var branch = new Branch(options);\n    this.parent.branches.push(branch);\n\n    // Return\n    return branch;\n  };\n\n  /**\n   * Render the branch\n   *\n   * @this Branch\n   **/\n  Branch.prototype.render = function() {\n    this.context.beginPath();\n\n    for (var i = 0, point; !!(point = this.path[i]); i++) {\n      if (point.type === \"start\") {\n        this.context.moveTo(point.x, point.y);\n      } else {\n        if (this.template.branch.mergeStyle === \"bezier\") {\n          var path = this.path[i - 1];\n\n          this.context.bezierCurveTo(\n            path.x - this.template.commit.spacingX / 2,\n            path.y - this.template.commit.spacingY / 2,\n            point.x + this.template.commit.spacingX / 2,\n            point.y + this.template.commit.spacingY / 2,\n            point.x,\n            point.y\n          );\n        } else {\n          this.context.lineTo(point.x, point.y);\n        }\n      }\n    }\n\n    this.context.lineWidth = this.lineWidth;\n    this.context.strokeStyle = this.color;\n\n    if (typeof this.context.setLineDash === \"function\") {\n      this.context.setLineDash(this.lineDash);\n    }\n\n    this.context.stroke();\n    this.context.closePath();\n  };\n\n  /**\n   * Branch commit options\n   *\n   * @typedef {object} BranchCommitOptions\n   *\n   * @property {string} [color] - Master color (dot & message)\n   * @property {string} [author = this.parent.author] - Author name & email\n   * @property {string} [date] - Date of commit, default is now\n   * @property {string} [detail] - DOM Element of detail part\n   * @property {string} [sha1] - Sha1, default is a random short sha1\n   * @property {Commit} [parentCommit] - Parent commit\n   * @property {string} [type = (\"mergeCommit\"|null)] - Type of commit\n   *\n   * @property {string} [tag] - Tag of the commit\n   * @property {string} [tagColor = color] - Color of the tag\n   * @property {string} [tagFont = this.template.commit.tag.font] - Font of the tag\n   * @property {string} [displayTagBox = true] - If true, display a box around the tag\n   *\n   * @property {string} [dotColor = color] - Specific dot color\n   * @property {number} [dotSize = this.template.commit.dot.size] - Dot size\n   * @property {number} [dotStrokeWidth = this.template.commit.dot.strokeWidth] - Dot stroke width\n   * @property {string} [dotStrokeColor = this.template.commit.dot.strokeColor]\n   *\n   * @property {string} [message = \"He doesn't like George Michael! Boooo!\"] - Commit message\n   * @property {string} [messageColor = color] - Specific message color\n   * @property {string} [messageFont = this.template.commit.message.font] - Font of the message\n   * @property {boolean} [messageDisplay = this.template.commit.message.display] - Commit message display policy\n   * @property {boolean} [messageAuthorDisplay = this.template.commit.message.displayAuthor] - Commit message author policy\n   * @property {boolean} [messageBranchDisplay = this.template.commit.message.displayBranch] - Commit message author policy\n   * @property {boolean} [messageHashDisplay = this.template.commit.message.displayHash] - Commit message hash policy\n   *\n   * @property {string} [labelColor = color] - Specific label color\n   * @property {string} [labelFont = this.template.branch.labelFont] - Font used for labels\n   *\n   * @property {boolean} [tooltipDisplay = true] - Tooltip message display policy\n   * @property {CommitCallback} [onClick] - OnClick event for the commit dot\n   * @property {object} [representedObject] - Any object which is related to this commit. Can be used in onClick or the formatter. Useful to bind the commit to external objects such as database id etc.\n   **/\n  /**\n   * Add a commit\n   *\n   * @param {(string|BranchCommitOptions)} [options] - Message | Options of commit\n   * @param {string} [options.detailId] - Id of detail DOM Element\n   *\n   * @see Commit\n   *\n   * @this Branch\n   **/\n  Branch.prototype.commit = function(options) {\n    if (typeof options === \"string\") {\n      options = {\n        message: options\n      };\n    } else if (typeof options !== \"object\") {\n      options = {};\n    }\n\n    options.arrowDisplay = this.template.arrow.active;\n    options.branch = this;\n    var columnIndex = this.column % this.template.colors.length;\n    options.color =\n      options.color ||\n      this.commitDefaultOptions.color ||\n      this.template.commit.color ||\n      this.template.colors[columnIndex];\n    options.parent = this.parent;\n    options.parentCommit =\n      options.parentCommit || _getParentCommitFromBranch(this);\n\n    // Special compact mode\n    if (\n      this.parent.mode === \"compact\" &&\n      _getLast(this.parent.commits) &&\n      _getLast(this.parent.commits).branch !== options.branch &&\n      options.branch.commits.length &&\n      options.type !== \"mergeCommit\"\n    ) {\n      this.parent.commitOffsetX -= this.template.commit.spacingX;\n      this.parent.commitOffsetY -= this.template.commit.spacingY;\n    }\n\n    options.messageColor =\n      options.messageColor ||\n      this.commitDefaultOptions.messageColor ||\n      this.template.commit.message.color ||\n      options.color ||\n      null;\n    options.labelColor =\n      options.labelColor ||\n      this.commitDefaultOptions.labelColor ||\n      this.template.branch.labelColor ||\n      options.color ||\n      null;\n    options.tagColor =\n      options.tagColor ||\n      this.commitDefaultOptions.tagColor ||\n      this.template.commit.tag.color ||\n      options.color ||\n      null;\n    options.dotColor =\n      options.dotColor ||\n      this.commitDefaultOptions.dotColor ||\n      this.template.commit.dot.color ||\n      options.color ||\n      null;\n    options.x = this.offsetX - this.parent.commitOffsetX;\n    options.y = this.offsetY - this.parent.commitOffsetY;\n\n    // Detail\n    var isCompact = this.parent.mode === \"compact\";\n    if (typeof options.detailId === \"string\" && !isCompact) {\n      options.detail = document.getElementById(options.detailId);\n    } else {\n      options.detail = null;\n    }\n\n    // Check collision (Cause of special compact mode)\n    var previousCommit = _getLast(options.branch.commits) || {};\n    var commitPosition = options.x + options.y;\n    var previousCommitPosition = previousCommit.x + previousCommit.y;\n    var isCommitAtSamePlaceThanPreviousOne =\n      commitPosition === previousCommitPosition;\n\n    if (isCommitAtSamePlaceThanPreviousOne) {\n      this.parent.commitOffsetX += this.template.commit.spacingX;\n      this.parent.commitOffsetY += this.template.commit.spacingY;\n      options.x = this.offsetX - this.parent.commitOffsetX;\n      options.y = this.offsetY - this.parent.commitOffsetY;\n    }\n\n    // Fork case: Parent commit from parent branch\n    if (\n      options.parentCommit instanceof Commit === false &&\n      this.parentBranch instanceof Branch\n    ) {\n      options.parentCommit = this.parentCommit;\n    }\n\n    // First commit\n    var isFirstBranch = !(options.parentCommit instanceof Commit);\n    var isPathBeginning = this.path.length === 0;\n\n    options.showLabel = isPathBeginning && this.showLabel;\n    if (options.showLabel) {\n      options.x -= this.template.commit.spacingX;\n      options.y -= this.template.commit.spacingY;\n    }\n\n    var commit = new Commit(options);\n    this.commits.push(commit);\n\n    // Add point(s) to path\n    var point = {\n      x: commit.x,\n      y: commit.y,\n      type: \"joint\"\n    };\n\n    if (!isFirstBranch && isPathBeginning) {\n      this.pushPath(this.startPoint);\n      // Add a path joint to startpoint + template spacing\n      // So that line will not go through commit of other branches\n      if (_isVertical(this.parent)) {\n        this.pushPath({\n          x: commit.x,\n          y: this.startPoint.y - this.template.commit.spacingY,\n          type: \"joint\"\n        });\n      } else {\n        this.pushPath({\n          x: this.startPoint.x - this.template.commit.spacingX,\n          y: commit.y,\n          type: \"joint\"\n        });\n      }\n    } else if (isPathBeginning) {\n      point.type = \"start\";\n    }\n\n    this.pushPath(point);\n\n    // Increment commitOffset for next commit position\n    this.parent.commitOffsetX +=\n      this.template.commit.spacingX * (options.showLabel ? 2 : 1);\n    this.parent.commitOffsetY +=\n      this.template.commit.spacingY * (options.showLabel ? 2 : 1);\n\n    // Add height of detail div (vertical mode only)\n    if (commit.detail !== null && _isVertical(this.parent)) {\n      commit.detail.style.display = \"block\";\n\n      if (this.parent.orientation === \"vertical-reverse\") {\n        this.parent.commitOffsetY += commit.detail.clientHeight;\n      } else {\n        this.parent.commitOffsetY -= commit.detail.clientHeight;\n      }\n    }\n\n    // Auto-render\n    this.parent.render();\n\n    // Return the main object so we can chain\n    return this;\n  };\n\n  /**\n   * Tag the last commit of the branch.\n   *\n   * @param {(string|object)} [options] - Message | Options of the tag\n   * @param {string} [options.tag] - Message of the tag\n   * @param {string} [options.tagColor] - Color of the tag\n   * @param {string} [options.tagFont] - Font of the tag\n   * @param {boolean} [options.displayTagBox] - If true, display a box around the tag\n   *\n   * @see Tag\n   *\n   * @this Branch\n   * */\n  Branch.prototype.tag = function(options) {\n    if (typeof options === \"string\") {\n      options = {\n        tag: options\n      };\n    }\n\n    options = _isObject(options) ? options : {};\n\n    var lastCommit = _getLast(this.commits);\n    if (_isObject(lastCommit)) {\n      _assignTagOptionsToCommit(lastCommit, options);\n      this.parent.render();\n    }\n\n    // Return the main object so we can chain\n    return this;\n  };\n\n  /**\n   * Checkout onto this branch\n   *\n   * @this Branch\n   **/\n  Branch.prototype.checkout = function() {\n    this.parent.HEAD = this;\n  };\n\n  /**\n   * Delete this branch\n   *\n   * @this Branch\n   **/\n  Branch.prototype.delete = function() {\n    this.isDeleted = true;\n  };\n\n  /**\n   * Merge branch\n   *\n   * @param {Branch} [target = this.parent.HEAD]\n   * @param {(string|object)} [commitOptions] - Message | Options of commit\n   * @param {boolean} [commitOptions.fastForward = false] - If true, merge should use fast-forward if possible\n   *\n   * @see Commit\n   * @this Branch\n   *\n   * @return {Branch} this\n   **/\n  Branch.prototype.merge = function(target, commitOptions) {\n    // Merge target\n    var targetBranch = target || this.parent.HEAD;\n\n    // Check integrity of target\n    if (targetBranch instanceof Branch === false || targetBranch === this) {\n      return this;\n    }\n\n    var firstBranchCommit = this.commits[0];\n    if (!firstBranchCommit) {\n      console.log(\n        this.name + \" is already up-to-date with \" + targetBranch.name\n      );\n      return this;\n    }\n\n    // Merge commit\n    var defaultMessage =\n      \"Merge branch `\" + this.name + \"` into `\" + targetBranch.name + \"`\";\n    if (typeof commitOptions !== \"object\") {\n      var message = commitOptions;\n      commitOptions = {};\n      commitOptions.message =\n        typeof message === \"string\" ? message : defaultMessage;\n    } else {\n      commitOptions.message = commitOptions.message || defaultMessage;\n    }\n    commitOptions.type = \"mergeCommit\";\n    commitOptions.parentCommit = _getParentCommitFromBranch(this);\n\n    var branchParentCommit = firstBranchCommit.parentCommit;\n    var targetBranchParentCommit = _getParentCommitFromBranch(targetBranch);\n    var isFastForwardPossible =\n      branchParentCommit &&\n      branchParentCommit.sha1 === targetBranchParentCommit.sha1;\n    if (commitOptions.fastForward && isFastForwardPossible) {\n      var isGraphHorizontal = _isHorizontal(this.parent);\n      this.color = targetBranch.color;\n\n      // Make branch path follow target branch ones\n      if (isGraphHorizontal) {\n        var targetBranchY = targetBranch.path[1].y;\n        this.path.forEach(function(point) {\n          point.y = targetBranchY;\n        });\n      } else {\n        var targetBranchX = targetBranch.path[1].x;\n        this.path.forEach(function(point) {\n          point.x = targetBranchX;\n        });\n      }\n\n      this.commits.forEach(function(commit) {\n        if (isGraphHorizontal) {\n          commit.y = branchParentCommit.y;\n        } else {\n          commit.x = branchParentCommit.x;\n        }\n\n        commit.labelColor = branchParentCommit.labelColor;\n        commit.messageColor = branchParentCommit.messageColor;\n        commit.dotColor = branchParentCommit.dotColor;\n        commit.dotStrokeColor = branchParentCommit.dotStrokeColor;\n      });\n    } else {\n      targetBranch.commit(commitOptions);\n\n      // Add points to path\n      var targetCommit = _getLast(targetBranch.commits);\n      var endOfBranch = {\n        x:\n          this.offsetX +\n          this.template.commit.spacingX * (targetCommit.showLabel ? 3 : 2) -\n          this.parent.commitOffsetX,\n        y:\n          this.offsetY +\n          this.template.commit.spacingY * (targetCommit.showLabel ? 3 : 2) -\n          this.parent.commitOffsetY,\n        type: \"joint\"\n      };\n      this.pushPath(_clone(endOfBranch));\n\n      var mergeCommit = {\n        x: targetCommit.x,\n        y: targetCommit.y,\n        type: \"end\"\n      };\n      this.pushPath(mergeCommit);\n\n      endOfBranch.type = \"start\";\n      this.pushPath(endOfBranch); // End of branch for future commits\n    }\n\n    // Auto-render\n    this.parent.render();\n\n    // Checkout on target\n    this.parent.HEAD = targetBranch;\n\n    // Return the main object so we can chain\n    return this;\n  };\n\n  /**\n   * Calcul column\n   *\n   * @this Branch\n   **/\n  Branch.prototype.calculColumn = function() {\n    var candidates = [];\n    for (var i = 0, branch; !!(branch = this.parent.branches[i]); i++) {\n      if (!branch.isDeleted) {\n        if (!(branch.column in candidates)) {\n          candidates[branch.column] = 0;\n        }\n        candidates[branch.column]++;\n      }\n    }\n\n    this.column = 0;\n    for (; ; this.column++) {\n      if (!(this.column in candidates) || candidates[this.column] === 0) {\n        break;\n      }\n    }\n  };\n\n  /**\n   * Push a new point to path.\n   * This method will combine duplicate points and reject reversed points.\n   *\n   * @this Branch\n   */\n  Branch.prototype.pushPath = function(point) {\n    var lastPoint = _getLast(this.path);\n    if (!lastPoint) {\n      this.path.push(point);\n    } else if (lastPoint.x === point.x && lastPoint.y === point.y) {\n      if (lastPoint.type !== \"start\" && point.type === \"end\") {\n        lastPoint.type = \"end\";\n      } else if (point.type === \"joint\") {\n      } else {\n        this.path.push(point);\n      }\n    } else {\n      if (point.type === \"joint\") {\n        if ((point.x - lastPoint.x) * this.template.commit.spacingX < 0) {\n          this.path.push(point);\n        } else if (\n          (point.y - lastPoint.y) * this.template.commit.spacingY <\n          0\n        ) {\n          this.path.push(point);\n        }\n      } else {\n        this.path.push(point);\n      }\n    }\n  };\n\n  // --------------------------------------------------------------------\n  // -----------------------      Commit         ------------------------\n  // --------------------------------------------------------------------\n\n  /**\n   * Commit\n   *\n   * @constructor\n   *\n   * @param {object} options - Commit options\n   * @param {GitGraph} options.parent - GitGraph constructor\n   * @param {number} options.x - Position X (dot)\n   * @param {number} options.y - Position Y (dot)\n   * @param {string} options.color - Master color (dot & message)\n   * @param {boolean} options.arrowDisplay - Add a arrow under commit dot\n   * @param {string} [options.author = this.parent.author] - Author name & email\n   * @param {string} [options.date] - Date of commit, default is now\n   * @param {string} [options.detail] - DOM Element of detail part\n   * @param {string} [options.sha1] - Sha1, default is a random short sha1\n   * @param {Commit} [options.parentCommit] - Parent commit\n   * @param {string} [options.type = (\"mergeCommit\"|null)] - Type of commit\n   *\n   * @param {string} [options.tag] - Tag of the commit\n   * @param {string} [options.tagColor = options.color] - Color of the tag\n   * @param {string} [options.tagFont = this.template.commit.tag.font] - Font of the tag\n   * @param {string} [options.displayTagBox = true] - If true, display a box around the tag\n   *\n   * @param {string} [options.dotColor = options.color] - Specific dot color\n   * @param {number} [options.dotSize = this.template.commit.dot.size] - Dot size\n   * @param {number} [options.dotStrokeWidth = this.template.commit.dot.strokeWidth] - Dot stroke width\n   * @param {string} [options.dotStrokeColor = this.template.commit.dot.strokeColor]\n   * @param {number[]} [options.lineDash = this.template.commit.dot.lineDash]\n   *\n   * @param {string} [options.message = \"He doesn't like George Michael! Boooo!\"] - Commit message\n   * @param {string} [options.messageColor = options.color] - Specific message color\n   * @param {string} [options.messageFont = this.template.commit.message.font] - Font of the message\n   * @param {boolean} [options.messageDisplay = this.template.commit.message.display] - Commit message display policy\n   * @param {boolean} [options.messageAuthorDisplay = this.template.commit.message.displayAuthor] - Commit message author policy\n   * @param {boolean} [options.messageBranchDisplay = this.template.commit.message.displayBranch] - Commit message author policy\n   * @param {boolean} [options.messageHashDisplay = this.template.commit.message.displayHash] - Commit message hash policy\n   *\n   * @param {string} [options.labelColor = options.color] - Specific label color\n   * @param {string} [options.labelFont = this.template.branch.labelFont] - Font used for labels\n   *\n   * @param {boolean} [options.tooltipDisplay = true] - Tooltip message display policy\n   * @param {CommitCallback} [options.onClick] - OnClick event for the commit dot\n   * @param {object} [options.representedObject] - Any object which is related to this commit. Can be used in onClick or the formatter. Useful to bind the commit to external objects such as database id etc.\n   *\n   * @this Commit\n   **/\n  function Commit(options) {\n    // Check integrity\n    if (options.parent instanceof GitGraph === false) {\n      return;\n    }\n\n    // Options\n    options = _isObject(options) ? options : {};\n    this.parent = options.parent;\n    this.template = this.parent.template;\n    this.context = this.parent.context;\n    this.branch = options.branch;\n    this.author = options.author || this.parent.author;\n    this.date = options.date || new Date().toUTCString();\n    this.detail = options.detail || null;\n    this.sha1 =\n      options.sha1 ||\n      Math.random(100)\n        .toString(16)\n        .substring(3, 10);\n    this.message = options.message || \"He doesn't like George Michael! Boooo!\";\n    this.arrowDisplay = options.arrowDisplay;\n    this.messageDisplay = _booleanOptionOr(\n      options.messageDisplay,\n      this.template.commit.message.display\n    );\n    this.messageAuthorDisplay = _booleanOptionOr(\n      options.messageAuthorDisplay,\n      this.template.commit.message.displayAuthor\n    );\n    this.messageBranchDisplay = _booleanOptionOr(\n      options.messageBranchDisplay,\n      this.template.commit.message.displayBranch\n    );\n    this.messageHashDisplay = _booleanOptionOr(\n      options.messageHashDisplay,\n      this.template.commit.message.displayHash\n    );\n    this.messageColor = options.messageColor || options.color;\n    this.messageFont = options.messageFont || this.template.commit.message.font;\n    this.dotColor = options.dotColor || options.color;\n    this.dotSize = options.dotSize || this.template.commit.dot.size;\n    this.dotStrokeWidth =\n      options.dotStrokeWidth || this.template.commit.dot.strokeWidth;\n    this.dotStrokeColor =\n      options.dotStrokeColor ||\n      this.template.commit.dot.strokeColor ||\n      options.color;\n    this.lineDash = options.lineDash || this.template.commit.dot.lineDash;\n    this.type = options.type || null;\n    this.tooltipDisplay = _booleanOptionOr(options.tooltipDisplay, true);\n    this.onClick = options.onClick || null;\n    this.representedObject = options.representedObject || null;\n    this.parentCommit = options.parentCommit;\n    this.x = options.x;\n    this.y = options.y;\n    this.showLabel = options.showLabel;\n    this.labelColor = options.labelColor || options.color;\n    this.labelFont = options.labelFont || this.template.branch.labelFont;\n    _assignTagOptionsToCommit(this, options);\n\n    this.parent.commits.push(this);\n  }\n\n  /**\n   * Render the commit\n   *\n   * @this Commit\n   **/\n  Commit.prototype.render = function() {\n    var commitOffsetForTags = this.template.commit.tag.spacingX;\n    var commitOffsetLeft =\n      (this.parent.columnMax + 1) * this.template.branch.spacingX +\n      commitOffsetForTags;\n\n    // Label\n    if (this.showLabel) {\n      /*\n       * For cases where we want a 0 or 180 degree label rotation in horizontal mode,\n       * we need to modify the position of the label to sit centrally above the commit dot.\n       */\n      if (\n        _isHorizontal(this.parent) &&\n        this.template.branch.labelRotation % 180 === 0\n      ) {\n        /*\n         * Take into account the dot size and the height of the label\n         * (calculated from the font size) to arrive at the Y position.\n         */\n        var yNegativeMargin =\n          this.y - this.dotSize - _getFontHeight(this.labelFont);\n        _drawTextBG(\n          this.context,\n          this.x,\n          yNegativeMargin,\n          this.branch.name,\n          this.labelColor,\n          this.labelFont,\n          this.template.branch.labelRotation,\n          true\n        );\n      } else {\n        _drawTextBG(\n          this.context,\n          this.x + this.template.commit.spacingX,\n          this.y + this.template.commit.spacingY,\n          this.branch.name,\n          this.labelColor,\n          this.labelFont,\n          this.template.branch.labelRotation,\n          true\n        );\n      }\n    }\n\n    // Dot\n    this.context.beginPath();\n    this.context.arc(this.x, this.y, this.dotSize, 0, 2 * Math.PI, false);\n    this.context.fillStyle = this.dotColor;\n    this.context.strokeStyle = this.dotStrokeColor;\n    this.context.lineWidth = this.dotStrokeWidth;\n\n    if (typeof this.context.setLineDash === \"function\") {\n      this.context.setLineDash(this.lineDash);\n    }\n\n    if (typeof this.dotStrokeWidth === \"number\") {\n      this.context.stroke();\n    }\n\n    this.context.fill();\n    this.context.closePath();\n\n    // Arrow\n    if (this.arrowDisplay && this.parentCommit instanceof Commit) {\n      this.arrow();\n    }\n\n    // Tag\n    if (this.tag !== null) {\n      var tag = new Tag(this, {\n        color: this.tagColor,\n        font: this.tagFont\n      });\n\n      commitOffsetLeft += tag.width - commitOffsetForTags;\n    }\n\n    // Detail\n    var DETAIL_OFFSET_LEFT_IN_PX = 60;\n    var DETAIL_OFFSET_TOP_IN_PX = 30;\n\n    if (this.detail !== null && _isVertical(this.parent)) {\n      this.detail.style.left =\n        this.parent.canvas.offsetLeft +\n        commitOffsetLeft +\n        DETAIL_OFFSET_LEFT_IN_PX +\n        \"px\";\n\n      var detailPositionTop = this.parent.canvas.offsetTop + this.y;\n      if (this.parent.orientation === \"vertical-reverse\") {\n        var clientHeight =\n          this.parent.canvas.clientHeight - this.detail.clientHeight;\n        this.detail.style.top =\n          detailPositionTop + clientHeight - DETAIL_OFFSET_TOP_IN_PX + \"px\";\n      } else {\n        this.detail.style.top =\n          detailPositionTop + DETAIL_OFFSET_TOP_IN_PX + \"px\";\n      }\n    }\n\n    // Message\n    if (this.messageDisplay) {\n      var message = this.message;\n      if (this.messageHashDisplay) {\n        message = this.sha1 + \" \" + message;\n      }\n      if (this.messageAuthorDisplay) {\n        message = message + (this.author ? \" - \" + this.author : \"\");\n      }\n      if (this.messageBranchDisplay) {\n        message =\n          (this.branch.name ? \"[\" + this.branch.name + \"] \" : \"\") + message;\n      }\n\n      this.context.font = this.messageFont;\n      this.context.fillStyle = this.messageColor;\n      this.context.fillText(\n        message,\n        commitOffsetLeft,\n        this.y + this.dotSize / 2\n      );\n    }\n  };\n\n  /**\n   * Render a arrow before commit\n   *\n   * @this Commit\n   **/\n  Commit.prototype.arrow = function Arrow() {\n    // Options\n    var size = this.template.arrow.size;\n    var color = this.template.arrow.color || this.branch.color;\n    var isReversed = this.parent.reverseArrow;\n\n    function rotate(y, x) {\n      var direction = isReversed ? -1 : 1;\n      return Math.atan2(direction * y, direction * x);\n    }\n\n    // Angles calculation\n    var alpha = rotate(\n      this.parentCommit.y - this.y,\n      this.parentCommit.x - this.x\n    );\n\n    // Merge & Fork case\n    var isForkCommit = this === this.branch.commits[0];\n    if (this.type === \"mergeCommit\" || isForkCommit) {\n      var deltaColumn = this.parentCommit.branch.column - this.branch.column;\n      var commitSpaceDelta = this.showLabel ? 2 : 1;\n\n      var alphaX =\n        this.template.branch.spacingX * deltaColumn +\n        this.template.commit.spacingX * commitSpaceDelta;\n      var isPushedInY =\n        (isForkCommit || isReversed) &&\n        Math.abs(this.y - this.parentCommit.y) >\n          Math.abs(this.template.commit.spacingY);\n      var isOnSameXThanParent = this.x === this.parentCommit.x;\n      if (_isVertical(this.parent) && (isPushedInY || isOnSameXThanParent)) {\n        alphaX = 0;\n      }\n\n      var alphaY =\n        this.template.branch.spacingY * deltaColumn +\n        this.template.commit.spacingY * commitSpaceDelta;\n      var isPushedInX =\n        (isForkCommit || isReversed) &&\n        Math.abs(this.x - this.parentCommit.x) >\n          Math.abs(this.template.commit.spacingX);\n      var isOnSameYThanParent = this.y === this.parentCommit.y;\n      if (_isHorizontal(this.parent) && (isPushedInX || isOnSameYThanParent)) {\n        alphaY = 0;\n      }\n\n      alpha = rotate(alphaY, alphaX);\n      color = this.parentCommit.branch.color;\n    }\n\n    var delta = Math.PI / 7; // Delta between left & right (radian)\n\n    var arrowX = isReversed ? this.parentCommit.x : this.x;\n    var arrowY = isReversed ? this.parentCommit.y : this.y;\n\n    // Top\n    var h = this.template.commit.dot.size + this.template.arrow.offset;\n    var x1 = h * Math.cos(alpha) + arrowX;\n    var y1 = h * Math.sin(alpha) + arrowY;\n\n    // Bottom left\n    var x2 = (h + size) * Math.cos(alpha - delta) + arrowX;\n    var y2 = (h + size) * Math.sin(alpha - delta) + arrowY;\n\n    // Bottom center\n    var x3 = (h + size / 2) * Math.cos(alpha) + arrowX;\n    var y3 = (h + size / 2) * Math.sin(alpha) + arrowY;\n\n    // Bottom right\n    var x4 = (h + size) * Math.cos(alpha + delta) + arrowX;\n    var y4 = (h + size) * Math.sin(alpha + delta) + arrowY;\n\n    this.context.beginPath();\n    this.context.fillStyle = color;\n    this.context.moveTo(x1, y1); // Top\n    this.context.lineTo(x2, y2); // Bottom left\n    this.context.quadraticCurveTo(x3, y3, x4, y4); // Bottom center\n    this.context.lineTo(x4, y4); // Bottom right\n    this.context.fill();\n  };\n\n  // --------------------------------------------------------------------\n  // -----------------------      Tag         ------------------------\n  // --------------------------------------------------------------------\n\n  /**\n   * Tag\n   *\n   * @constructor\n   *\n   * @param {Commit} commit - Tagged commit\n   * @param {object} [options] - Tag options\n   * @param {string} [options.color = commit.color] - Specific tag color\n   * @param {string} [options.font = commit.template.commit.tag.font] - Font of the tag\n   * @return {Tag}\n   *\n   * @this Tag\n   * */\n  function Tag(commit, options) {\n    if (!_isObject(commit)) {\n      throw new Error(\"You can't tag a commit that doesn't exist\");\n    }\n\n    options = _isObject(options) ? options : {};\n    this.color = options.color || commit.color;\n    this.font = options.font || commit.template.commit.tag.font;\n\n    // Set context font for calculations\n    var originalFont = commit.context.font;\n    commit.context.font = this.font;\n\n    var textWidth = commit.context.measureText(commit.tag).width;\n    this.width = Math.max(commit.template.commit.tag.spacingX, textWidth);\n\n    var x = 0;\n    var y = 0;\n    var tagColumn = commit.parent.columnMax + 1;\n    if (_isHorizontal(commit.parent)) {\n      x = commit.x - commit.dotSize / 2;\n      y =\n        tagColumn * commit.template.commit.tag.spacingY -\n        commit.template.commit.tag.spacingY / 2;\n    } else {\n      x =\n        tagColumn * commit.template.commit.tag.spacingX -\n        commit.template.commit.tag.spacingX / 2 +\n        textWidth / 2;\n      y = commit.y - commit.dotSize / 2;\n    }\n\n    _drawTextBG(\n      commit.context,\n      x,\n      y,\n      commit.tag,\n      this.color,\n      this.font,\n      0,\n      commit.displayTagBox\n    );\n\n    // Reset original context font\n    commit.context.font = originalFont;\n\n    return this;\n  }\n\n  // --------------------------------------------------------------------\n  // -----------------------      Template       ------------------------\n  // --------------------------------------------------------------------\n\n  /**\n   * Template\n   *\n   * @constructor\n   *\n   * @param {object} options - Template options\n   * @param {string[]} [options.colors] - Colors scheme: One color for each column\n   * @param {string} [options.arrow.color] - Arrow color\n   * @param {number} [options.arrow.size] - Arrow size\n   * @param {number} [options.arrow.offset] - Arrow offset\n   * @param {string} [options.branch.color] - Branch color\n   * @param {number} [options.branch.lineWidth] - Branch line width\n   * @param {number[]} [options.branch.lineDash] - Branch line dash segments\n   * @param {string} [options.branch.mergeStyle = (\"bezier\"|\"straight\")] - Branch merge style\n   * @param {number} [options.branch.spacingX] - Space between branches\n   * @param {number} [options.branch.spacingY] - Space between branches\n   * @param {number} [options.commit.spacingX] - Space between commits\n   * @param {number} [options.commit.spacingY] - Space between commits\n   * @param {number} [options.commit.widthExtension = 0]  - Additional width to be added to the calculated width\n   * @param {string} [options.commit.color] - Master commit color (dot & message)\n   * @param {string} [options.commit.dot.color] - Commit dot color\n   * @param {number} [options.commit.dot.size] - Commit dot size\n   * @param {number} [options.commit.dot.strokeWidth] - Commit dot stroke width\n   * @param {string} [options.commit.dot.strokeColor] - Commit dot stroke color\n   * @param {number[]} [options.commit.dot.lineDash] - Commit dot line dash segments\n   * @param {string} [options.commit.message.color] - Commit message color\n   * @param {boolean} [options.commit.message.display] - Commit display policy\n   * @param {boolean} [options.commit.message.displayAuthor] - Commit message author policy\n   * @param {boolean} [options.commit.message.displayBranch] - Commit message branch policy\n   * @param {boolean} [options.commit.message.displayHash] - Commit message hash policy\n   * @param {string} [options.commit.message.font = \"normal 12pt Calibri\"] - Commit message font\n   * @param {boolean} [options.commit.shouldDisplayTooltipsInCompactMode] - Tooltips policy\n   * @param {CommitFormatter} [options.commit.tooltipHTMLFormatter = true] - Formatter for the tooltip contents.\n   *\n   * @this Template\n   **/\n  function Template(options) {\n    // Options\n    options = _isObject(options) ? options : {};\n    options.branch = options.branch || {};\n    options.arrow = options.arrow || {};\n    options.commit = options.commit || {};\n    options.commit.dot = options.commit.dot || {};\n    options.commit.tag = options.commit.tag || {};\n    options.commit.message = options.commit.message || {};\n\n    // One color per column\n    this.colors = options.colors || [\n      \"#6963FF\",\n      \"#47E8D4\",\n      \"#6BDB52\",\n      \"#E84BA5\",\n      \"#FFA657\"\n    ];\n\n    // Branch style\n    this.branch = {};\n    this.branch.color = options.branch.color || null; // Only one color\n    this.branch.lineWidth = options.branch.lineWidth || 2;\n    this.branch.lineDash = options.branch.lineDash || [];\n    this.branch.showLabel = options.branch.showLabel || false;\n    this.branch.labelColor = options.branch.labelColor || null;\n    this.branch.labelFont = options.branch.labelFont || \"normal 8pt Calibri\";\n\n    /*\n     * Set to 'null' by default, as a value of '0' can no longer be used to test\n     * whether rotation angle has been defined\n     * ('0' is an acceptable value).\n     */\n    this.branch.labelRotation =\n      options.branch.labelRotation !== undefined\n        ? options.branch.labelRotation\n        : null;\n\n    // Merge style = \"bezier\" | \"straight\"\n    this.branch.mergeStyle = options.branch.mergeStyle || \"bezier\";\n\n    // Space between branches\n    this.branch.spacingX =\n      typeof options.branch.spacingX === \"number\"\n        ? options.branch.spacingX\n        : 20;\n    this.branch.spacingY = options.branch.spacingY || 0;\n\n    // Arrow style\n    this.arrow = {};\n    this.arrow.size = options.arrow.size || null;\n    this.arrow.color = options.arrow.color || null;\n    this.arrow.active = typeof this.arrow.size === \"number\";\n    this.arrow.offset = options.arrow.offset || 2;\n\n    // Commit style\n    this.commit = {};\n    this.commit.spacingX = options.commit.spacingX || 0;\n    this.commit.spacingY =\n      typeof options.commit.spacingY === \"number\"\n        ? options.commit.spacingY\n        : 25;\n    this.commit.widthExtension =\n      typeof options.commit.widthExtension === \"number\"\n        ? options.commit.widthExtension\n        : 0;\n    this.commit.tooltipHTMLFormatter =\n      options.commit.tooltipHTMLFormatter || null;\n    this.commit.shouldDisplayTooltipsInCompactMode = _booleanOptionOr(\n      options.commit.shouldDisplayTooltipsInCompactMode,\n      true\n    );\n\n    // Only one color, if null message takes branch color (full commit)\n    this.commit.color = options.commit.color || null;\n\n    this.commit.dot = {};\n\n    // Only one color, if null message takes branch color (only dot)\n    this.commit.dot.color = options.commit.dot.color || null;\n    this.commit.dot.size = options.commit.dot.size || 3;\n    this.commit.dot.strokeWidth = options.commit.dot.strokeWidth || null;\n    this.commit.dot.strokeColor = options.commit.dot.strokeColor || null;\n    this.commit.dot.lineDash =\n      options.commit.dot.lineDash || this.branch.lineDash;\n\n    this.commit.tag = {};\n    this.commit.tag.color = options.commit.tag.color || this.commit.dot.color;\n    this.commit.tag.font =\n      options.commit.tag.font ||\n      options.commit.message.font ||\n      \"normal 10pt Calibri\";\n    this.commit.tag.spacingX = this.branch.spacingX;\n    this.commit.tag.spacingY = this.commit.spacingY;\n\n    this.commit.message = {};\n    this.commit.message.display = _booleanOptionOr(\n      options.commit.message.display,\n      true\n    );\n    this.commit.message.displayAuthor = _booleanOptionOr(\n      options.commit.message.displayAuthor,\n      true\n    );\n    this.commit.message.displayBranch = _booleanOptionOr(\n      options.commit.message.displayBranch,\n      true\n    );\n    this.commit.message.displayHash = _booleanOptionOr(\n      options.commit.message.displayHash,\n      true\n    );\n\n    // Only one color, if null message takes commit color (only message)\n    this.commit.message.color = options.commit.message.color || null;\n    this.commit.message.font =\n      options.commit.message.font || \"normal 12pt Calibri\";\n  }\n\n  /**\n   * Get a default template from library\n   *\n   * @param {string} name - Template name\n   *\n   * @return {Template} [template] - Template if exist\n   **/\n  Template.prototype.get = function(name) {\n    var template = {};\n\n    switch (name) {\n      case \"blackarrow\":\n        template = {\n          branch: {\n            color: \"#000000\",\n            lineWidth: 4,\n            spacingX: 50,\n            mergeStyle: \"straight\",\n            labelRotation: 0\n          },\n          commit: {\n            spacingY: -60,\n            dot: {\n              size: 12,\n              strokeColor: \"#000000\",\n              strokeWidth: 7\n            },\n            message: {\n              color: \"black\"\n            }\n          },\n          arrow: {\n            size: 16,\n            offset: 2.5\n          }\n        };\n        break;\n\n      case \"metro\":\n      /* falls through */\n      default:\n        template = {\n          colors: [\"#979797\", \"#008fb5\", \"#f1c109\"],\n          branch: {\n            lineWidth: 10,\n            spacingX: 50,\n            labelRotation: 0\n          },\n          commit: {\n            spacingY: -80,\n            dot: {\n              size: 14\n            },\n            message: {\n              font: \"normal 14pt Arial\"\n            }\n          }\n        };\n        break;\n    }\n\n    return new Template(template);\n  };\n\n  // --------------------------------------------------------------------\n  // -----------------------      Utilities       -----------------------\n  // --------------------------------------------------------------------\n\n  /**\n   * Returns the last element of given array.\n   *\n   * @param {Array} array\n   * @returns {*}\n   * @private */\n  function _getLast(array) {\n    return array.slice(-1)[0];\n  }\n\n  /**\n   * Extend given commit with proper attributes for tag from options.\n   *\n   * @param {Commit} commit\n   * @param {object} [options]\n   * @param {string} [options.tag] - Tag of the commit\n   * @param {string} [options.tagColor = commit.messageColor] - Color of the tag\n   * @param {string} [options.tagFont = commit.template.commit.tag.font] - Font of the tag\n   * @param {string} [options.displayTagBox = true] - If true, display a box around the tag\n   * @private\n   */\n  function _assignTagOptionsToCommit(commit, options) {\n    commit.tag = options.tag || null;\n    commit.tagColor = options.tagColor || commit.messageColor;\n    commit.tagFont = options.tagFont || commit.template.commit.tag.font;\n    commit.displayTagBox = _booleanOptionOr(options.displayTagBox, true);\n  }\n\n  /**\n   * Returns the parent commit of current HEAD from given branch.\n   *\n   * @param {Branch} branch\n   * @returns {Commit}\n   * @private\n   * */\n  function _getParentCommitFromBranch(branch) {\n    if (_getLast(branch.commits)) {\n      return _getLast(branch.commits);\n    } else if (branch.parentBranch) {\n      return _getParentCommitFromBranch(branch.parentBranch);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Returns a copy of the given object.\n   *\n   * @param {object} object\n   * @returns {object}\n   * @private\n   * */\n  function _clone(object) {\n    return JSON.parse(JSON.stringify(object));\n  }\n\n  /**\n   * Returns the height of the given font when rendered.\n   *\n   * @param {string} font\n   * @returns {number}\n   * @private\n   */\n  function _getFontHeight(font) {\n    var body = document.getElementsByTagName(\"body\")[0];\n    var dummy = document.createElement(\"div\");\n    var dummyText = document.createTextNode(\"Mg\");\n\n    dummy.appendChild(dummyText);\n    dummy.setAttribute(\"style\", \"font: \" + font + \"; display: inline-block;\");\n    body.appendChild(dummy);\n    var fontHeight = dummy.offsetHeight;\n    body.removeChild(dummy);\n\n    return fontHeight;\n  }\n\n  /**\n   * Returns the `booleanOptions` if it's actually a boolean, returns `defaultOptions` otherwise.\n   *\n   * @param {*} booleanOption\n   * @param {boolean} defaultOptions\n   * @returns {boolean}\n   * @private\n   */\n  function _booleanOptionOr(booleanOption, defaultOption) {\n    return typeof booleanOption === \"boolean\" ? booleanOption : defaultOption;\n  }\n\n  /**\n   * Draw text background.\n   *\n   * @param {CanvasRenderingContext2D} context - Canvas 2D context in which to render text.\n   * @param {number} x - Horizontal offset of the text.\n   * @param {number} y - Vertical offset of the text.\n   * @param {string} text - Text content.\n   * @param {string} color - Text Colors.\n   * @param {string} font - Text font.\n   * @param {number} angle - Angle of the text for rotation.\n   * @param {boolean} useStroke - Name of the triggered event.\n   * @private\n   */\n  function _drawTextBG(context, x, y, text, color, font, angle, useStroke) {\n    context.save();\n    context.translate(x, y);\n    context.rotate(angle * (Math.PI / 180));\n    context.textAlign = \"center\";\n\n    context.font = font;\n    var width = context.measureText(text).width;\n    var height = _getFontHeight(font);\n\n    if (useStroke) {\n      context.beginPath();\n      context.rect(-(width / 2) - 4, -(height / 2) + 2, width + 8, height + 2);\n      context.fillStyle = color;\n      context.fill();\n      context.lineWidth = 2;\n      context.strokeStyle = \"black\";\n      context.stroke();\n\n      context.fillStyle = \"black\";\n    } else {\n      context.fillStyle = color;\n    }\n\n    context.fillText(text, 0, height / 2);\n    context.restore();\n  }\n\n  /**\n   * Emit an event on the given element.\n   *\n   * @param {HTMLElement} element - DOM element to trigger the event on.\n   * @param {string} eventName - Name of the triggered event.\n   * @param {object} [data = {}] - Custom data to attach to the event.\n   * @private\n   */\n  function _emitEvent(element, eventName, data) {\n    var event;\n\n    if (document.createEvent) {\n      event = document.createEvent(\"HTMLEvents\");\n      event.initEvent(eventName, true, true);\n    } else {\n      event = document.createEventObject();\n      event.eventType = eventName;\n    }\n\n    event.eventName = eventName;\n    event.data = data || {};\n\n    if (document.createEvent) {\n      element.dispatchEvent(event);\n    } else {\n      element.fireEvent(\"on\" + event.eventType, event);\n    }\n  }\n\n  /**\n   * Returns the scaling factor of given canvas `context`.\n   * Handles high-resolution displays.\n   *\n   * @param {object} context\n   * @returns {number}\n   * @private\n   */\n  function _getScale(context) {\n    var backingStorePixelRatio;\n    var scalingFactor;\n\n    // Account for high-resolution displays\n    scalingFactor = 1;\n\n    if (window.devicePixelRatio) {\n      backingStorePixelRatio =\n        context.webkitBackingStorePixelRatio ||\n        context.mozBackingStorePixelRatio ||\n        context.msBackingStorePixelRatio ||\n        context.oBackingStorePixelRatio ||\n        context.backingStorePixelRatio ||\n        1;\n\n      scalingFactor *= window.devicePixelRatio / backingStorePixelRatio;\n    }\n\n    return scalingFactor;\n  }\n\n  /**\n   * Returns `true` if `graph` has a vertical orientation.\n   *\n   * @param {GitGraph} graph\n   * @returns {boolean}\n   * @private\n   */\n  function _isVertical(graph) {\n    return (\n      graph.orientation === \"vertical\" ||\n      graph.orientation === \"vertical-reverse\"\n    );\n  }\n\n  /**\n   * Returns `true` if `graph` has an horizontal orientation.\n   *\n   * @param {GitGraph} graph\n   * @returns {boolean}\n   * @private\n   */\n  function _isHorizontal(graph) {\n    return (\n      graph.orientation === \"horizontal\" ||\n      graph.orientation === \"horizontal-reverse\"\n    );\n  }\n\n  /**\n   * Returns `true` if `object` is an object.\n   *\n   * @param {*} object\n   * @returns {boolean}\n   * @private\n   */\n  function _isObject(object) {\n    return typeof object === \"object\";\n  }\n\n  /**\n   * Returns `true` if any of the properties (nested or single) of `obj` specified by `key` are undefined or set to a value of null.\n   * Modified from original source: http://stackoverflow.com/a/23809123.\n   *\n   * @param {*} obj - The object whose properties are to be tested as being undefined or equal to null.\n   * @param {string} key - The property hierarchy of `obj` to be tested, specified using 'dot notation' (e.g. property1.property2.property3 etc).\n   * @returns {boolean} - True if ANY of the properties specified by `key` is undefined or equal to null, otherwise False.\n   * @private\n   */\n  function _isNullOrUndefined(obj, key) {\n    /* We invert the result of '.every()' in order to meet the expected return value for the condition test of the function.\n     * We have to do this, given that '.every()' will return immediately upon capturing a falsey value from the callback.\n     *\n     * See: https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/every for more information.\n     */\n    return !key.split(\".\").every(function(x) {\n      if (typeof obj !== \"object\" || obj === null || !(x in obj)) {\n        return false;\n      }\n      obj = obj[x];\n      return true;\n    });\n  }\n\n  /* Polyfill for ECMA-252 5th edition Array.prototype.every()\n   * See: https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/every\n   * for more information.\n   * */\n  if (!Array.prototype.every) {\n    Array.prototype.every = function(callbackFn, thisArg) {\n      var T, k;\n\n      if (this === null) {\n        throw new TypeError(\"this is null or not defined\");\n      }\n\n      var O = Object(this);\n      var len = O.length >>> 0;\n\n      if (typeof callbackFn !== \"function\") {\n        throw new TypeError();\n      }\n\n      if (arguments.length > 1) {\n        T = thisArg;\n      }\n\n      k = 0;\n\n      while (k < len) {\n        var kValue;\n        if (k in O) {\n          kValue = O[k];\n\n          var testResult = callbackFn.call(T, kValue, k, O);\n\n          if (!testResult) {\n            return false;\n          }\n        }\n        k++;\n      }\n\n      return true;\n    };\n  }\n\n  // Expose GitGraph object\n  window.GitGraph = GitGraph;\n  window.GitGraph.Branch = Branch;\n  window.GitGraph.Commit = Commit;\n  window.GitGraph.Template = Template;\n})();\n","import { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport \"./lib/gitgraph.js/src/gitgraph.js\";\n/**\n * `lrn-gitgraph`\n * For each branch in your repo use the following git command:\n *   ```\n *   git log [branch_name] --format='{\"refs\": \"%d\", \"commit\": \"%h\", \"tree\": \"%t\", \"parent\": \"%p\", \"subject\": \"%s\", \"date\": \"%cd\", \"author\": \"%an %ae\"},' --reverse\n *   ```\n * @demo demo/index.html\n */\nclass LrnGitgraph extends PolymerElement {\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: block;\n          overflow-x: scroll;\n        }\n      </style>\n      <canvas id=\"gitGraph\"></canvas>\n    `;\n  }\n\n  static get tag() {\n    return \"lrn-gitgraph\";\n  }\n\n  static get properties() {\n    return {\n      commits: {\n        type: Array,\n        value: []\n      },\n      template: {\n        type: String,\n        value: \"blackarrow\"\n      },\n      orientation: {\n        type: String,\n        value: \"horizontal\"\n      },\n      mode: {\n        type: String,\n        value: \"\"\n      },\n      reverseArrow: {\n        type: Boolean,\n        value: false\n      },\n      /**\n       * @type {{template: String, reverseArrow: Boolean, orientation: String, element: Object}}\n       */\n      config: {\n        type: Object\n      }\n    };\n  }\n\n  static get observers() {\n    return [\"_commitsChanged(commits)\"];\n  }\n\n  _commitsChanged(commits) {\n    var root = this;\n    if (root.config) {\n      if (commits.length > 0) {\n        var gitgraph = new GitGraph(root.config);\n        var tree = [];\n        commits.forEach(function(item) {\n          if (item.commits) {\n            item.commits.forEach(function(commit) {\n              commit[\"branch\"] = item.branch;\n              tree.push(commit);\n            });\n          }\n        });\n        // remove duplicate commits\n        console.log(\"befor\", tree);\n        tree = root._treeRemoveDuplicates(tree);\n        // sort by date\n        tree = tree.sort(function(a, b) {\n          return new Date(b.date) - new Date(a.date);\n        });\n        // reverse the tree so the newest oldest is first\n        tree.reverse();\n        // identify forks\n        var branches = [];\n        tree.forEach(function(item, i) {\n          // if the branch doesn't exist create it\n          if (typeof branches[item.branch] === \"undefined\") {\n            branches[item.branch] = gitgraph.branch(item.branch);\n          }\n          // make the commit\n          branches[item.branch].commit({\n            sha1: item.commit,\n            message: item.subject,\n            author: item.author,\n            tag: item.refs\n          });\n        });\n      }\n    }\n  }\n\n  _treeRemoveDuplicates(tree) {\n    var htTree = [];\n    var htCommits = [];\n    tree.forEach(function(t) {\n      if (!htCommits.includes(t.commit)) {\n        htTree.push(t);\n        htCommits.push(t.commit);\n      }\n    });\n    return htTree;\n  }\n\n  ready() {\n    super.ready();\n    var root = this;\n    var config = {\n      template: root.template, // could be: \"blackarrow\" or \"metro\" or `myTemplate` (custom Template object)\n      reverseArrow: false, // to make arrows point to ancestors, if displayed\n      orientation: root.orientation,\n      element: root.shadowRoot.querySelector(\"#gitGraph\")\n    };\n    if (root.mode !== \"\") {\n      config.mode = root.mode;\n    }\n    root.config = config;\n  }\n}\nwindow.customElements.define(LrnGitgraph.tag, LrnGitgraph);\nexport { LrnGitgraph };\n"],"names":["GitGraph","options","_isObject","elementId","element","_typeof","author","reverseArrow","_booleanOptionOr","template","this","newTemplate","Template","mode","commit","message","display","orientation","spacingY","branch","labelRotation","_isNullOrUndefined","tag","spacingX","marginX","dot","size","marginY","offsetX","offsetY","canvas","document","getElementById","context","getContext","textBaseline","tooltip","createElement","className","style","position","tooltipContainer","body","appendChild","HEAD","branches","commits","columnMax","commitOffsetX","initCommitOffsetX","commitOffsetY","initCommitOffsetY","mouseMoveOptions","handleEvent","hover","gitgraph","addEventListener","mouseDownOptions","click","window","onresize","render","bind","Branch","parent","parentCommit","parentBranch","_getParentCommitFromBranch","name","commitDefaultOptions","lineWidth","lineDash","showLabel","height","width","path","column","calculColumn","length","startPoint","x","y","type","columnIndex","colors","color","checkout","Commit","date","Date","toUTCString","detail","sha1","Math","random","toString","substring","arrowDisplay","messageDisplay","messageAuthorDisplay","displayAuthor","messageBranchDisplay","displayBranch","messageHashDisplay","displayHash","messageColor","messageFont","font","dotColor","dotSize","dotStrokeWidth","strokeWidth","dotStrokeColor","strokeColor","tooltipDisplay","onClick","representedObject","labelColor","labelFont","_assignTagOptionsToCommit","push","Tag","Error","originalFont","textWidth","measureText","max","tagColumn","_isHorizontal","_drawTextBG","displayTagBox","arrow","undefined","mergeStyle","active","offset","widthExtension","tooltipHTMLFormatter","shouldDisplayTooltipsInCompactMode","_getLast","array","slice","tagColor","tagFont","_getFontHeight","getElementsByTagName","dummy","dummyText","createTextNode","setAttribute","fontHeight","offsetHeight","removeChild","booleanOption","defaultOption","text","angle","useStroke","save","translate","rotate","PI","textAlign","beginPath","rect","fillStyle","fill","strokeStyle","stroke","fillText","restore","_emitEvent","eventName","data","event","createEvent","initEvent","createEventObject","eventType","dispatchEvent","fireEvent","_isVertical","graph","object","obj","key","split","every","prototype","dispose","removeEventListener","orphanBranch","get","scalingFactor","backingStorePixelRatio","devicePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","_getScale","unscaledResolution","abs","clearRect","scale","i","j","id","applyCommits","callbackFn","getOffsetById","getBoundingClientRect","top","scrollTop","left","scrollLeft","pageX","pageY","distanceX","distanceY","sqrt","pow","self","isOut","showCommitTooltip","clientX","clientY","innerHTML","textContent","emitCommitEvent","mouseEventOptions","isOverCommit","isMouseOver","point","moveTo","bezierCurveTo","lineTo","setLineDash","closePath","isCompact","detailId","previousCommit","isFirstBranch","isPathBeginning","pushPath","clientHeight","lastCommit","isDeleted","merge","target","commitOptions","targetBranch","firstBranchCommit","console","log","defaultMessage","branchParentCommit","targetBranchParentCommit","isFastForwardPossible","fastForward","isGraphHorizontal","targetBranchY","forEach","targetBranchX","targetCommit","endOfBranch","JSON","parse","stringify","mergeCommit","candidates","lastPoint","commitOffsetForTags","commitOffsetLeft","yNegativeMargin","arc","offsetLeft","detailPositionTop","offsetTop","isReversed","direction","atan2","alpha","isForkCommit","deltaColumn","commitSpaceDelta","alphaX","isPushedInY","isOnSameXThanParent","alphaY","isPushedInX","isOnSameYThanParent","delta","arrowX","arrowY","h","x1","cos","y1","sin","x2","y2","x3","y3","x4","y4","quadraticCurveTo","Array","thisArg","T","k","TypeError","O","Object","len","arguments","kValue","call","LrnGitgraph","PolymerElement","html","value","String","Boolean","config","tree","item","_treeRemoveDuplicates","sort","a","b","reverse","subject","refs","htTree","htCommits","t","includes","shadowRoot","querySelector","customElements","define"],"mappings":"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"}