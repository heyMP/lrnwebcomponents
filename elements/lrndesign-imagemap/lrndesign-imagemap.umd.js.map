{"version":3,"file":"lrndesign-imagemap.umd.js","sources":["lrndesign-imagemap.umd.js"],"sourcesContent":["import { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport { afterNextRender } from \"@polymer/polymer/lib/utils/render-status.js\";\nimport { dom } from \"@polymer/polymer/lib/legacy/polymer.dom.js\";\nimport \"@polymer/iron-ajax/iron-ajax.js\";\nimport \"@polymer/iron-a11y-keys/iron-a11y-keys.js\";\nimport \"@lrnwebcomponents/simple-modal/simple-modal.js\";\n/**\n * `lrndesign-imagemap`\n * creates an accessible image map\n *\n * @customElement\n * @polymer\n * @demo demo/index.html\n */\nclass LrndesignImagemap extends PolymerElement {\n  constructor() {\n    super();\n    import(\"@lrnwebcomponents/relative-heading/relative-heading.js\");\n    import(\"@lrnwebcomponents/lrndesign-imagemap/lib/lrndesign-imagemap-hotspot.js\");\n  }\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: block;\n        }\n        :host #buttons {\n          position: absolute;\n          left: -999999px;\n          top: 0;\n          overflow: hidden;\n          opacity: 0;\n        }\n        /*::slotted([hotspot]) {\n        display: none;\n      }*/\n        @media print {\n          :host > #svg {\n            display: none;\n          }\n          /*::slotted(#screen-only) {\n          display: none;\n        }\n        ::slotted([hotspot]) {\n          display: block;\n        }*/\n        }\n      </style>\n      <relative-heading\n        hidden\\$=\"[[!label]]\"\n        id=\"heading\"\n        subtopic-of\\$=\"[[subtopicOf]]\"\n        tag\\$=\"[[tag]]\"\n        text\\$=\"[[label]]\"\n      >\n      </relative-heading>\n      <div id=\"desc\"><slot name=\"desc\"></slot></div>\n      <div id=\"svg\"></div>\n      <div id=\"buttons\"></div>\n      <slot></slot>\n      <iron-ajax\n        auto=\"\"\n        id=\"get_svg\"\n        url=\"[[src]]\"\n        handle-as=\"text\"\n        on-response=\"_getSVGHandler\"\n      ></iron-ajax>\n    `;\n  }\n  static get tag() {\n    return \"lrndesign-imagemap\";\n  }\n  static get properties() {\n    return {\n      /**\n       * Label for the imagemap\n       */\n      label: {\n        type: String,\n        value: null\n      },\n      /**\n       * The path of the SVG\n       */\n      src: {\n        type: String,\n        value: null\n      },\n      /**\n       * The path of the SVG\n       */\n      hotspotDetails: {\n        type: Array,\n        value: []\n      },\n      /*\n       * optional: the id of the heading element that this imagemap is a subtopic of\n       */\n      subtopicOf: {\n        type: String,\n        value: null,\n        reflectToAttribute: true\n      },\n      /*\n       * optional: if subtopicOf is not set, start the content at a heading tag, eg. <h1/>, <h2/> ...\n       */\n      tag: {\n        type: String,\n        value: null,\n        reflectToAttribute: true\n      }\n    };\n  }\n  /**\n   * attached life cycle\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    window.SimpleModal.requestAvailability();\n    window.addEventListener(\"simple-modal-closed\", e => {\n      if (e.detail.invokedBy === this) {\n        this.closeHotspot();\n      }\n    });\n  }\n  /**\n   * detached life cycle\n   */\n  disconnectedCallback() {\n    window.removeEventListener(\"simple-modal-closed\", e => {\n      if (e.detail.invokedBy === this) {\n        this.closeHotspot();\n      }\n    });\n    super.disconnectedCallback();\n  }\n  /**\n   * Convert from svg text to an array in the table function\n   */\n  _getSVGHandler(e) {\n    let root = this,\n      temp = document.createElement(\"div\"),\n      getID = function(element, alt) {\n        if (element.getAttribute(\"id\") === null)\n          element.setAttribute(\"id\", alt);\n        return element.getAttribute(\"id\");\n      };\n    let setAriaLabelledBy = function(source, target, prefix) {\n      // adds title and desc elements to target and sets the aria-labelledby attribute\n      let svgElem = function(nodename) {\n        source = source !== null ? source : root;\n        //adds title or desc element to target\n        let attr = nodename === \"title\" ? \"label\" : nodename,\n          query = source.querySelector(\"#\" + attr);\n        var label = target.querySelector(nodename);\n        //if the target doesn't have the element, add it\n        if (label === null) {\n          label = document.createElement(nodename);\n          target.prepend(label);\n        }\n        //populates the element with data from the source element\n        if (source.getAttribute(attr) !== null) {\n          label.innerHTML = source.getAttribute(attr);\n        } else if (query !== null && query.innerHTML !== \"\") {\n          label.innerHTML = query.innerHTML;\n        }\n        //returns the new element's id\n        return getID(label, prefix + \"-\" + attr);\n      };\n      //set aria-labelledby to the id's for title and descriptions\n      target.setAttribute(\n        \"aria-labelledby\",\n        svgElem(\"desc\") + \" \" + svgElem(\"label\")\n      );\n    };\n    //set up main svg and append to document\n    temp.innerHTML = e.detail.response;\n    let svg = temp.querySelector(\"svg\"),\n      svgid = getID(svg, \"svg-\" + Date.now()),\n      hdata = dom(root).querySelectorAll(\"lrndesign-imagemap-hotspot\");\n    setAriaLabelledBy(root, svg, svgid);\n    this.shadowRoot.querySelector(\"#svg\").appendChild(svg);\n\n    for (let i = 0; i < hdata.length; i++) {\n      let hid = hdata[i].getAttribute(\"hotspot-id\"),\n        hotspot = svg.querySelector(\"#\" + hid),\n        clone = svg.cloneNode(true);\n\n      //clone svg for print versions and show hotspot as selected\n      setAriaLabelledBy(hdata[i], clone, hid);\n      hdata[i].appendChild(clone);\n      hdata[i].querySelector(\"#\" + hid).classList.add(\"selected\");\n      hdata[i].setParentHeading(root.shadowRoot.querySelector(\"#heading\"));\n      for (let j = 0; j < hdata.length; j++) {\n        hdata[i]\n          .querySelector(\"#\" + hdata[j].getAttribute(\"hotspot-id\"))\n          .classList.add(\"hotspot\");\n      }\n\n      //configure hotspot on main (interactive) svg\n      let hbutton = document.createElement(\"button\");\n      hbutton.setAttribute(\"tabindex\", 0);\n      hbutton.setAttribute(\"aria-label\", hdata[i].label);\n      root.shadowRoot.querySelector(\"#buttons\").appendChild(hbutton);\n      hbutton.addEventListener(\"focus\", function() {\n        hotspot.classList.add(\"focus\");\n      });\n      hbutton.addEventListener(\"blur\", function() {\n        hotspot.classList.remove(\"focus\");\n      });\n      hotspot.classList.add(\"hotspot\");\n      hotspot.addEventListener(\"click\", e => {\n        this.openHotspot(hotspot, hdata[i]);\n      });\n      hbutton.addEventListener(\"keyup\", e => {\n        if (e.keyCode === 13 || e.keyCode === 32) {\n          if (!hotspot.classList.contains(\"selected\")) {\n            this.openHotspot(hotspot, hdata[i]);\n          }\n        }\n      });\n    }\n  }\n  /**\n   * Selects a hotspot and opens dialog with details about it.\n   */\n  openHotspot(hotspot, details) {\n    // get everything flat\n    var children = details.shadowRoot\n      .querySelector(\"#desc\")\n      .querySelector(\"slot\")\n      .assignedNodes({ flatten: true });\n    let c = document.createElement(\"div\");\n    // append clones of the children we found\n    for (var child in children) {\n      c.appendChild(children[child].cloneNode(true));\n    }\n    const evt = new CustomEvent(\"simple-modal-show\", {\n      bubbles: true,\n      cancelable: true,\n      detail: {\n        title: details.getAttribute(\"label\"),\n        elements: {\n          content: c\n        },\n        invokedBy: this,\n        clone: false\n      }\n    });\n    this.dispatchEvent(evt);\n    this.__activeHotspot = hotspot;\n    this.resetHotspots();\n    hotspot.classList.add(\"selected\");\n  }\n  /**\n   * Closes a hotspot.\n   */\n  closeHotspot() {\n    this.resetHotspots();\n    this.__activeHotspot.focus();\n  }\n  /**\n   * Closes dialog and deselects all hotspots.\n   */\n  resetHotspots() {\n    let hotspots = this.querySelectorAll('.hotspot[role=\"button\"]');\n    for (let i = 0; i < hotspots.length; i++) {\n      hotspots[i].classList.remove(\"selected\");\n    }\n  }\n}\nwindow.customElements.define(LrndesignImagemap.tag, LrndesignImagemap);\nexport { LrndesignImagemap };\n"],"names":["LrndesignImagemap","PolymerElement","html","label","type","String","value","src","hotspotDetails","Array","subtopicOf","reflectToAttribute","tag","window","SimpleModal","requestAvailability","addEventListener","e","detail","invokedBy","_this2","closeHotspot","removeEventListener","_this3","root","this","temp","document","createElement","getID","element","alt","getAttribute","setAttribute","setAriaLabelledBy","source","target","prefix","svgElem","nodename","attr","query","querySelector","prepend","innerHTML","response","svg","svgid","Date","now","hdata","dom","querySelectorAll","shadowRoot","appendChild","i","hid","hotspot","clone","cloneNode","classList","add","setParentHeading","j","length","hbutton","remove","_this4","openHotspot","keyCode","contains","details","children","assignedNodes","flatten","c","child","evt","CustomEvent","bubbles","cancelable","title","elements","content","dispatchEvent","__activeHotspot","resetHotspots","focus","hotspots","customElements","define"],"mappings":"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"}