{"version":3,"file":"moment-element.umd.js","sources":["moment-element.umd.js"],"sourcesContent":["import { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport { pathFromUrl } from \"@polymer/polymer/lib/utils/resolve-url.js\";\nimport \"@lrnwebcomponents/es-global-bridge/es-global-bridge.js\";\n/**\n * @license\n * Copyright (c) 2016 Abdón Rodríguez Davila (@abdonrd). All rights reserved.\n * This code may only be used under the MIT style license found at https://abdonrd.github.io/LICENSE.txt\n */\n/**\nPolymer element wrapper for the [moment](https://github.com/moment/moment) library.\n\nExamples:\n\n    <moment-element></moment-element>\n    <moment-element datetime=\"1991-12-31\" output-format=\"MMM DD[,] YYYY\"></moment-element>\n\n* @demo demo/index.html\n*/\nclass MomentElement extends PolymerElement {\n  static get template() {\n    return html`\n      [[output]]\n    `;\n  }\n  static get tag() {\n    return \"moment-element\";\n  }\n  static get properties() {\n    return {\n      /**\n       * The input datetime. If don't set the datetime, the datetime will be now.\n       * For consistent results, parsing anything other than ISO 8601 strings\n       * with the `inputFormat` property. More information in [moment String](http://momentjs.com/docs/#/parsing/string/).\n       */\n      datetime: {\n        type: String,\n        value() {\n          return new Date();\n        }\n      },\n\n      /**\n       * The datetime input format. An string using the\n       * [moment String + Format](http://momentjs.com/docs/#/parsing/string-format/).\n       */\n      inputFormat: {\n        type: String,\n        value: \"\"\n      },\n\n      /**\n       * The datetime output format. Options are 'now' or datetime using the\n       * [moment Format](http://momentjs.com/docs/#/displaying/format/).\n       */\n      outputFormat: {\n        type: String,\n        value: \"\"\n      },\n\n      /**\n       * Relative time using [momen time from now](http://momentjs.com/docs/#/displaying/fromnow/)\n       * or [momen Time from datetime](http://momentjs.com/docs/#/displaying/from/).\n       */\n      from: {\n        type: String,\n        value: \"\"\n      },\n\n      /**\n       * Relative time using [momen Time to now](http://momentjs.com/docs/#/displaying/tonow/)\n       * or [momen Time to datetime](http://momentjs.com/docs/#/displaying/to/).\n       */\n      to: {\n        type: String,\n        value: \"\"\n      },\n\n      /**\n       * The output datetime.\n       */\n      output: {\n        type: String,\n        notify: true\n      },\n      /**\n       * library loaded\n       */\n      libraryLoaded: {\n        type: Boolean\n      }\n    };\n  }\n  static get observers() {\n    return [\n      \"_computeOutput(datetime, inputFormat, outputFormat, from, to, libraryLoaded)\"\n    ];\n  }\n  constructor() {\n    super();\n    const basePath = pathFromUrl(decodeURIComponent(import.meta.url));\n    const location = `${basePath}lib/moment/moment.js`;\n    window.addEventListener(\n      \"es-bridge-moment-loaded\",\n      this._momentLoaded.bind(this)\n    );\n    window.ESGlobalBridge.requestAvailability();\n    window.ESGlobalBridge.instance.load(\"moment\", location);\n  }\n  disconnectedCallback() {\n    window.removeEventListener(\n      \"es-bridge-moment-loaded\",\n      this._momentLoaded.bind(this)\n    );\n    super.disconnectedCallback();\n  }\n  _momentLoaded() {\n    this.libraryLoaded = true;\n  }\n  /**\n   * Recomputes the output\n   */\n  update() {\n    this._computeOutput(\n      this.datetime,\n      this.inputFormat,\n      this.outputFormat,\n      this.from,\n      this.to,\n      this.libraryLoaded\n    );\n  }\n  _computeOutput(datetime, inputFormat, outputFormat, from, to, libraryLoaded) {\n    if (libraryLoaded) {\n      var output = inputFormat\n        ? moment(datetime, inputFormat)\n        : moment(datetime);\n      if (outputFormat) {\n        output = output.format(outputFormat);\n      } else if (from) {\n        output = from === \"now\" ? output.fromNow() : output.from(moment(from));\n      } else if (to) {\n        output = to === \"now\" ? output.toNow() : output.to(moment(to));\n      }\n      this.set(\"output\", output);\n    }\n  }\n}\nwindow.customElements.define(MomentElement.tag, MomentElement);\nexport { MomentElement };\n"],"names":["MomentElement","basePath","pathFromUrl","decodeURIComponent","location","window","addEventListener","_this","_momentLoaded","bind","ESGlobalBridge","requestAvailability","instance","load","PolymerElement","html","datetime","type","String","value","Date","inputFormat","outputFormat","from","to","output","notify","libraryLoaded","Boolean","removeEventListener","this","_computeOutput","moment","format","fromNow","toNow","set","customElements","define","tag"],"mappings":"wjDAkBMA,8NAiFIC,EAAWC,cAAYC,oMACvBC,YAAcH,iCACpBI,OAAOC,iBACL,0BACAC,EAAKC,cAAcC,YAErBJ,OAAOK,eAAeC,sBACtBN,OAAOK,eAAeE,SAASC,KAAK,SAAUT,iPAxFtBU,kEAEjBC,8CAKA,0DAGA,CAMLC,SAAU,CACRC,KAAMC,OACNC,wBACS,IAAIC,OAQfC,YAAa,CACXJ,KAAMC,OACNC,MAAO,IAOTG,aAAc,CACZL,KAAMC,OACNC,MAAO,IAOTI,KAAM,CACJN,KAAMC,OACNC,MAAO,IAOTK,GAAI,CACFP,KAAMC,OACNC,MAAO,IAMTM,OAAQ,CACNR,KAAMC,OACNQ,QAAQ,GAKVC,cAAe,CACbV,KAAMW,kDAKH,CACL,sIAeFvB,OAAOwB,oBACL,0BACAC,KAAKtB,cAAcC,KAAKqB,6GAKrBH,eAAgB,wCAMhBI,eACHD,KAAKd,SACLc,KAAKT,YACLS,KAAKR,aACLQ,KAAKP,KACLO,KAAKN,GACLM,KAAKH,sDAGMX,EAAUK,EAAaC,EAAcC,EAAMC,EAAIG,MACxDA,EAAe,KACbF,EAASJ,EACTW,OAAOhB,EAAUK,GACjBW,OAAOhB,GACPM,EACFG,EAASA,EAAOQ,OAAOX,GACdC,EACTE,EAAkB,QAATF,EAAiBE,EAAOS,UAAYT,EAAOF,KAAKS,OAAOT,IACvDC,IACTC,EAAgB,QAAPD,EAAeC,EAAOU,QAAUV,EAAOD,GAAGQ,OAAOR,UAEvDY,IAAI,SAAUX,aAIzBpB,OAAOgC,eAAeC,OAAOtC,EAAcuC,IAAKvC"}