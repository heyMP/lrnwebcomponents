{"version":3,"file":"simple-timer.umd.js","sources":["simple-timer.umd.js"],"sourcesContent":["/**\n * Copyright 2018 The Pennsylvania State University\n * @license Apache-2.0, see License.md for full text.\n */\nimport { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\n/**\n * `simple-timer`\n * `Automated conversion of simple-timer/`\n *\n * @microcopy - language worth noting:\n *  -\n *\n * @customElement\n * @polymer\n * @demo demo/index.html\n */\nclass SimpleTimer extends PolymerElement {\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: block;\n        }\n      </style>\n      [[_formattedTime]]\n    `;\n  }\n  static get tag() {\n    return \"simple-timer\";\n  }\n  static get properties() {\n    return {\n      /**\n       * Start time for the timer in seconds\n       */\n      startTime: {\n        type: Number,\n        value: 60\n      },\n      /**\n       * Current time of the timer, in seconds\n       */\n      currentTime: {\n        type: Number,\n        notify: true\n      },\n      /**\n       * True if the timer is currently running\n       */\n      isRunning: {\n        type: Boolean,\n        reflectToAttribute: true,\n        notify: true,\n        value: false\n      },\n      /**\n       * Set to true to have timer count up\n       */\n      countUp: {\n        type: Boolean,\n        value: false\n      },\n      /**\n       * Time the timer has spent running since it was started\n       */\n      _elapsedTime: {\n        type: Number,\n        value: 0\n      },\n      _formattedTime: {\n        type: String,\n        value: \"0\"\n      }\n    };\n  }\n  ready() {\n    super.ready();\n    if (this.countUp) {\n      this.set(\"currentTime\", 0);\n      this.set(\"_formattedTime\", \"0\");\n    } else {\n      this.set(\"currentTime\", this.startTime);\n      this.set(\"_formattedTime\", this.startTime.toString());\n    }\n  }\n  start() {\n    if (\n      (this.currentTime <= 0 && !this.countUp) ||\n      (this.currentTime >= this.startTime && this.countUp)\n    ) {\n      // timer is over\n      this.currentTime = this.countUp ? this.startTime : 0;\n    }\n    if (!this.startTime || this.isRunning) {\n      this.pause();\n      return;\n    }\n    this._elapsed = performance.now() / 1000;\n    this.isRunning = true;\n    window.requestAnimationFrame(this._decreaseTimer.bind(this));\n  }\n  pause() {\n    this.isRunning = false;\n  }\n  _decreaseTimer(timestamp) {\n    if (!this.isRunning) {\n      return;\n    }\n    if (\n      (this.currentTime <= 0 && !this.countUp) ||\n      (this.currentTime >= this.startTime && this.countUp)\n    ) {\n      // timer is over\n      this.currentTime = this.countUp ? this.startTime : 0;\n      this.pause();\n      this.dispatchEvent(\n        new CustomEvent(\"simple-timer-end\", {\n          bubbles: true,\n          cancelable: true,\n          composed: true,\n          detail: true\n        })\n      );\n      return;\n    }\n    var now = timestamp / 1000;\n    // Compute the relative progress based on the time spent running\n    var progress = now - this._elapsed;\n    this.currentTime = this.countUp\n      ? this.currentTime + progress\n      : this.currentTime - progress;\n    this._formattedTime = this._formatTime(this.currentTime);\n    this._elapsed = now;\n    window.requestAnimationFrame(this._decreaseTimer.bind(this));\n  }\n  _formatTime(time) {\n    var timeString = time.toString().split(\".\");\n    return timeString[0].indexOf(\"-\") === 0\n      ? 0\n      : timeString[0] + \".\" + timeString[1].substring(0, 2);\n  }\n}\nwindow.customElements.define(SimpleTimer.tag, SimpleTimer);\nexport { SimpleTimer };\n"],"names":["SimpleTimer","PolymerElement","html","startTime","type","Number","value","currentTime","notify","isRunning","Boolean","reflectToAttribute","countUp","_elapsedTime","_formattedTime","String","this","set","toString","_elapsed","performance","now","window","requestAnimationFrame","_decreaseTimer","bind","pause","timestamp","dispatchEvent","CustomEvent","bubbles","cancelable","composed","detail","progress","_formatTime","time","timeString","split","indexOf","substring","customElements","define","tag"],"mappings":"o7CAgBMA,gaAAoBC,+DAEfC,8CAUA,wDAGA,CAILC,UAAW,CACTC,KAAMC,OACNC,MAAO,IAKTC,YAAa,CACXH,KAAMC,OACNG,QAAQ,GAKVC,UAAW,CACTL,KAAMM,QACNC,oBAAoB,EACpBH,QAAQ,EACRF,OAAO,GAKTM,QAAS,CACPR,KAAMM,QACNJ,OAAO,GAKTO,aAAc,CACZT,KAAMC,OACNC,MAAO,GAETQ,eAAgB,CACdV,KAAMW,OACNT,MAAO,qFAMPU,KAAKJ,cACFK,IAAI,cAAe,QACnBA,IAAI,iBAAkB,YAEtBA,IAAI,cAAeD,KAAKb,gBACxBc,IAAI,iBAAkBD,KAAKb,UAAUe,8CAKzCF,KAAKT,aAAe,IAAMS,KAAKJ,SAC/BI,KAAKT,aAAeS,KAAKb,WAAaa,KAAKJ,gBAGvCL,YAAcS,KAAKJ,QAAUI,KAAKb,UAAY,GAEhDa,KAAKb,YAAaa,KAAKP,gBAIvBU,SAAWC,YAAYC,MAAQ,SAC/BZ,WAAY,EACjBa,OAAOC,sBAAsBP,KAAKQ,eAAeC,KAAKT,aAL/CU,6CAQFjB,WAAY,yCAEJkB,MACRX,KAAKP,cAIPO,KAAKT,aAAe,IAAMS,KAAKJ,SAC/BI,KAAKT,aAAeS,KAAKb,WAAaa,KAAKJ,oBAGvCL,YAAcS,KAAKJ,QAAUI,KAAKb,UAAY,OAC9CuB,kBACAE,cACH,IAAIC,YAAY,mBAAoB,CAClCC,SAAS,EACTC,YAAY,EACZC,UAAU,EACVC,QAAQ,SAKVZ,EAAMM,EAAY,IAElBO,EAAWb,EAAML,KAAKG,cACrBZ,YAAcS,KAAKJ,QACpBI,KAAKT,YAAc2B,EACnBlB,KAAKT,YAAc2B,OAClBpB,eAAiBE,KAAKmB,YAAYnB,KAAKT,kBACvCY,SAAWE,EAChBC,OAAOC,sBAAsBP,KAAKQ,eAAeC,KAAKT,4CAE5CoB,OACNC,EAAaD,EAAKlB,WAAWoB,MAAM,YACD,IAA/BD,EAAW,GAAGE,QAAQ,KACzB,EACAF,EAAW,GAAK,IAAMA,EAAW,GAAGG,UAAU,EAAG,wCAGzDlB,OAAOmB,eAAeC,OAAO1C,EAAY2C,IAAK3C"}