{"version":3,"file":"simple-concept-network.umd.js","sources":["simple-concept-network.umd.js"],"sourcesContent":["import { html } from \"@polymer/polymer/polymer-element.js\";\nimport { afterNextRender } from \"@polymer/polymer/lib/utils/render-status.js\";\nimport { SimpleColors } from \"@lrnwebcomponents/simple-colors/simple-colors.js\";\nimport { HAXWiring } from \"@lrnwebcomponents/hax-body-behaviors/lib/HAXWiring.js\";\nimport { A11yBehaviors } from \"@lrnwebcomponents/a11y-behaviors/a11y-behaviors.js\";\n/**\n`simple-concept-network`\nA small but effective little data visualizer for topics surrounding\na central concept, much like the ELMS:LN snowflake icon.\n* @demo demo/index.html\n@microcopy - the mental model for this element\n - ELMS:LN - The ELMS: Learning Network \"snowflake\" is a network diagram\n*/\nclass SimpleConceptNetwork extends A11yBehaviors(SimpleColors) {\n  constructor() {\n    super();\n    import(\"@lrnwebcomponents/simple-concept-network/lib/simple-concept-network-node.js\");\n    afterNextRender(this, function() {\n      this.HAXWiring = new HAXWiring();\n      this.HAXWiring.setup(\n        SimpleConceptNetwork.haxProperties,\n        SimpleConceptNetwork.tag,\n        this\n      );\n    });\n  }\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: block;\n        }\n        :host([visualization=\"network\"]) simple-concept-network-node {\n          position: relative;\n        }\n        :host([visualization=\"network\"])\n          simple-concept-network-node:nth-child(1) {\n          top: 150px;\n          left: 176px;\n        }\n        :host([visualization=\"network\"])\n          simple-concept-network-node:nth-child(2) {\n          top: 0px;\n          left: 60px;\n        }\n        :host([visualization=\"network\"])\n          simple-concept-network-node:nth-child(3) {\n          top: 75px;\n          left: 60px;\n        }\n        :host([visualization=\"network\"])\n          simple-concept-network-node:nth-child(4) {\n          top: 230px;\n          left: -56px;\n        }\n        :host([visualization=\"network\"])\n          simple-concept-network-node:nth-child(5) {\n          top: 300px;\n          left: -282px;\n        }\n        :host([visualization=\"network\"])\n          simple-concept-network-node:nth-child(6) {\n          top: 230px;\n          left: -515px;\n        }\n        :host([visualization=\"network\"])\n          simple-concept-network-node:nth-child(7) {\n          top: 75px;\n          left: -630px;\n        }\n        :host([visualization=\"network\"]) {\n          display: block;\n          min-height: 450px;\n        }\n      </style>\n      <template is=\"dom-repeat\" items=\"[[nodes]]\" as=\"node\">\n        <simple-concept-network-node\n          accent-color$=\"[[node.color]]\"\n          colored-text$=\"[[coloredText]]\"\n          dark$=\"[[dark]]\"\n          visualization$=\"[[visualization]]\"\n          src$=\"[[node.src]]\"\n          icon$=\"[[node.icon]]\"\n          image$=\"[[node.image]]\"\n          label$=\"[[node.label]]\"\n          disabled$=\"[[node.disabled]]\"\n        ></simple-concept-network-node>\n      </template>\n    `;\n  }\n  static get tag() {\n    return \"simple-concept-network\";\n  }\n  static get observers() {\n    return [\"_valueChanged(nodes.*)\"];\n  }\n  static get properties() {\n    let props = {\n      /**\n       * Type of visualization\n       */\n      visualization: {\n        type: String,\n        reflectToAttribute: true,\n        value: \"3d\"\n      },\n      /**\n       * disabled status\n       */\n      disabled: {\n        type: Boolean\n      },\n      /**\n       * Apply color to text / icon instead of background.\n       */\n      coloredText: {\n        type: Boolean,\n        reflectToAttribute: true,\n        value: false\n      },\n      /**\n       * List of nodes to template stamp out\n       */\n      nodes: {\n        type: Array,\n        value: [],\n        notify: true\n      }\n    };\n    if (super.properties) {\n      props = Object.assign(props, super.properties);\n    }\n    return props;\n  }\n  static get haxProperties() {\n    return {\n      canScale: true,\n      canPosition: true,\n      canEditSource: false,\n      gizmo: {\n        title: \"Concept Network\",\n        description:\n          \"A simple way of visualizing data in a small network style configuration.\",\n        icon: \"lrn:network\",\n        color: \"blue\",\n        groups: [\"Image\", \"Visualization\"],\n        handles: [\n          {\n            type: \"image\",\n            source: \"nodes.source\",\n            title: \"nodes.label\",\n            link: \"nodes.src\",\n            description: \"nodes.description\"\n          }\n        ],\n        meta: {\n          author: \"LRNWebComponents\"\n        }\n      },\n      settings: {\n        quick: [],\n        configure: [\n          {\n            property: \"visualization\",\n            title: \"Visualization\",\n            description: \"How to visualize the concept\",\n            inputMethod: \"select\",\n            options: {\n              \"3d\": \"3d plain\",\n              network: \"network\",\n              flat: \"flat\"\n            }\n          },\n          {\n            property: \"dark\",\n            title: \"Dark\",\n            description: \"Use dark theme\",\n            inputMethod: \"boolean\",\n            icon: \"invert-colors\"\n          },\n          {\n            property: \"coloredText\",\n            title: \"Colored Text / Icon\",\n            description: \"Apply color to text / icon instead of background.\",\n            inputMethod: \"boolean\",\n            icon: \"editor:format-color-text\"\n          },\n          {\n            property: \"nodes\",\n            title: \"Node list\",\n            description: \"List of the items to present in the visual\",\n            inputMethod: \"array\",\n            properties: [\n              {\n                property: \"color\",\n                title: \"Node color\",\n                description: \"Select the accent color for this node\",\n                inputMethod: \"colorpicker\",\n                icon: \"editor:format-color-fill\"\n              },\n              {\n                property: \"icon\",\n                title: \"Icon\",\n                description: \"icon to display in the middle\",\n                inputMethod: \"iconpicker\",\n                options: []\n              },\n              {\n                property: \"label\",\n                title: \"Label\",\n                description: \"Label\",\n                inputMethod: \"textfield\"\n              },\n              {\n                property: \"image\",\n                title: \"Image\",\n                description: \"Image for the background\",\n                inputMethod: \"textfield\",\n                validationType: \"url\"\n              },\n              {\n                property: \"description\",\n                title: \"Description\",\n                description:\n                  \"A longer description that can be used as part of a modal presentation\",\n                inputMethod: \"textfield\"\n              },\n              {\n                property: \"src\",\n                title: \"Link\",\n                description: \"Label\",\n                inputMethod: \"textfield\",\n                validationType: \"url\"\n              }\n            ]\n          }\n        ],\n        advanced: []\n      }\n    };\n  }\n  /**\n   * Notice an answer has changed and update the DOM.\n   */\n  _valueChanged(e) {\n    for (var i in e.base) {\n      for (var j in e.base[i]) {\n        this.notifyPath(\"nodes.\" + i + \".\" + j);\n      }\n    }\n  }\n}\nwindow.customElements.define(SimpleConceptNetwork.tag, SimpleConceptNetwork);\nexport { SimpleConceptNetwork };\n"],"names":["SimpleConceptNetwork","afterNextRender","HAXWiring","setup","haxProperties","tag","this","A11yBehaviors","SimpleColors","html","props","visualization","type","String","reflectToAttribute","value","disabled","Boolean","coloredText","nodes","Array","notify","Object","assign","canScale","canPosition","canEditSource","gizmo","title","description","icon","color","groups","handles","source","link","meta","author","settings","quick","configure","property","inputMethod","options","network","flat","properties","validationType","advanced","e","i","base","j","notifyPath","window","customElements","define"],"mappings":"6mHAaMA,uOAGK,+EACPC,uBAAsB,gBACfC,UAAY,IAAIA,iBAChBA,UAAUC,MACbH,EAAqBI,cACrBJ,EAAqBK,IACrBC,gQAT2BC,gBAAcC,8DActCC,8CAgEA,iEAGA,CAAC,iEAGJC,EAAQ,CAIVC,cAAe,CACbC,KAAMC,OACNC,oBAAoB,EACpBC,MAAO,MAKTC,SAAU,CACRJ,KAAMK,SAKRC,YAAa,CACXN,KAAMK,QACNH,oBAAoB,EACpBC,OAAO,GAKTI,MAAO,CACLP,KAAMQ,MACNL,MAAO,GACPM,QAAQ,uCAIVX,EAAQY,OAAOC,OAAOb,8BAEjBA,8CAGA,CACLc,UAAU,EACVC,aAAa,EACbC,eAAe,EACfC,MAAO,CACLC,MAAO,kBACPC,YACE,2EACFC,KAAM,cACNC,MAAO,OACPC,OAAQ,CAAC,QAAS,iBAClBC,QAAS,CACP,CACErB,KAAM,QACNsB,OAAQ,eACRN,MAAO,cACPO,KAAM,YACNN,YAAa,sBAGjBO,KAAM,CACJC,OAAQ,qBAGZC,SAAU,CACRC,MAAO,GACPC,UAAW,CACT,CACEC,SAAU,gBACVb,MAAO,gBACPC,YAAa,+BACba,YAAa,SACbC,QAAS,MACD,WACNC,QAAS,UACTC,KAAM,SAGV,CACEJ,SAAU,OACVb,MAAO,OACPC,YAAa,iBACba,YAAa,UACbZ,KAAM,iBAER,CACEW,SAAU,cACVb,MAAO,sBACPC,YAAa,oDACba,YAAa,UACbZ,KAAM,4BAER,CACEW,SAAU,QACVb,MAAO,YACPC,YAAa,6CACba,YAAa,QACbI,WAAY,CACV,CACEL,SAAU,QACVb,MAAO,aACPC,YAAa,wCACba,YAAa,cACbZ,KAAM,4BAER,CACEW,SAAU,OACVb,MAAO,OACPC,YAAa,gCACba,YAAa,aACbC,QAAS,IAEX,CACEF,SAAU,QACVb,MAAO,QACPC,YAAa,QACba,YAAa,aAEf,CACED,SAAU,QACVb,MAAO,QACPC,YAAa,2BACba,YAAa,YACbK,eAAgB,OAElB,CACEN,SAAU,cACVb,MAAO,cACPC,YACE,wEACFa,YAAa,aAEf,CACED,SAAU,MACVb,MAAO,OACPC,YAAa,QACba,YAAa,YACbK,eAAgB,UAKxBC,SAAU,gDAOFC,OACP,IAAIC,KAAKD,EAAEE,SACT,IAAIC,KAAKH,EAAEE,KAAKD,QACdG,WAAW,SAAWH,EAAI,IAAME,wCAK7CE,OAAOC,eAAeC,OAAOxD,EAAqBK,IAAKL"}