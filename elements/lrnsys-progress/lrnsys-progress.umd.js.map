{"version":3,"file":"lrnsys-progress.umd.js","sources":["lib/lrnsys-progress-circle.js","lrnsys-progress.umd.js"],"sourcesContent":["/**\n * Copyright 2018 The Pennsylvania State University\n * @license Apache-2.0, see License.md for full text.\n */\nimport { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport { afterNextRender } from \"@polymer/polymer/lib/utils/render-status.js\";\nimport { pathFromUrl } from \"@polymer/polymer/lib/utils/resolve-url.js\";\nimport \"@lrnwebcomponents/circle-progress/circle-progress.js\";\nimport \"@polymer/paper-button/paper-button.js\";\nimport \"@polymer/paper-tooltip/paper-tooltip.js\";\nimport \"@polymer/paper-styles/paper-styles.js\";\nimport \"@polymer/paper-spinner/paper-spinner.js\";\nimport \"@polymer/neon-animation/neon-animation.js\";\nimport \"@polymer/iron-icons/iron-icons.js\";\n/**\n * `lrnsys-progress-circle`\n * `circle that the outline grows as the percentage ticks up`\n *\n */\nclass LrnsysProgressCircle extends PolymerElement {\n  static get template() {\n    return html`\n      <custom-style>\n        <style is=\"custom-style\" include=\"paper-material-styles\">\n          :host {\n            --paper-button-ink-color: var(\n              --lrnsys-progress-color,\n              var(--paper-green-500)\n            );\n            display: block;\n            transition: box-shadow\n                var(--lrnsys-progress-circle-transition, 0.5s) linear,\n              color var(--lrnsys-progress-circle-transition, 0.5s) ease-in-out,\n              background-color var(--lrnsys-progress-circle-transition, 0.5s)\n                ease-in-out;\n          }\n          :host([status=\"complete\"]) .circle-wrapper {\n            --paper-button-ink-color: var(\n              --lrnsys-progress-complete-color,\n              var(--paper-green-500)\n            );\n            box-shadow: 0px 0px 0px 0.16px\n              var(--lrnsys-progress-complete-color, var(--paper-green-900));\n          }\n          :host([status=\"disabled\"]) .circle-wrapper {\n            box-shadow: none;\n          }\n          :host([status=\"available\"]) .circle-wrapper {\n            box-shadow: none;\n          }\n          :host([active]) .circle-wrapper {\n            box-shadow: 0px 0px 0px 0.16px var(--google-grey-500, #555555);\n          }\n          .circle-wrapper {\n            border-radius: 100%;\n          }\n          .button {\n            margin: 0;\n            padding: 0;\n            display: flex;\n            min-width: 40px;\n            border-radius: 100%;\n          }\n          paper-button {\n            width: var(--lrnsys-progress-circle-size, 40px);\n            height: var(--lrnsys-progress-circle-size, 40px);\n          }\n          circle-progress {\n            margin: 0;\n            --circle-progress-width: var(--lrnsys-progress-circle-size, 40px);\n            --circle-progress-height: var(--lrnsys-progress-circle-size, 40px);\n            --circle-progress-stroke-color: var(\n              --lrnsys-progress-color,\n              var(--paper-green-500)\n            );\n            --circle-progress-bg-stroke-color: var(\n              --lrnsys-progress-container-color,\n              var(--google-grey-300)\n            );\n            --circle-progress-transition: 0.5s;\n            --circle-progress-stroke-linecap: square;\n            transition: color 0.5s ease-in-out,\n              background-color 0.5s ease-in-out;\n          }\n          paper-spinner {\n            display: block;\n            font-size: 16px;\n            width: var(--lrnsys-progress-spinner-size, 32px);\n            height: var(--lrnsys-progress-spinner-size, 32px);\n            position: absolute;\n            z-index: 1;\n            margin: 4px;\n            padding: 0;\n            visibility: visible;\n            opacity: 1;\n            transition: visibility 0.4s, opacity 0.4s ease;\n          }\n          paper-spinner.multi {\n            --paper-spinner-layer-1-color: var(--paper-purple-500);\n            --paper-spinner-layer-2-color: var(--paper-cyan-500);\n            --paper-spinner-layer-3-color: var(--paper-blue-grey-500);\n            --paper-spinner-layer-4-color: var(--paper-amber-500);\n          }\n          .transition {\n            opacity: 0.4;\n            width: calc(var(--lrnsys-progress-icon-size, 24px) - 8px);\n            height: calc(var(--lrnsys-progress-icon-size, 24px) - 8px);\n          }\n          iron-icon {\n            visibility: visible;\n            opacity: 1;\n            transition: width 0.1s linear, height 0.1s linear,\n              visibility 0.4s ease, opacity 0.4s ease;\n            width: var(--lrnsys-progress-icon-size, 24px);\n            height: var(--lrnsys-progress-icon-size, 24px);\n          }\n          .disabled {\n            background-color: var(\n              --lrnsys-progress-disabled-color,\n              var(--google-grey-500)\n            );\n            color: white;\n          }\n          .loading {\n            background-color: white;\n            color: black;\n          }\n          .finished iron-icon:not(.activeIcon) {\n            width: calc(var(--lrnsys-progress-icon-size, 24px) - 8px);\n            height: calc(var(--lrnsys-progress-icon-size, 24px) - 8px);\n          }\n          .available {\n            background-color: var(\n              --lrnsys-progress-active-color,\n              var(--google-grey-300)\n            );\n            color: var(\n              --lrnsys-progress-active-text-color,\n              var(--google-grey-500)\n            );\n          }\n          .activeIcon {\n            color: black;\n          }\n          .complete .activeIcon {\n            color: white;\n          }\n          :host([active]) .complete .activeIcon,\n          :host([active]) .finished .activeIcon {\n            color: black;\n          }\n          .complete,\n          .finished {\n            background-color: var(\n              --lrnsys-progress-container-color,\n              var(--paper-green-500)\n            );\n            color: white;\n          }\n          :host([active]) circle-progress {\n            background-color: white;\n            color: black;\n          }\n          .listview-title {\n            font-size: 16px;\n            padding: 0;\n            margin: 0;\n          }\n          .description-content {\n            font-size: 8px;\n            font-style: italic;\n          }\n          .circle-wrapper {\n            display: inline-block;\n          }\n          .listview {\n            height: 32px;\n            padding: 4px 0;\n            margin: 0;\n            vertical-align: top;\n          }\n          .link {\n            height: 40px;\n            width: 100%;\n          }\n          :host([list-view]) .button {\n            margin: 0;\n            padding: 0;\n            display: block;\n            min-width: 40px;\n            border-radius: 0;\n          }\n        </style>\n      </custom-style>\n      <paper-tooltip\n        hidden$=\"[[!toolTip]]\"\n        for=\"button\"\n        position=\"bottom\"\n        offset=\"8\"\n        animation-delay=\"0\"\n      >\n        [[label]]\n      </paper-tooltip>\n      <paper-button\n        id=\"button\"\n        class=\"button\"\n        disabled$=\"[[disabled]]\"\n        title=\"[[label]]\"\n      >\n        <span class=\"circle-wrapper\">\n          <paper-spinner\n            active$=\"[[loading]]\"\n            hidden$=\"[[!loading]]\"\n            class=\"multi\"\n            alt$=\"Loading content for [[label]]\"\n          ></paper-spinner>\n          <circle-progress\n            class$=\"[[status]]\"\n            value=\"[[value]]\"\n            max=\"[[max]]\"\n            stroke-width=\"[[strokeWidth]]\"\n            angle=\"180\"\n          >\n            <iron-icon\n              id=\"icon\"\n              icon=\"[[activeIcon]]\"\n              hidden$=\"[[!activeIcon]]\"\n            ></iron-icon>\n            <slot name=\"image\"></slot>\n          </circle-progress>\n        </span>\n        <span hidden$=\"[[!listView]]\" id=\"listview\" class=\"listview\">\n          <h3 class=\"listview-title\">[[label]]</h3>\n          <div class=\"description-content\">\n            <slot name=\"description\"></slot> <slot></slot>\n          </div>\n        </span>\n      </paper-button>\n    `;\n  }\n  static get tag() {\n    return \"lrnsys-progress-circle\";\n  }\n  static get properties() {\n    return {\n      /**\n       * Current value.\n       */\n      value: {\n        type: Number,\n        value: 0,\n        notify: true,\n        reflectToAttribute: true,\n        observer: \"_testValueComplete\"\n      },\n      /**\n       * Whether to add a tooltip on hover.\n       */\n      toolTip: {\n        type: Boolean,\n        value: true,\n        reflectToAttribute: true\n      },\n      /**\n       * If this is in a list view, expand the output.\n       */\n      listView: {\n        type: Boolean,\n        value: true,\n        reflectToAttribute: true\n      },\n      /**\n       * Icon.\n       */\n      icon: {\n        type: String,\n        value: \"icons:description\",\n        reflectToAttribute: true\n      },\n      /**\n       * Special icon to use when the item has been completed.\n       */\n      iconComplete: {\n        type: String,\n        value: \"icons:description\",\n        reflectToAttribute: true\n      },\n      /**\n       * Loading icon\n       */\n      loadingIcon: {\n        type: String,\n        value: \"hourglass-full\",\n        reflectToAttribute: true\n      },\n      /**\n       * Finished icon\n       */\n      finishedIcon: {\n        type: String,\n        value: \"thumb-up\",\n        reflectToAttribute: true\n      },\n      /**\n       * Current value.\n       */\n      activeIcon: {\n        type: String,\n        notify: true,\n        computed: \"_getActiveIcon(icon, iconComplete, status)\"\n      },\n      /**\n       * Array position within a larger body of items.\n       */\n      step: {\n        type: Number,\n        value: 0,\n        reflectToAttribute: true\n      },\n      /**\n       * If this item is active or not in the larger list\n       */\n      active: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true,\n        notify: true\n      },\n      /**\n       * Status of the progression.\n       * Possible values are disabled, loading, available, complete\n       */\n      status: {\n        type: String,\n        value: \"available\",\n        reflectToAttribute: true,\n        notify: true,\n        observer: \"_statusChange\"\n      },\n      /**\n       * Correctly disable the button if it's status is such.\n       */\n      disabled: {\n        type: Boolean,\n        computed: \"_disableStatus(status)\"\n      },\n      /**\n       * Calculate if something is in a loading status which invokes a swirl.\n       */\n      loading: {\n        type: Boolean,\n        computed: \"_loadingStatus(status)\"\n      },\n      /**\n       * Boolean to invoke \"finished\" state. Useful for the last circle\n       * in a series.\n       */\n      finished: {\n        type: Boolean,\n        computed: \"_finishedStatus(status)\"\n      },\n      /**\n       * Max progression for doing math against.\n       */\n      max: {\n        type: String,\n        reflectToAttribute: true\n      },\n      /**\n       * Internal property to ensure we only ding 1x\n       */\n      __chimed: {\n        type: Boolean,\n        value: false\n      },\n      /**\n       * Internal property to ensure we only finish 1x\n       */\n      __finishchimed: {\n        type: Boolean,\n        value: false\n      },\n      /**\n       * URL to link to on click.\n       */\n      url: {\n        type: String,\n        value: \"#\",\n        reflectToAttribute: true\n      },\n      /**\n       * Data url to bubble up for more advanced implementations.\n       */\n      dataUrl: {\n        type: String,\n        value: false,\n        reflectToAttribute: true\n      },\n      /**\n       * Stroke width.\n       */\n      strokeWidth: {\n        type: Number,\n        value: 4\n      },\n      /**\n       * Tracks if focus state is applied for element consistency\n       * when dealing with focus vs hover states.\n       */\n      focusState: {\n        type: Boolean,\n        value: false\n      },\n      /**\n       * Play sound status; if this should play sound\n       * when it hits certain milestones or not.\n       */\n      playSound: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true\n      },\n      /**\n       * Play sound at end; if this should play sound\n       * when it hits certain milestones or not.\n       */\n      playFinishSound: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true\n      },\n      /**\n       * Play sound on complete.\n       */\n      completeSound: {\n        type: String,\n        value:\n          pathFromUrl(decodeURIComponent(import.meta.url)) +\n          \"assets/complete.mp3\",\n        reflectToAttribute: true\n      },\n      /**\n       * Play sound on complete.\n       */\n      finishedSound: {\n        type: String,\n        value:\n          pathFromUrl(decodeURIComponent(import.meta.url)) +\n          \"assets/finished.mp3\",\n        reflectToAttribute: true\n      },\n      /**\n       * Fire and track milestones towards completion state.\n       */\n      _bubbleProgress: {\n        type: Object,\n        value: {\n          \"25\": false,\n          \"50\": false,\n          \"75\": false\n        }\n      }\n    };\n  }\n\n  /**\n   * Ready state\n   */\n  ready() {\n    super.ready();\n    // seems odd but if we don't do this we can get issues with\n    // this field being unified across all circles when really\n    // we have to track this state per circle.\n    this._bubbleProgress = {\n      \"25\": false,\n      \"50\": false,\n      \"75\": false\n    };\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    afterNextRender(this, function() {\n      this.addEventListener(\"click\", this.tapEventOn.bind(this));\n      this.addEventListener(\"mouseover\", this.focusOn.bind(this));\n      this.addEventListener(\"mouseout\", this.focusOff.bind(this));\n      this.addEventListener(\"focused-changed\", this.focusEvent.bind(this));\n    });\n  }\n  disconnectedCallback() {\n    this.removeEventListener(\"click\", this.tapEventOn.bind(this));\n    this.removeEventListener(\"mouseover\", this.focusOn.bind(this));\n    this.removeEventListener(\"mouseout\", this.focusOff.bind(this));\n    this.removeEventListener(\"focused-changed\", this.focusEvent.bind(this));\n    super.disconnectedCallback();\n  }\n  /**\n   * Test if the value = max meaning that we hit complete from available\n   */\n  _testValueComplete(newValue, oldValue) {\n    // ensure we were previously available before marking complete\n    // this way we don't conflict with the finished state which can\n    // only be set from outside the circle as the circle doesn't\n    // know how many items are in the set\n    if (newValue >= this.max && this.status == \"available\") {\n      this.status = \"complete\";\n    }\n    // add events for certain mile stones; this has to be in reverse order\n    // otherwise we could actuall be passing 75 but it was at 0. This allows\n    // for jumping ahead and not triggering 25/50/75 all at once and preventing\n    // over reported percentages upstream\n    else if (newValue / this.max >= 0.75 && !this._bubbleProgress[\"75\"]) {\n      this.dispatchEvent(\n        new CustomEvent(\"node-percent-milestone\", {\n          bubbles: true,\n          cancelable: true,\n          composed: true,\n          detail: { percentage: 75 }\n        })\n      );\n      this._bubbleProgress[\"75\"] = true;\n    } else if (newValue / this.max >= 0.5 && !this._bubbleProgress[\"50\"]) {\n      this.dispatchEvent(\n        new CustomEvent(\"node-percent-milestone\", {\n          bubbles: true,\n          cancelable: true,\n          composed: true,\n          detail: { percentage: 50 }\n        })\n      );\n      this._bubbleProgress[\"50\"] = true;\n    } else if (newValue / this.max >= 0.25 && !this._bubbleProgress[\"25\"]) {\n      this.dispatchEvent(\n        new CustomEvent(\"node-percent-milestone\", {\n          bubbles: true,\n          cancelable: true,\n          composed: true,\n          detail: { percentage: 25 }\n        })\n      );\n      this._bubbleProgress[\"25\"] = true;\n    }\n  }\n  /**\n   * Focus event for UX consistency.\n   */\n  focusEvent(e) {\n    // see if it has hover classes\n    if (!this.disabled && this.status != \"loading\") {\n      // focus shows focus\n      if (this.focusState) {\n        // force icon to be set to real one and class added\n        this.$.icon.icon = this.icon;\n        this.$.icon.classList.add(\"activeIcon\");\n      } else {\n        // if complete set it back to what it was\n        if (this.status == \"complete\" || this.status == \"finished\") {\n          this.$.icon.icon = this.activeIcon;\n        }\n        // drop the class for active step\n        this.$.icon.classList.remove(\"activeIcon\");\n      }\n      this.focusState = !this.focusState;\n    }\n  }\n  /**\n   * Focus event for UX consistency.\n   */\n  focusOn(e) {\n    // see if it has hover classes\n    if (!this.disabled && this.status != \"loading\") {\n      // force icon to be set to real one and class added\n      this.$.icon.icon = this.icon;\n      this.$.icon.classList.add(\"activeIcon\");\n    }\n  }\n  /**\n   * Focus event for UX consistency.\n   */\n  focusOff(e) {\n    // see if it has hover classes\n    if (!this.disabled && this.status != \"loading\") {\n      // if complete set it back to what it was\n      if (this.status == \"complete\" || this.status == \"finished\") {\n        this.$.icon.icon = this.activeIcon;\n      }\n      // drop the class for active step\n      this.$.icon.classList.remove(\"activeIcon\");\n    }\n  }\n  /**\n   * Tapped on the item.\n   */\n  tapEventOn(e) {\n    let target = e.target;\n    this.dispatchEvent(\n      new CustomEvent(\"node-is-active\", {\n        bubbles: true,\n        cancelable: true,\n        composed: true,\n        detail: { target }\n      })\n    );\n  }\n  /**\n   * Calculate which icon to present.\n   */\n  _getActiveIcon(icon, iconComplete, status) {\n    if (typeof icon !== typeof undefined) {\n      var tmp = icon;\n      // support for a loading icon while loading\n      if (status == \"loading\") {\n        tmp = this.loadingIcon;\n        this.$.icon.classList.add(\"transition\");\n      } else if (status == \"finished\") {\n        tmp = this.finishedIcon;\n      } else if (\n        status == \"complete\" &&\n        typeof iconComplete !== typeof undefined\n      ) {\n        if (this.playSound && !this.__chimed) {\n          this._playSound();\n        }\n        tmp = iconComplete;\n      } else {\n        this.$.icon.classList.remove(\"transition\");\n      }\n      return tmp;\n    }\n    return false;\n  }\n\n  /**\n   * Play the sound effect.\n   */\n  _playSound() {\n    // calculate sound to use and ensure it only ever happens once\n    // via the __chimed flag\n    if (this.status == \"complete\") {\n      window.audio = new Audio(this.completeSound);\n      this.__chimed = true;\n    } else if (this.status == \"finished\") {\n      window.audio = new Audio(this.finishedSound);\n      this.__finishchimed = true;\n    } else {\n      // shouldn't be possible\n      window.audio = new Audio();\n    }\n    window.audio.play();\n  }\n  /**\n   * Calculate loading based on the status of the item.\n   */\n  _loadingStatus(status) {\n    if (status == \"loading\") {\n      return true;\n    }\n    return false;\n  }\n  /**\n   * Calculate loading based on the status of the item.\n   */\n  _finishedStatus(status) {\n    if (status == \"finished\") {\n      if (this.playFinishSound && !this.__finishchimed) {\n        this._playSound();\n      }\n      return true;\n    }\n    return false;\n  }\n  /**\n   * Notice when state changes to fire up an event for others to respond to.\n   */\n  _statusChange(newValue, oldValue) {\n    // verify this isn't loading up\n    if (typeof oldValue !== typeof undefined && newValue !== oldValue) {\n      this.dispatchEvent(\n        new CustomEvent(\"node-status-change\", {\n          bubbles: true,\n          cancelable: true,\n          composed: true,\n          detail: { status: newValue }\n        })\n      );\n    }\n  }\n  /**\n   * Calculate disable based on the status of the item.\n   */\n  _disableStatus(status) {\n    if (status == \"disabled\") {\n      return true;\n    }\n    return false;\n  }\n}\nwindow.customElements.define(LrnsysProgressCircle.tag, LrnsysProgressCircle);\nexport { LrnsysProgressCircle };\n","/**\n * Copyright 2018 The Pennsylvania State University\n * @license Apache-2.0, see License.md for full text.\n */\nimport { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport { afterNextRender } from \"@polymer/polymer/lib/utils/render-status.js\";\nimport { pathFromUrl } from \"@polymer/polymer/lib/utils/resolve-url.js\";\nimport \"@polymer/paper-progress/paper-progress.js\";\nimport \"./lib/lrnsys-progress-circle.js\";\n/**\n * `lrnsys-progress`\n * `track progression as a circle and series of circles`\n *\n * @demo demo/index.html\n * @microcopy\n *  - node / circle - A progress circle on the line\n *  - nodes / items - the list of items in the progress bar\n *  - bubble - reserved for when events fire out of an element or value is tracking events\n *  - percentage - amount complete either in the bar or the nodes themselves\n *  - bar - the underlayed bar that's tracking overall progression\n */\nclass LrnsysProgress extends PolymerElement {\n  static get template() {\n    return html`\n      <style include=\"paper-material-styles\">\n        :host {\n          display: block;\n          margin-top: 24px;\n        }\n        :host([size=\"tiny\"]) {\n          font-size: 12.8px;\n        }\n        :host([size=\"small\"]) {\n          font-size: 19.2px;\n        }\n        :host([size=\"medium\"]) {\n          font-size: 25.6px;\n        }\n        :host([size=\"large\"]) {\n          font-size: 44.8px;\n        }\n        :host([size=\"x-large\"]) {\n          font-size: 64px;\n        }\n        :host([size=\"epic\"]) {\n          font-size: 96px;\n        }\n        #circle-container {\n          display: flex;\n          justify-content: space-between;\n          margin: -24px 0 0 0;\n          padding: 0;\n          list-style: none;\n        }\n        .progress-title {\n          position: absolute !important;\n          clip: rect(1px 1px 1px 1px); /* IE6, IE7 */\n          clip: rect(1px, 1px, 1px, 1px);\n          overflow: hidden;\n          height: 1px;\n        }\n        paper-progress {\n          --paper-progress-height: 8px;\n          --paper-progress-transition-duration: 0.5s;\n          --paper-progress-transition-timing-function: ease;\n          --paper-progress-transition-delay: 0.4s;\n          width: 100%;\n        }\n        /* required to get the box shadow above the progress bar */\n        .circle-node {\n          z-index: 1;\n        }\n        ul#circle-container li.circle-node {\n          list-style-type: none;\n        }\n\n        :host([vertical]) {\n          width: max-content;\n        }\n        :host([vertical]) #circle-container {\n          display: block;\n        }\n        :host([vertical]) paper-progress {\n          display: none !important;\n        }\n        :host([vertical]) lrnsys-progress-circle {\n          margin: 16px 0;\n          padding: 0;\n          width: 100%;\n        }\n\n        lrnsys-progress-circle {\n          width: 40px;\n          height: 40px;\n          --lrnsys-progress-circle-size: 40px;\n          --lrnsys-progress-spinner-size: 32px;\n          --lrnsys-progress-icon-size: 24px;\n          --paper-spinner-stroke-width: 1.2px;\n        }\n      </style>\n\n      <iron-ajax\n        id=\"ajax\"\n        url=\"[[activeNodeURL]]\"\n        handle-as=\"json\"\n        last-error=\"{{nodeDataError}}\"\n        on-response=\"handleNodeResponse\"\n      ></iron-ajax>\n      <h3 class=\"progress-title\">[[title]]</h3>\n      <paper-progress\n        id=\"progress\"\n        value=\"[[overallPercentage]]\"\n      ></paper-progress>\n      <ul id=\"circle-container\">\n        <template is=\"dom-repeat\" items=\"[[items]]\" as=\"item\">\n          <li class=\"circle-node\">\n            <lrnsys-progress-circle\n              play-finish-sound=\"[[soundFinish]]\"\n              play-sound=\"[[sound]]\"\n              complete-sound=\"[[completeSound]]\"\n              finished-sound=\"[[finishedSound]]\"\n              active=\"[[_isActive(index, active)]]\"\n              step=\"[[index]]\"\n              label=\"[[item.title]]\"\n              icon=\"[[item.metadata.icon]]\"\n              icon-complete=\"[[item.metadata.iconComplete]]\"\n              data-url=\"[[item.metadata.dataUrl]]\"\n              url=\"[[item.location]]\"\n              status=\"[[item.metadata.status]]\"\n              value=\"[[item.metadata.value]]\"\n              max=\"[[item.metadata.max]]\"\n              stroke-width=\"[[strokeWidth]]\"\n              tool-tip=\"[[!vertical]]\"\n              list-view=\"[[vertical]]\"\n              class\\$=\"[[size]]\"\n            >\n              <span slot=\"description\">[[item.description]]</span>\n            </lrnsys-progress-circle>\n          </li>\n        </template>\n      </ul>\n    `;\n  }\n  static get tag() {\n    return \"lrnsys-progress\";\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    afterNextRender(this, function() {\n      this.addEventListener(\n        \"node-is-active\",\n        this._bubbleUpChangeActive.bind(this)\n      );\n      this.addEventListener(\n        \"node-status-change\",\n        this._statusChanged.bind(this)\n      );\n    });\n  }\n  disconnectedCallback() {\n    this.removeEventListener(\n      \"node-is-active\",\n      this._bubbleUpChangeActive.bind(this)\n    );\n    this.removeEventListener(\n      \"node-status-change\",\n      this._statusChanged.bind(this)\n    );\n    super.disconnectedCallback();\n  }\n  static get properties() {\n    return {\n      /**\n       * Disable internal ajax calls as something is handling them above.\n       */\n      disableAjaxCalls: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true\n      },\n      /**\n       * Items to display to visualize the progression.\n       */\n      items: {\n        type: Array,\n        value: [],\n        notify: true,\n        observer: \"_itemsChanged\"\n      },\n      /**\n       * Play sounds whenever an item is complete.\n       * This can get pretty annoying though unless the items\n       * won't be completed for awhile.\n       */\n      sound: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true\n      },\n      /**\n       * Play sound when the user finishes the progression. This\n       * could also be annoying but far less so :)\n       */\n      soundFinish: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true\n      },\n      /**\n       * Play sound on complete.\n       */\n      completeSound: {\n        type: String,\n        value:\n          pathFromUrl(decodeURIComponent(import.meta.url)) +\n          \"lib/assets/complete.mp3\",\n        reflectToAttribute: true\n      },\n      /**\n       * Play sound on complete.\n       */\n      finishedSound: {\n        type: String,\n        value:\n          pathFromUrl(decodeURIComponent(import.meta.url)) +\n          \"lib/assets/finished.mp3\",\n        reflectToAttribute: true\n      },\n      /**\n       * Title of this progression, primarily for accessibility.\n       */\n      title: {\n        type: String,\n        value: \"Steps to completion\",\n        reflectToAttribute: true\n      },\n      /**\n       * Items displayed at specific points on the progression.\n       * These aren't filled up but place points along the progression\n       * which can help people see where they are relative to other\n       * factors such as % complete as a tick mark or icon.\n       */\n      keyItems: {\n        type: Array,\n        value: [],\n        notify: true\n      },\n      /**\n       * ID of the active item.\n       */\n      active: {\n        type: Number,\n        value: 0,\n        notify: true,\n        reflectToAttribute: true,\n        observer: \"_activeChanged\"\n      },\n      /**\n       * Whether to automatically make disabled items available\n       * or not when the previous one was just complete.\n       */\n      progressiveUnlock: {\n        type: Boolean,\n        value: true,\n        reflectToAttribute: true,\n        notify: true\n      },\n      /**\n       * State of progress in the current progression\n       */\n      state: {\n        type: String,\n        value: null,\n        reflectToAttribute: true,\n        observer: \"_reportState\"\n      },\n      /**\n       * How far is the user through this series of items.\n       */\n      overallPercentage: {\n        type: Number,\n        computed: \"_overallPercentageCompute(items, active)\",\n        reflectToAttribute: true\n      },\n      /**\n       * Responses for each item.\n       */\n      _responseList: {\n        type: Array,\n        value: []\n      },\n      /**\n       * Active response from the node selected.\n       */\n      activeNodeResponse: {\n        type: String,\n        value: \"\",\n        observer: \"_activeResponseChanged\"\n      },\n      /**\n       * Active response from the node selected.\n       */\n      manifest: {\n        type: Object,\n        value: {},\n        notify: true,\n        observer: \"_manifestChanged\"\n      },\n      /**\n       * Error.\n       */\n      nodeDataError: {\n        type: Object,\n        value: [],\n        observer: \"_handleNodeError\"\n      },\n      /**\n       * Flag to be vertical instead of horizontal.\n       */\n      vertical: {\n        type: Boolean,\n        value: false\n      },\n      /**\n       * Size to make everything, small, medium, large, and epic\n       * are available class names; default medium.\n       */\n      size: {\n        type: String,\n        value: \"medium\",\n        notify: true,\n        reflectToAttribute: true\n      },\n      /**\n       * Calculate width based on the size since we have to convert em to px.\n       */\n      strokeWidth: {\n        type: Number,\n        computed: \"_getStrokeWidth(size)\"\n      }\n    };\n  }\n  /**\n   * Set an appropriate stroke width based on size of the element.\n   * This is because it's a hard pixel value when the rest of our\n   * sizing is based on em's\n   */\n  _getStrokeWidth(size) {\n    var width = 4;\n    if (size == \"tiny\") {\n      width = 3;\n    } else if (size == \"small\") {\n      width = 4;\n    } else if (size == \"medium\") {\n      width = 5;\n    } else if (size == \"large\") {\n      width = 6;\n    } else if (size == \"x-large\") {\n      width = 7;\n    } else if (size == \"epic\") {\n      width = 8;\n    }\n\n    return width;\n  }\n\n  /**\n   * Fire event that state has changed with what the statement is.\n   * This gives a readable name to what the state is of the progress bar\n   * as well as access to the full item that triggered the state change.\n   */\n  _reportState(newValue, oldValue) {\n    // help avoid initial ready state being null\n    if (newValue != null && this.items.length > 0) {\n      this.dispatchEvent(\n        new CustomEvent(\"progress-state-change\", {\n          bubbles: true,\n          cancelable: true,\n          composed: true,\n          detail: {\n            state: this.state,\n            active: this.items[this.active]\n          }\n        })\n      );\n    }\n  }\n\n  /**\n   * Notice items have changed; only worry about if the count changes\n   * though since other oberservers handle downstream mutation\n   */\n  _itemsChanged(newValue, oldValue) {\n    // strange but this is effectively the same as \"ready\" except the ready\n    // state invokes potentially without items while this one will only\n    // match a case where there was no values and now we have one\n    if (\n      typeof oldValue !== typeof undefined &&\n      typeof newValue !== typeof undefined &&\n      newValue.length != oldValue.length &&\n      typeof this._responseList[this.active] === typeof undefined\n    ) {\n      newValue[this.active].metadata.status = \"loading\";\n      this.set(\"items.\" + this.active + \".metadata.status\", \"loading\");\n      this.notifyPath(\"items.\" + this.active + \".metadata.status\");\n      // becasue this is so early in bootstrap of the element we\n      // won't be able to detect the initial loading event\n      if (\n        typeof newValue[this.active].dataUrl !== typeof undefined &&\n        !this.disableAjaxCalls\n      ) {\n        this.$.ajax.url = newValue[this.active].dataUrl;\n        this.$.ajax.generateRequest();\n      } else {\n        setTimeout(() => {\n          newValue[this.active].metadata.status = \"available\";\n          this.set(\"items.\" + this.active + \".metadata.status\", \"available\");\n          this.notifyPath(\"items.\" + this.active + \".metadata.status\");\n          this._responseList[this.active] = {};\n          this.activeNodeResponse = this._responseList[this.active];\n        }, 1200);\n      }\n    }\n  }\n\n  /**\n   * Simple boolean for whatever is active currently.\n   */\n  _isActive(index, active) {\n    return index === active;\n  }\n\n  /**\n   * Active Response changed; bubble it up.\n   */\n  _activeResponseChanged(value) {\n    this.dispatchEvent(\n      new CustomEvent(\"progress-response-loaded\", {\n        bubbles: true,\n        cancelable: true,\n        composed: true,\n        detail: { response: value }\n      })\n    );\n  }\n\n  /**\n   * Notice event from the nodes themselves\n   * and set active based on a node bubbling up an event\n   * that says \"Hey I am active now!\"\n   */\n  _bubbleUpChangeActive(e) {\n    // changing active will kick off events internally\n    this.active = e.detail.target.step;\n    this.dispatchEvent(\n      new CustomEvent(\"json-outline-schema-active-item-changed\", {\n        bubbles: true,\n        cancelable: true,\n        composed: true,\n        detail: this.items[this.active]\n      })\n    );\n  }\n  /**\n   * Allow for JSON Outline Schema manifest structure changes\n   */\n  _manifestChanged(newValue, oldValue) {\n    if (newValue) {\n      this.set(\"items\", newValue.items);\n      this.notifyPath(\"items.*\");\n    }\n  }\n  /**\n   * Active item has changed, set the rest of the data to match.\n   */\n  _activeChanged(newValue, oldValue) {\n    // bubble up event from state being set\n    this.state = \"active item is \" + this.active;\n    this.items.forEach((element, index, array) => {\n      // if the current item is disabled, check the 1 prior to it if we can\n      if (this.items[index].metadata.status == \"disabled\") {\n        // do nothing, it's disabled unless....\n        if (\n          index != 0 &&\n          this.progressiveUnlock &&\n          this.items[index - 1].metadata.status == \"complete\"\n        ) {\n          this.items[index].metadata.status = \"loading\";\n          this.set(\"items.\" + index + \".metadata.status\", \"loading\");\n          this.notifyPath(\"items.\" + index + \".metadata.status\");\n        }\n      }\n      // or if our value is at max AND it's the last item in the list\n      else if (\n        this.items[index].metadata.value >= this.items[index].metadata.max &&\n        index == this.items.length - 1\n      ) {\n        this.items[index].metadata.status = \"finished\";\n        this.set(\"items.\" + index + \".metadata.status\", \"finished\");\n        this.notifyPath(\"items.\" + index + \".metadata.status\");\n      }\n      // or if we're just at max then mark us complete\n      else if (\n        this.items[index].metadata.value >= this.items[index].metadata.max\n      ) {\n        this.items[index].metadata.status = \"complete\";\n        this.set(\"items.\" + index + \".metadata.status\", \"complete\");\n        this.notifyPath(\"items.\" + index + \".metadata.status\");\n      }\n      // or if the index is the currently active item\n      else if (index == this.active) {\n        // see if we have the data for it already otherwise trigger loading\n        if (typeof this._responseList[index] === typeof undefined) {\n          this.items[index].metadata.status = \"loading\";\n          this.set(\"items.\" + index + \".metadata.status\", \"loading\");\n          this.notifyPath(\"items.\" + index + \".metadata.status\");\n        }\n        // if we already had a response, then mark available\n        else {\n          this.activeNodeResponse = this._responseList[index];\n          this.items[index].metadata.status = \"available\";\n          this.set(\"items.\" + index + \".metadata.status\", \"available\");\n          this.notifyPath(\"items.\" + index + \".metadata.status\");\n        }\n      } else {\n        // we didn't match any cases, just leave it active\n        this.items[index].metadata.status = \"available\";\n        this.set(\"items.\" + index + \".metadata.status\", \"available\");\n        this.notifyPath(\"items.\" + index + \".metadata.status\");\n      }\n    });\n  }\n\n  /**\n   * Listen for the state of anything below to change.\n   */\n  _statusChanged(e) {\n    // we are in loading state so go load data and let the response\n    // dictate what state we reach after that\n    if (e.target.status == \"loading\") {\n      if (\n        typeof this.items[this.active].metadata.dataUrl !== typeof undefined &&\n        !this.disableAjaxCalls\n      ) {\n        this.$.ajax.url = this.items[this.active].metadata.dataUrl;\n        this.$.ajax.generateRequest();\n      } else {\n        setTimeout(() => {\n          this.items[this.active].metadata.status = \"available\";\n          this.set(\"items.\" + this.active + \".metadata.status\", \"available\");\n          this.notifyPath(\"items.\" + this.active + \".metadata.status\");\n          this._responseList[this.active] = {};\n          this.activeNodeResponse = this._responseList[this.active];\n        }, 1500);\n      }\n    } else if (\n      e.target.status == \"complete\" &&\n      this.items.length === this.active + 1\n    ) {\n      setTimeout(() => {\n        this.items[this.active].metadata.status = \"finished\";\n        this.set(\"items.\" + this.active + \".metadata.status\", \"finished\");\n        this.notifyPath(\"items.\" + this.active + \".metadata.status\");\n      }, 100);\n    }\n  }\n\n  /**\n   * Response returned from triggering the Node's URL to fire to get a response.\n   */\n  handleNodeResponse(e) {\n    const detail = e.detail;\n    // this means that it was an internal path, fake \"loading\"\n    if (typeof detail.response === typeof null) {\n      setTimeout(() => {\n        this.items[this.active].metadata.status = \"available\";\n        this.set(\"items.\" + this.active + \".metadata.status\", \"available\");\n        this.notifyPath(\"items.\" + this.active + \".metadata.status\");\n        this._responseList[this.active] = detail.response;\n        this.activeNodeResponse = this._responseList[this.active];\n      }, 1500);\n    }\n    // valid response, pass it along for other things to use\n    else {\n      this.items[this.active].metadata.status = \"available\";\n      this.set(\"items.\" + this.active + \".metadata.status\", \"available\");\n      this.notifyPath(\"items.\" + this.active + \".metadata.status\");\n      this._responseList[this.active] = detail.response;\n      this.activeNodeResponse = this._responseList[this.active];\n    }\n  }\n\n  /**\n   * Weak support for error code being found\n   */\n  _handleNodeError(newValue, oldValue) {\n    if (\n      typeof oldValue !== typeof undefined &&\n      newValue != null &&\n      newValue.length != 0\n    ) {\n      // @todo, need support for a failed to load state; could be useful\n      // if we go into an offline capability in the future\n      this._responseList[this.active] = newValue;\n      this.activeNodeResponse = this._responseList[this.active];\n      // set available because we don't have a failed state\n      this.items[this.active].metadata.status = \"available\";\n      this.set(\"items.\" + this.active + \".metadata.status\", \"available\");\n      this.notifyPath(\"items.\" + this.active + \".metadata.status\");\n      // fire an event that this isn't really available so we know an issue occured\n      this.dispatchEvent(\n        new CustomEvent(\"node-load-failed\", {\n          bubbles: true,\n          cancelable: true,\n          composed: true,\n          detail: this.items[this.active]\n        })\n      );\n    }\n  }\n\n  /**\n   * Calculate the overall percentage competed.\n   * This forms the line that's connecting the steps.\n   */\n  _overallPercentageCompute(items, active) {\n    if (typeof items !== typeof undefined) {\n      this.$.progress.classList.add(\"transiting\");\n      return (active / (items.length - 1)) * 100;\n    }\n    return 0;\n  }\n\n  /**\n   * Change the percentage for the active item.\n   */\n  changePercentage(percentage, mode) {\n    var newp = 0;\n    // support for adding and removing percentage as well as setting\n    if (mode == \"add\") {\n      newp = this.items[this.active].metadata.value + percentage;\n    } else if (mode == \"subtract\") {\n      newp = this.items[this.active].metadata.value - percentage;\n    } else {\n      newp = percentage;\n    }\n    // after establishing the new percentage, make sure it's less then max\n    // if it's at or over max then we need to trigger events and state to change\n    if (newp >= this.items[this.active].metadata.max) {\n      if (this.items.length == this.active + 1) {\n        // fire an event change to indicate that this happened\n        this.state = \"finished\";\n        this.items[this.active].metadata.status = \"finished\";\n        this.set(\"items.\" + this.active + \".metadata.status\", \"finished\");\n        this.notifyPath(\"items.\" + this.active + \".metadata.status\");\n        // need to make sure finished happens prior to value set to 100\n        // otherwise this will kick off the circle to complete itself\n        this.items[this.active].metadata.value = this.items[\n          this.active\n        ].metadata.max;\n        this.set(\n          \"items.\" + this.active + \".metadata.value\",\n          this.items[this.active].metadata.max\n        );\n        this.notifyPath(\"items.\" + this.active + \".metadata.value\");\n      } else {\n        // set value = max which will automatically trigger complete in the circle\n        this.items[this.active].metadata.value = this.items[\n          this.active\n        ].metadata.max;\n        this.set(\n          \"items.\" + this.active + \".metadata.value\",\n          this.items[this.active].metadata.max\n        );\n        this.notifyPath(\"items.\" + this.active + \".metadata.value\");\n      }\n      // ensure we still have more items to go in the list\n      if (this.items.length > this.active + 1) {\n        // if we have progressive unlocking then set the next thing available\n        // assuming that the next thing is currently disabled and that we're not\n        // on the first item. OR, if we don't have a response for the current\n        // item in local storage then let's mark loading to kick off the calls\n        if (\n          (this.progressiveUnlock &&\n            this.items[this.active].metadata.status == \"complete\" &&\n            this.items[this.active + 1].metadata.status == \"disabled\") ||\n          typeof this._responseList[this.active + 1] === typeof undefined\n        ) {\n          this.items[this.active + 1].metadata.status = \"loading\";\n          this.set(\n            \"items.\" + (this.active + 1) + \".metadata.status\",\n            \"loading\"\n          );\n          this.notifyPath(\"items.\" + (this.active + 1) + \".metadata.status\");\n        }\n        // set state so it gets reported upstream in events\n        this.state = \"active item is \" + (this.active + 1);\n        // bump active ahead 1 because we still have more items in the list\n        this.active = this.active + 1;\n      }\n    } else {\n      this.items[this.active].metadata.value = newp;\n      this.set(\"items.\" + this.active + \".metadata.value\", newp);\n      this.notifyPath(\"items.\" + this.active + \".metadata.value\");\n    }\n  }\n\n  /**\n   * Modify items and update template binding correctly.\n   */\n  updateItems(op, item) {\n    var response = false;\n    if (op == \"push\") {\n      this.push(\"items\", item);\n      response = true;\n    } else if (op == \"pop\") {\n      response = this.pop(\"items\");\n    } else if (op == \"splice\") {\n      this.splice(\"items\", this.items.length, 0, item);\n      response = true;\n    }\n    // force active to reprocess\n    const active = this.active;\n    this.set(\"active\", 0);\n    this.set(\"active\", active);\n    this.notifyPath(\"active\");\n    return response;\n  }\n}\nwindow.customElements.define(LrnsysProgress.tag, LrnsysProgress);\nexport { LrnsysProgress };\n"],"names":["LrnsysProgressCircle","PolymerElement","_bubbleProgress","afterNextRender","this","addEventListener","tapEventOn","bind","focusOn","focusOff","focusEvent","removeEventListener","newValue","oldValue","max","status","dispatchEvent","CustomEvent","bubbles","cancelable","composed","detail","percentage","e","disabled","focusState","$","icon","classList","add","activeIcon","remove","target","iconComplete","_typeof","tmp","loadingIcon","finishedIcon","playSound","__chimed","_playSound","window","audio","Audio","completeSound","finishedSound","__finishchimed","play","playFinishSound","html","value","type","Number","notify","reflectToAttribute","observer","toolTip","Boolean","listView","String","computed","step","active","loading","finished","url","dataUrl","strokeWidth","pathFromUrl","decodeURIComponent","Object","customElements","define","tag","LrnsysProgress","_bubbleUpChangeActive","_statusChanged","size","width","items","length","state","_responseList","metadata","set","notifyPath","disableAjaxCalls","setTimeout","_this","activeNodeResponse","ajax","generateRequest","index","response","forEach","element","array","_this2","progressiveUnlock","_this3","_this4","progress","mode","newp","op","item","push","pop","splice","Array","sound","soundFinish","title","keyItems","overallPercentage","manifest","nodeDataError","vertical"],"mappings":"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"}