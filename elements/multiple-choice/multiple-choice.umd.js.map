{"version":3,"file":"multiple-choice.umd.js","sources":["multiple-choice.umd.js"],"sourcesContent":["import { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport { afterNextRender } from \"@polymer/polymer/lib/utils/render-status.js\";\nimport \"@polymer/polymer/lib/elements/dom-repeat.js\";\nimport \"@polymer/polymer/lib/elements/dom-if.js\";\nimport { SchemaBehaviors } from \"@lrnwebcomponents/schema-behaviors/schema-behaviors.js\";\nimport { HAXWiring } from \"@lrnwebcomponents/hax-body-behaviors/lib/HAXWiring.js\";\nimport \"@polymer/paper-toast/paper-toast.js\";\nimport \"@lrnwebcomponents/simple-colors/simple-colors.js\";\n/**\n * `multiple-choice`\n * `Ask the user a question from a set of possible answers.`\n * @demo demo/index.html\n */\nclass MultipleChoice extends SchemaBehaviors(PolymerElement) {\n  static get tag() {\n    return \"multiple-choice\";\n  }\n  constructor() {\n    super();\n    import(\"@polymer/iron-icons/iron-icons.js\");\n    import(\"@polymer/iron-icon/iron-icon.js\");\n    import(\"@polymer/paper-button/paper-button.js\");\n  }\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: block;\n          padding: 16px 16px 54px 16px;\n        }\n        .red {\n          background-color: var(--simple-colors-default-theme-red-8);\n        }\n        .green {\n          background-color: var(--simple-colors-default-theme-green-8);\n        }\n        h3 {\n          margin: 8px;\n        }\n        ul {\n          list-style: none;\n          padding: 0;\n          margin: 0;\n        }\n        ul li {\n          padding: 8px;\n        }\n        paper-radio-button {\n          padding: 8px;\n          display: block;\n        }\n        paper-checkbox {\n          padding: 8px;\n        }\n        iron-icon {\n          display: inline-flex;\n        }\n      </style>\n      <meta property=\"oer:assessing\" content\\$=\"[[relatedResource]]\" />\n      <h3 hidden\\$=\"[[hideTitle]]\">\n        <span property=\"oer:name\">[[title]]</span>\n      </h3>\n      <div>[[question]]</div>\n      <template is=\"dom-if\" if=\"[[singleOption]]\" restamp>\n        <paper-radio-group>\n          <template\n            is=\"dom-repeat\"\n            items=\"[[displayedAnswers]]\"\n            as=\"answer\"\n            mutable-data\n          >\n            <paper-radio-button\n              disabled\\$=\"[[disabled]]\"\n              property=\"oer:answer\"\n              name$=\"[[index]]\"\n              checked=\"{{answer.userGuess}}\"\n              >[[answer.label]]</paper-radio-button\n            >\n          </template>\n        </paper-radio-group>\n      </template>\n      <template is=\"dom-if\" if=\"[[!singleOption]]\" restamp>\n        <ul>\n          <template\n            is=\"dom-repeat\"\n            items=\"[[displayedAnswers]]\"\n            as=\"answer\"\n            mutable-data\n          >\n            <li>\n              <paper-checkbox\n                disabled\\$=\"[[disabled]]\"\n                property=\"oer:answer\"\n                checked=\"{{answer.userGuess}}\"\n                >[[answer.label]]</paper-checkbox\n              >\n            </li>\n          </template>\n        </ul>\n      </template>\n      <div hidden\\$=\"[[hideButtons]]\">\n        <paper-button\n          disabled\\$=\"[[disabled]]\"\n          raised=\"\"\n          on-click=\"_verifyAnswers\"\n          >[[checkLabel]]</paper-button\n        >\n        <paper-button\n          disabled\\$=\"[[disabled]]\"\n          raised=\"\"\n          on-click=\"resetAnswers\"\n          >[[resetLabel]]</paper-button\n        >\n      </div>\n      <paper-toast\n        id=\"toast\"\n        duration=\"6000\"\n        class\\$=\"fit-bottom [[__toastColor]]\"\n      >\n        [[__toastText]]\n        <iron-icon icon=\"[[__toastIcon]]\" style=\"margin-left:16px;\"></iron-icon>\n      </paper-toast>\n    `;\n  }\n  static get properties() {\n    return Object.assign(\n      {\n        /**\n         * Title\n         */\n        title: {\n          type: String,\n          value: \"\"\n        },\n        /**\n         * Support disabling interaction with the entire board\n         */\n        disabled: {\n          type: Boolean,\n          value: false\n        },\n        /**\n         * Simple option, otherwise allow multiple via checkbox\n         */\n        singleOption: {\n          type: Boolean,\n          value: false\n        },\n        /**\n         * Text of the label to check your answer\n         */\n        checkLabel: {\n          type: String,\n          value: \"Check answer\"\n        },\n        /**\n         * Text of the reset button\n         */\n        resetLabel: {\n          type: String,\n          value: \"Reset\"\n        },\n        /**\n         * Related Resource ID\n         */\n        relatedResource: {\n          type: String\n        },\n        /**\n         * Flag to hide the title\n         */\n        hideTitle: {\n          type: Boolean,\n          value: false\n        },\n        /**\n         * Question to ask\n         */\n        question: {\n          type: String,\n          value: \"\"\n        },\n        /**\n         * Array of possible answers\n         */\n        answers: {\n          type: Array,\n          value: [],\n          notify: true\n        },\n        /**\n         * Displayed Answer set.\n         */\n        displayedAnswers: {\n          type: Array,\n          computed: \"_computeDisplayedAnswers(answers, randomize)\",\n          observer: \"_valueChanged\",\n          notify: true\n        },\n        /**\n         * Correct answer text to display\n         */\n        correctText: {\n          type: String,\n          value: \"Great job!\"\n        },\n        /**\n         * Incorrect answer text to display\n         */\n        incorrectText: {\n          type: String,\n          value: \"Better luck next time!\"\n        },\n        /**\n         * Randomize the display of the answers\n         */\n        randomize: {\n          type: Boolean,\n          value: false,\n          reflectToAttribute: true\n        },\n        /**\n         * flag to hide buttons\n         */\n        hideButtons: {\n          type: Boolean,\n          value: false\n        }\n      },\n      super.properties\n    );\n  }\n  /**\n   * Notice an answer has changed and update the DOM.\n   */\n  _valueChanged(e) {\n    for (var i in e) {\n      for (var j in e[i]) {\n        this.notifyPath(\"displayedAnswers.\" + i + \".\" + j);\n      }\n    }\n  }\n  /**\n   * Reset user answers and shuffle the board again.\n   */\n  resetAnswers(e) {\n    this.$.toast.hide();\n    // loop and force all answers to false\n    for (var i in this.displayedAnswers) {\n      if (this.displayedAnswers[i].userGuess) {\n        this.displayedAnswers[i].userGuess = false;\n      }\n    }\n    setTimeout(() => {\n      const answers = this.answers;\n      this.set(\"answers\", []);\n      this.set(\"answers\", answers);\n    }, 100);\n  }\n\n  /**\n   * Return if the current answers are correct\n   */\n  checkAnswers() {\n    let gotRight = true;\n    // see that they got them all right\n    for (var i in this.displayedAnswers) {\n      if (\n        gotRight != false &&\n        this.displayedAnswers[i].correct &&\n        this.displayedAnswers[i].userGuess\n      ) {\n        gotRight = true;\n      } else if (\n        this.displayedAnswers[i].correct &&\n        !this.displayedAnswers[i].userGuess\n      ) {\n        gotRight = false;\n      } else if (\n        !this.displayedAnswers[i].correct &&\n        this.displayedAnswers[i].userGuess\n      ) {\n        gotRight = false;\n      }\n    }\n    return gotRight;\n  }\n  /**\n   * Verify the answers of the user based on their saying\n   * that they want to see how they did.\n   */\n  _verifyAnswers(e) {\n    let gotRight = this.checkAnswers();\n    // see if they got this correct based on their answers\n    if (gotRight) {\n      this.$.toast.hide();\n      this.__toastColor = \"green\";\n      this.__toastIcon = \"thumb-up\";\n      this.__toastText = this.correctText;\n      this.$.toast.show();\n    } else {\n      this.$.toast.hide();\n      this.__toastColor = \"red\";\n      this.__toastIcon = \"thumb-down\";\n      this.__toastText = this.incorrectText;\n      this.$.toast.show();\n    }\n    // start of data passing, this is a prototype atm\n    this.dispatchEvent(\n      new CustomEvent(\"user-engagement\", {\n        bubbles: true,\n        composed: true,\n        cancelable: false,\n        detail: { passed: gotRight }\n      })\n    );\n  }\n\n  /**\n   * Figure out the order of the answers which will be displayed\n   */\n  _computeDisplayedAnswers(answers, randomize) {\n    if (\n      typeof answers !== typeof undefined &&\n      answers != null &&\n      answers.length > 0 &&\n      randomize\n    ) {\n      let random = answers;\n      var currentIndex = random.length,\n        temporaryValue,\n        randomIndex;\n      // While there remain elements to shuffle...\n      while (0 !== currentIndex) {\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n        // And swap it with the current element.\n        temporaryValue = random[currentIndex];\n        random[currentIndex] = random[randomIndex];\n        random[randomIndex] = temporaryValue;\n      }\n      // @todo apply a random sort to the answers array\n      return random;\n    } else {\n      return answers;\n    }\n  }\n  static get haxProperties() {\n    return {\n      canScale: true,\n      canPosition: true,\n      canEditSource: false,\n      gizmo: {\n        title: \"Multiple choice\",\n        description: \"Multiple choice self check\",\n        icon: \"icons:list\",\n        color: \"purple\",\n        groups: [\"Instructional\"],\n        handles: [],\n        meta: {\n          author: \"LRNWebComponents\"\n        }\n      },\n      settings: {\n        quick: [\n          {\n            property: \"title\",\n            title: \"Title\",\n            description: \"The title of the element\",\n            inputMethod: \"textfield\",\n            icon: \"editor:title\"\n          },\n          {\n            property: \"question\",\n            title: \"Question\",\n            description: \"Question for users to respond to.\",\n            inputMethod: \"textfield\",\n            icon: \"icons:help\"\n          }\n        ],\n        configure: [\n          {\n            property: \"title\",\n            title: \"Title\",\n            description: \"The title of the element\",\n            inputMethod: \"textfield\"\n          },\n          {\n            property: \"hideTitle\",\n            title: \"Hide title\",\n            description: \"Whether or not to display the title\",\n            inputMethod: \"boolean\"\n          },\n          {\n            property: \"question\",\n            title: \"Question\",\n            description: \"Question for users to respond to.\",\n            inputMethod: \"textfield\"\n          },\n          {\n            property: \"randomize\",\n            title: \"Randomize\",\n            description: \"Randomize the answers dynamically\",\n            inputMethod: \"boolean\"\n          },\n          {\n            property: \"answers\",\n            title: \"Answer set\",\n            description: \"Answers in a multiple choice\",\n            inputMethod: \"array\",\n            properties: [\n              {\n                property: \"correct\",\n                title: \"Correct\",\n                description: \"If this is correct or not\",\n                inputMethod: \"boolean\"\n              },\n              {\n                property: \"label\",\n                title: \"Answer\",\n                description: \"Possible answer to the question\",\n                inputMethod: \"textfield\",\n                required: true\n              }\n            ]\n          },\n          {\n            property: \"correctText\",\n            title: \"Correct feedback\",\n            description: \"Feedback when they get it right\",\n            inputMethod: \"textfield\"\n          },\n          {\n            property: \"incorrectText\",\n            title: \"Incorrect feedback\",\n            description: \"Feedback when they get it wrong\",\n            inputMethod: \"textfield\"\n          }\n        ],\n        advanced: [\n          {\n            property: \"checkLabel\",\n            title: \"Check answers label\",\n            description: \"Label for getting solution feedback\",\n            inputMethod: \"textfield\"\n          },\n          {\n            property: \"resetLabel\",\n            title: \"Reset label\",\n            description: \"label for the reset button\",\n            inputMethod: \"textfield\"\n          }\n        ]\n      },\n      saveOptions: {\n        unsetAttributes: [\"displayed-answers\"]\n      }\n    };\n  }\n  /**\n   * Attached to the DOM, now fire.\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    // single option implies it's a radio group or if multiple, do check boxes\n    if (this.singleOption) {\n      import(\"@polymer/paper-radio-group/paper-radio-group.js\");\n      import(\"@polymer/paper-radio-button/paper-radio-button.js\");\n    } else {\n      import(\"@polymer/paper-checkbox/paper-checkbox.js\");\n    }\n    this.setAttribute(\"typeof\", \"oer:Assessment\");\n    afterNextRender(this, function() {\n      this.$.toast.fitInto = this;\n      this.HAXWiring = new HAXWiring();\n      this.HAXWiring.setup(\n        MultipleChoice.haxProperties,\n        MultipleChoice.tag,\n        this\n      );\n    });\n  }\n}\nwindow.customElements.define(MultipleChoice.tag, MultipleChoice);\nexport { MultipleChoice };\n"],"names":["MultipleChoice","SchemaBehaviors","PolymerElement","e","i","j","notifyPath","$","toast","hide","this","displayedAnswers","userGuess","setTimeout","answers","_this2","set","gotRight","correct","checkAnswers","__toastColor","__toastIcon","__toastText","correctText","show","incorrectText","dispatchEvent","CustomEvent","bubbles","composed","cancelable","detail","passed","randomize","_typeof","length","temporaryValue","randomIndex","random","currentIndex","Math","floor","singleOption","setAttribute","afterNextRender","fitInto","HAXWiring","setup","haxProperties","tag","html","Object","assign","title","type","String","value","disabled","Boolean","checkLabel","resetLabel","relatedResource","hideTitle","question","Array","notify","computed","observer","reflectToAttribute","hideButtons","canScale","canPosition","canEditSource","gizmo","description","icon","color","groups","handles","meta","author","settings","quick","property","inputMethod","configure","properties","required","advanced","saveOptions","unsetAttributes","window","customElements","define"],"mappings":"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"}