{"version":3,"file":"lrn-icon.umd.js","sources":["lrn-icon.umd.js"],"sourcesContent":["import { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport { dom } from \"@polymer/polymer/lib/legacy/polymer.dom.js\";\nimport \"@polymer/iron-meta/iron-meta.js\";\nimport \"@polymer/iron-flex-layout/iron-flex-layout.js\";\nimport \"@lrnwebcomponents/lrn-shared-styles/lrn-shared-styles.js\";\n\n/**\nThis is a fork of https://github.com/PolymerElements/lrn-icon\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n/**\n\nThe `lrn-icon` element displays an icon. By default an icon renders as a 24px square.\n\nExample using src:\n\n    <lrn-icon src=\"star.png\"></lrn-icon>\n\nExample setting size to 32px x 32px:\n\n    <lrn-icon class=\"big\" src=\"big_star.png\"></lrn-icon>\n\n    <style>\n      .big {\n        --lrn-icon-height: 32px;\n        --lrn-icon-width: 32px;\n      }\n    </style>\n\nThe iron elements include several sets of icons.\nTo use the default set of icons, import `lrn-icons.html` and use the `icon` attribute to specify an icon:\n\n    <link rel=\"import\" href=\"/components/lrn-icons/lrn-icons.html\">\n\n    <lrn-icon icon=\"menu\"></lrn-icon>\n\nTo use a different built-in set of icons, import the specific `lrn-icons/<iconset>-icons.html`, and\nspecify the icon as `<iconset>:<icon>`. For example, to use a communication icon, you would\nuse:\n\n    <link rel=\"import\" href=\"/components/lrn-icons/communication-icons.html\">\n\n    <lrn-icon icon=\"communication:email\"></lrn-icon>\n\nYou can also create custom icon sets of bitmap or SVG icons.\n\nExample of using an icon named `cherry` from a custom iconset with the ID `fruit`:\n\n    <lrn-icon icon=\"fruit:cherry\"></lrn-icon>\n\nSee [lrn-iconset](lrn-iconset) and [lrn-iconset-svg](lrn-iconset-svg) for more information about\nhow to create a custom iconset.\n\nSee the [lrn-icons demo](lrn-icons?view=demo:demo/index.html) to see the icons available\nin the various iconsets.\n\nTo load a subset of icons from one of the default `lrn-icons` sets, you can\nuse the [poly-icon](https://poly-icon.appspot.com/) tool. It allows you\nto select individual icons, and creates an iconset from them that you can\nuse directly in your elements.\n\n### Styling\n\nThe following custom properties are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--lrn-icon` | Mixin applied to the icon | {}\n`--lrn-icon-width` | Width of the icon | `24px`\n`--lrn-icon-height` | Height of the icon | `24px`\n`--lrn-icon-fill-color` | Fill color of the svg icon | `currentcolor`\n`--lrn-icon-stroke-color` | Stroke color of the svg icon | none\n\n@group Iron Elements\n@element lrn-icon\n* @demo demo/index.html\n@hero hero.svg\n@homepage polymer.github.io\n*/\nclass LrnIcon extends PolymerElement {\n  static get template() {\n    return html`\n      <style include=\"lrn-shared-styles\">\n        :host {\n          position: relative;\n\n          vertical-align: middle;\n\n          fill: var(--lrn-icon-fill-color, currentcolor);\n          stroke: var(--lrn-icon-stroke-color, none);\n\n          width: var(--lrn-icon-width, 24px);\n          height: var(--lrn-icon-height, 24px);\n          @apply --layout-inline;\n          @apply --layout-center-center;\n          @apply --lrn-icon;\n        }\n      </style>\n      <iron-icon icon$=\"lrn:[[icon]]\"></iron-icon>\n    `;\n  }\n\n  static get tag() {\n    return \"lrn-icon\";\n  }\n\n  static get properties() {\n    return {\n      /**\n       * The name of the icon to use. The name should be of the form:\n       * `iconset_name:icon_name`.\n       */\n      icon: {\n        type: String\n      },\n\n      /**\n       * The name of the theme to used, if one is specified by the\n       * iconset.\n       */\n      theme: {\n        type: String\n      },\n\n      /**\n       * If using lrn-icon without an iconset, you can set the src to be\n       * the URL of an individual icon image file. Note that this will take\n       * precedence over a given icon attribute.\n       */\n      src: {\n        type: String\n      },\n\n      _meta: {\n        value: document.createElement(\"iron-meta\", { type: \"iconset\" })\n      }\n    };\n  }\n\n  static get observers() {\n    return [\n      \"_updateIcon(_meta, isAttached)\",\n      \"_updateIcon(theme, isAttached)\",\n      \"_srcChanged(src, isAttached)\",\n      \"_iconChanged(icon, isAttached)\"\n    ];\n  }\n  _iconChanged(icon) {\n    this._iconName = icon;\n    this._iconsetName = \"lrn\";\n    this._updateIcon();\n  }\n\n  _srcChanged(src) {\n    this._updateIcon();\n  }\n\n  _usesIconset() {\n    return this.icon || !this.src;\n  }\n\n  /** @suppress {visibility} */\n  _updateIcon() {\n    if (this._usesIconset()) {\n      if (this._img && this._img.parentNode) {\n        dom(this.root).removeChild(this._img);\n      }\n      if (this._iconName === \"\") {\n        if (this._iconset) {\n          this._iconset.removeIcon(this);\n        }\n      } else if (this._iconsetName && this._meta) {\n        this._iconset = this._meta.byKey(this._iconsetName);\n        if (this._iconset) {\n          this._iconset.applyIcon(this, this._iconName, this.theme);\n          window.removeEventListener(\n            \"lrn-iconset-added\",\n            this._updateIcon.bind(this)\n          );\n        } else {\n          window.addEventListener(\n            \"lrn-iconset-added\",\n            this._updateIcon.bind(this)\n          );\n        }\n      }\n    } else {\n      if (this._iconset) {\n        this._iconset.removeIcon(this);\n      }\n      if (!this._img) {\n        this._img = document.createElement(\"img\");\n        this._img.style.width = \"100%\";\n        this._img.style.height = \"100%\";\n        this._img.draggable = false;\n      }\n      this._img.src = this.src;\n      dom(this.root).appendChild(this._img);\n    }\n  }\n}\nwindow.customElements.define(LrnIcon.tag, LrnIcon);\nexport { LrnIcon };\n"],"names":["LrnIcon","PolymerElement","html","icon","type","String","theme","src","_meta","value","document","createElement","_iconName","_iconsetName","_updateIcon","this","_usesIconset","_img","parentNode","dom","root","removeChild","_iconset","removeIcon","byKey","applyIcon","window","removeEventListener","bind","addEventListener","style","width","height","draggable","appendChild","customElements","define","tag"],"mappings":"o9DAqFMA,gaAAgBC,+DAEXC,8CAsBA,oDAIA,CAKLC,KAAM,CACJC,KAAMC,QAORC,MAAO,CACLF,KAAMC,QAQRE,IAAK,CACHH,KAAMC,QAGRG,MAAO,CACLC,MAAOC,SAASC,cAAc,YAAa,CAAEP,KAAM,sDAMhD,CACL,iCACA,iCACA,+BACA,4EAGSD,QACNS,UAAYT,OACZU,aAAe,WACfC,kDAGKP,QACLO,4DAIEC,KAAKZ,OAASY,KAAKR,0CAKtBQ,KAAKC,gBACHD,KAAKE,MAAQF,KAAKE,KAAKC,YACzBC,MAAIJ,KAAKK,MAAMC,YAAYN,KAAKE,MAEX,KAAnBF,KAAKH,UACHG,KAAKO,eACFA,SAASC,WAAWR,MAElBA,KAAKF,cAAgBE,KAAKP,aAC9Bc,SAAWP,KAAKP,MAAMgB,MAAMT,KAAKF,cAClCE,KAAKO,eACFA,SAASG,UAAUV,KAAMA,KAAKH,UAAWG,KAAKT,OACnDoB,OAAOC,oBACL,oBACAZ,KAAKD,YAAYc,KAAKb,QAGxBW,OAAOG,iBACL,oBACAd,KAAKD,YAAYc,KAAKb,UAKxBA,KAAKO,eACFA,SAASC,WAAWR,MAEtBA,KAAKE,YACHA,KAAOP,SAASC,cAAc,YAC9BM,KAAKa,MAAMC,MAAQ,YACnBd,KAAKa,MAAME,OAAS,YACpBf,KAAKgB,WAAY,QAEnBhB,KAAKV,IAAMQ,KAAKR,IACrBY,MAAIJ,KAAKK,MAAMc,YAAYnB,KAAKE,4CAItCS,OAAOS,eAAeC,OAAOpC,EAAQqC,IAAKrC"}